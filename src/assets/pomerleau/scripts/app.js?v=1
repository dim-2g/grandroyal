(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

var _environment = require('./utils/environment');

var _html = require('./utils/html');

var _globals = require('./utils/globals');

var _globals2 = _interopRequireDefault(_globals);

var _modules = require('./modules');

var modules = _interopRequireWildcard(_modules);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } /* jshint esnext: true */


// Global functions and tools


// Basic modules


var App = function () {
	function App() {
		var _this = this;

		_classCallCheck(this, App);

		this.modules = modules;
		this.currentModules = [];

		_environment.$document.on('initModules.App', function (event) {
			_this.initGlobals(event.firstBlood).deleteModules().initModules();
		});
	}

	/**
  * Destroy all existing modules
  * @return  {Object}  this  Allows chaining
  */


	App.prototype.deleteModules = function deleteModules() {
		// oop modules
		var i = this.currentModules.length;

		// Destroy all modules
		while (i--) {
			this.currentModules[i].destroy();
			this.currentModules.splice(i);
		}

		return this;
	};

	/**
  * Execute global functions and settings
  * Allows you to initialize global modules only once if you need
  * (ex.: when using Barba.js or SmoothState.js)
  * @return  {Object}  this  Allows chaining
  */


	App.prototype.initGlobals = function initGlobals(firstBlood) {
		(0, _globals2.default)(firstBlood);
		return this;
	};

	/**
  * Find modules and initialize them
  * @return  {Object}  this  Allows chaining
  */


	App.prototype.initModules = function initModules(scope) {
		if (!scope) {
			scope = document;
		}
		// Elements with module
		var moduleEls = scope.querySelectorAll('[data-module]');

		// Loop through elements
		var i = 0;
		var elsLen = moduleEls.length;

		for (; i < elsLen; i++) {

			// Current element
			var el = moduleEls[i];

			// All data- attributes considered as options
			var options = (0, _html.getNodeData)(el);

			// Add current DOM element and jQuery element
			options.el = el;
			options.$el = $(el);

			// Module does exist at this point
			var attr = options.module;

			// Splitting modules found in the data-attribute
			var moduleIdents = attr.replace(/\s/g, '').split(',');

			// Loop modules
			var j = 0;
			var modulesLen = moduleIdents.length;

			for (; j < modulesLen; j++) {
				var moduleAttr = moduleIdents[j];

				if (typeof this.modules[moduleAttr] === 'function') {
					var module = new this.modules[moduleAttr](options);
					this.currentModules.push(module);
				}
			}
		}

		return this;
	};

	return App;
}();

// IIFE for loading the application
// ==========================================================================


(function () {
	var loaded = false;
	var maxLoad = 3000;

	// On load
	// ==========================================================================
	_environment.$window.on('load', function () {
		if (!loaded) {
			loaded = true;
			load();
		}
	});

	// Maximum load
	// ==========================================================================
	setTimeout(function () {
		if (!loaded) {
			loaded = true;
			load();
		}
	}, maxLoad);

	// Load
	// ==========================================================================
	function load() {
		window.App = new App();
		_environment.$document.trigger({
			type: 'initModules.App',
			firstBlood: true
		});

		if (window.navigator.userAgent.match(/Edge/) || window.navigator.userAgent.match(/Trident/)) {
			_environment.$body.addClass('is-ie');
		}
	}

	if (window.matchMedia("(max-width: 1199px)").matches) {
		addLoadClass();
	} else if (window.matchMedia("(min-width: 1200px)").matches) {
		_environment.$document.on('SmoothScroll.isReady', function (event) {
			addLoadClass();
		});
	}

	function addLoadClass() {
		_environment.$body.addClass('is-loaded');

		setTimeout(function () {
			_environment.$body.addClass('is-animated');
		}, 600);
	}
})();

$(document).on("click", ".o-list-table_item.list-toggle-click", function () {
	if (!$(this).hasClass('active')) {
		$(this).parent().find(".list-toggle-click").removeClass('active');
		$(this).parent().find(".list-toggle-click .content-toggle").slideUp('fast');
		$(this).addClass('active');
	} else {
		$(this).removeClass('active');
	}
	$(this).find(".content-toggle").slideToggle("fast");
});

$(document).on("click", ".c-team_item .c-team_image .content-inner-click", function () {
	$(this).parent().toggleClass('active');
});

},{"./modules":5,"./utils/environment":36,"./utils/globals":37,"./utils/html":38}],2:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.transitions = undefined;

var _environment = require('../utils/environment');

/**
 * List of Transitions
 */
var transitions = {
	mainTransition: {
		start: function start() {
			var _this = this;

			_environment.$body.removeClass('is-loaded is-animated has-nav-news-open');

			setTimeout(function () {
				_this.newContainerLoading.then(_this.finish.bind(_this));
			}, 600);
		},
		finish: function finish() {
			this.done();

			var $el = $(this.newContainer);
			var templateName = $el.data('template');
			_environment.$body.attr('data-template', templateName);

			//reinit modules
			var app = window.App;
			app.deleteModules();
			app.initModules();

			if (window.matchMedia("(max-width: 1199px)").matches) {
				document.body.scrollTop = 0;
				_environment.$body.addClass('is-loaded');

				setTimeout(function () {
					_environment.$body.addClass('is-animated');
				}, 600);
			} else if (window.matchMedia("(min-width: 1200px)").matches) {
				_environment.$document.on('SmoothScroll.isReady', function (event) {
					_environment.$body.addClass('is-loaded');

					setTimeout(function () {
						_environment.$body.addClass('is-animated');
					}, 600);
				});
			}
		}
	},
	navTransition: {
		start: function start() {
			var _this2 = this;

			_environment.$body.removeClass('is-loaded is-animated').addClass('is-loading');

			setTimeout(function () {
				_environment.$body.removeClass('has-nav-open');
			}, 60);

			setTimeout(function () {

				_this2.newContainerLoading.then(_this2.finish.bind(_this2));
			}, 800);
		},
		finish: function finish() {
			this.done();

			var $el = $(this.newContainer);
			var templateName = $el.data('template');
			_environment.$body.attr('data-template', templateName);

			//reinit modules
			var app = window.App;
			app.deleteModules();
			app.initModules();

			if (window.matchMedia("(max-width: 1199px)").matches) {
				document.body.scrollTop = 0;
				_environment.$body.removeClass('is-loading');
				_environment.$body.addClass('is-loaded');

				setTimeout(function () {
					_environment.$body.addClass('is-animated');
				}, 600);
			} else if (window.matchMedia("(min-width: 1200px)").matches) {
				_environment.$document.on('SmoothScroll.isReady', function (event) {
					_environment.$body.removeClass('is-loading');
					_environment.$body.addClass('is-loaded');

					setTimeout(function () {
						_environment.$body.addClass('is-animated');
					}, 600);
				});
			}
		}
	},
	sectionTransition: {
		start: function start() {
			var _this3 = this;

			// Scroll to top
			_environment.$document.trigger({
				type: 'SmoothScroll.goToTop'
			});

			this.oldHeader = $('.js-header-home');

			this.option = _environment.$body.attr('data-route-option');

			if (this.option === 'next-section') {
				this.oldHeader.addClass('is-prev');
			} else {
				this.oldHeader.addClass('is-next');
			}

			_environment.$body.addClass('is-loading');
			_environment.$body.removeClass('is-loaded');

			setTimeout(function () {
				_this3.newContainerLoading.then(_this3.finish.bind(_this3));
			}, 1200);
		},
		finish: function finish() {
			var _this4 = this;

			this.done();

			var $el = $(this.newContainer);
			this.newHeader = $('.js-header-home', $el);

			if (this.option === 'next-section') {
				this.newHeader.addClass('is-next-section');
			} else {
				this.newHeader.addClass('is-prev-section');
			}

			var templateName = $el.data('template');
			_environment.$body.attr('data-template', templateName);

			//reinit modules
			var app = window.App;
			app.deleteModules();
			app.initModules();

			setTimeout(function () {
				_this4.newHeader.removeClass('is-prev-section is-next-section');
			}, 300);

			if (window.matchMedia("(max-width: 1199px)").matches) {
				document.body.scrollTop = 0;
				_environment.$body.removeClass('is-loading');
				_environment.$body.addClass('is-loaded');

				setTimeout(function () {
					_environment.$body.addClass('is-animated');
				}, 600);
			} else if (window.matchMedia("(min-width: 1200px)").matches) {
				_environment.$document.on('SmoothScroll.isReady', function (event) {
					_environment.$body.removeClass('is-loading');
					_environment.$body.addClass('is-loaded');

					setTimeout(function () {
						_environment.$body.addClass('is-animated');
					}, 600);
				});
			}
		}
	}
};

exports.transitions = transitions;

},{"../utils/environment":36}],3:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.addDependency = addDependency;
exports.hasDependencies = hasDependencies;
exports.resolveDependency = resolveDependency;

var _is = require('../utils/is');

var _array = require('../utils/array');

var _environment = require('../utils/environment');

var DEPENDENCIES = []; /* jshint esnext: true */


var PREFIX = 'dependency-';

var UUID = 0;

function addDependency(source, target) {
	var ident = PREFIX + UUID++;

	DEPENDENCIES.push({
		ident: ident,
		target: target,
		source: source
	});

	return ident;
}

function hasDependencies(ident) {
	var deps = DEPENDENCIES.slice().filter(function (object) {
		if (object.target === ident) {
			return object;
		}
	});
	return deps.length > 0;
}

function resolveDependency(ident) {
	if (typeof ident === 'undefined' || ident === '') {
		console.warn('Need ident to resolve dependency.');
		return false;
	}

	var dependency = (0, _array.findByKeyValue)(DEPENDENCIES, 'ident', ident)[0];

	if (typeof dependency !== 'undefined') {
		var target = dependency.target;

		(0, _array.removeFromArray)(DEPENDENCIES, dependency);

		if (!hasDependencies(target)) {
			_environment.$document.trigger('resolveDependencies.' + target);
		}

		return true;
	} else {
		console.warn('Dependency could not be found');
		return false;
	}
}

},{"../utils/array":35,"../utils/environment":36,"../utils/is":39}],4:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.scrollTo = scrollTo;
/* jshint esnext: true */
var isAnimating = false;

var defaults = {
    easing: 'swing',
    headerOffset: 60,
    speed: 300
};

/**
 * scrollTo is a function that scrolls a container to an element's position within that controller
 * Uses jQuery's $.Deferred to allow using a callback on animation completion
 * @param   {object}  $element  A jQuery node
 * @param   {object}  options
 */
function scrollTo($element, options) {
    var deferred = $.Deferred();

    // Drop everything if this ain't a jQuery object
    if ($element instanceof jQuery && $element.length > 0) {

        // Merging options
        options = $.extend({}, defaults, typeof options !== 'undefined' ? options : {});

        // Prevents accumulation of animations
        if (isAnimating === false) {
            isAnimating = true;

            // Default container that we'll be scrolling
            var $container = $('html, body');
            var elementOffset = 0;

            // Testing container in options for jQuery-ness
            // If we're not using a custom container, we take the top document offset
            // If we are, we use the elements position relative to the container
            if (typeof options.$container !== 'undefined' && options.$container instanceof jQuery && options.$container.length > 0) {
                $container = options.$container;
                elementOffset = $element.position().top;
            } else {
                elementOffset = $element.offset().top;
            }

            $container.animate({
                scrollTop: elementOffset - options.headerOffset
            }, options.speed, options.easing, function () {
                isAnimating = false;
                deferred.resolve();
            });
        }
    }

    return deferred.promise();
}

},{}],5:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _Nav = require('./modules/Nav');

Object.defineProperty(exports, 'Nav', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_Nav).default;
  }
});

var _Dropdown = require('./modules/Dropdown');

Object.defineProperty(exports, 'Dropdown', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_Dropdown).default;
  }
});

var _SliderHome = require('./modules/SliderHome');

Object.defineProperty(exports, 'SliderHome', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_SliderHome).default;
  }
});

var _SliderPage = require('./modules/SliderPage');

Object.defineProperty(exports, 'SliderPage', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_SliderPage).default;
  }
});

var _SliderProject = require('./modules/SliderProject');

Object.defineProperty(exports, 'SliderProject', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_SliderProject).default;
  }
});

var _LightboxVideo = require('./modules/LightboxVideo');

Object.defineProperty(exports, 'LightboxVideo', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_LightboxVideo).default;
  }
});

var _HeaderPage = require('./modules/HeaderPage');

Object.defineProperty(exports, 'HeaderPage', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_HeaderPage).default;
  }
});

var _Carousel = require('./modules/Carousel');

Object.defineProperty(exports, 'Carousel', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_Carousel).default;
  }
});

var _CarouselTimer = require('./modules/CarouselTimer');

Object.defineProperty(exports, 'CarouselTimer', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_CarouselTimer).default;
  }
});

var _CarouselNews = require('./modules/CarouselNews');

Object.defineProperty(exports, 'CarouselNews', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_CarouselNews).default;
  }
});

var _SmoothScrolling = require('./modules/SmoothScrolling');

Object.defineProperty(exports, 'SmoothScrolling', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_SmoothScrolling).default;
  }
});

var _NavNews = require('./modules/NavNews');

Object.defineProperty(exports, 'NavNews', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_NavNews).default;
  }
});

var _News = require('./modules/News');

Object.defineProperty(exports, 'News', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_News).default;
  }
});

var _LocationSwitcher = require('./modules/LocationSwitcher');

Object.defineProperty(exports, 'LocationSwitcher', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_LocationSwitcher).default;
  }
});

var _Filters = require('./modules/Filters');

Object.defineProperty(exports, 'Filters', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_Filters).default;
  }
});

var _ContactForm = require('./modules/ContactForm');

Object.defineProperty(exports, 'ContactForm', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_ContactForm).default;
  }
});

var _PageTransitionsManager = require('./modules/PageTransitionsManager');

Object.defineProperty(exports, 'PageTransitionsManager', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_PageTransitionsManager).default;
  }
});

var _Search = require('./modules/Search');

Object.defineProperty(exports, 'Search', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_Search).default;
  }
});

var _SimilarSwitcher = require('./modules/SimilarSwitcher');

Object.defineProperty(exports, 'SimilarSwitcher', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_SimilarSwitcher).default;
  }
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

},{"./modules/Carousel":8,"./modules/CarouselNews":9,"./modules/CarouselTimer":10,"./modules/ContactForm":11,"./modules/Dropdown":13,"./modules/Filters":14,"./modules/HeaderPage":16,"./modules/LightboxVideo":18,"./modules/LocationSwitcher":19,"./modules/Nav":21,"./modules/NavNews":22,"./modules/News":23,"./modules/PageTransitionsManager":24,"./modules/Search":25,"./modules/SimilarSwitcher":26,"./modules/SliderHome":27,"./modules/SliderPage":28,"./modules/SliderProject":29,"./modules/SmoothScrolling":30}],6:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _environment = require('../utils/environment');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } /* jshint esnext: true */


/**
 * Abstract module
 * Gives access to generic jQuery nodes
 */
var _class = function () {
	function _class(options) {
		_classCallCheck(this, _class);

		this.$document = _environment.$document;
		this.$window = _environment.$window;
		this.$html = _environment.$html;
		this.$body = _environment.$body;
		this.$el = options.$el;
		this.el = options.el;
	}

	_class.prototype.unescapeHTML = function unescapeHTML(string) {
		return string.replace(/&lt;/g, '<').replace(/&gt;/g, '>').replace(/&amp;/g, '&');
	};

	return _class;
}();

exports.default = _class;

},{"../utils/environment":36}],7:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _AbstractModule2 = require('./AbstractModule');

var _AbstractModule3 = _interopRequireDefault(_AbstractModule2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /* jshint esnext: true */


var _class = function (_AbstractModule) {
	_inherits(_class, _AbstractModule);

	function _class(options) {
		_classCallCheck(this, _class);

		var _this = _possibleConstructorReturn(this, _AbstractModule.call(this, options));

		_this.$el.on('click.Button', function (event) {
			_this.$document.trigger('Title.changeLabel', [$(event.currentTarget).val()]);
		});
		return _this;
	}

	_class.prototype.destroy = function destroy() {
		this.$el.off('.Button');
	};

	return _class;
}(_AbstractModule3.default);

exports.default = _class;

},{"./AbstractModule":6}],8:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _AbstractModule2 = require('./AbstractModule');

var _AbstractModule3 = _interopRequireDefault(_AbstractModule2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // ==========================================================================
// Generic module
// ==========================================================================


var _class = function (_AbstractModule) {
	_inherits(_class, _AbstractModule);

	function _class(options) {
		_classCallCheck(this, _class);

		var _this = _possibleConstructorReturn(this, _AbstractModule.call(this, options));

		_this.initSlick();
		return _this;
	}

	// Init slick
	// ==========================================================================


	_class.prototype.initSlick = function initSlick() {
		this.$el.slick({
			arrows: true,
			dots: false,
			speed: 600,
			cssEase: 'cubic-bezier(0.4, 0, 0.2, 1)',
			prevArrow: '<button class="c-carousel_arrow -prev o-button -square -left" type="button"><span class="o-button_label"><svg class="o-button_icon" role="img" title="Previous"><use xlink:href="assets/pomerleau/images/sprite.svg#arrow-prev"></use></svg></span></button>',
			nextArrow: '<button class="c-carousel_arrow -next o-button -square -right" type="button"><span class="o-button_label"><svg class="o-button_icon" role="img" title="Next"><use xlink:href="assets/pomerleau/images/sprite.svg#arrow-next"></use></svg></span></button>'
			// mobileFirst: true,
			// responsive: [
			// 	{
			//   			breakpoint: 700,
			//   			settings: {
			//   				centerMode: true,
			//   				centerPadding: '240px'
			//   			}
			//   		}
			//   	]
		});
	};

	// Destroy
	// ==========================================================================


	_class.prototype.destroy = function destroy() {
		this.$el.off();
	};

	return _class;
}(_AbstractModule3.default);

exports.default = _class;

},{"./AbstractModule":6}],9:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _AbstractModule2 = require('./AbstractModule');

var _AbstractModule3 = _interopRequireDefault(_AbstractModule2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // ==========================================================================
// Generic module
// ==========================================================================


var _class = function (_AbstractModule) {
	_inherits(_class, _AbstractModule);

	function _class(options) {
		_classCallCheck(this, _class);

		var _this = _possibleConstructorReturn(this, _AbstractModule.call(this, options));

		_this.initSlick();
		return _this;
	}

	// Init slick
	// ==========================================================================


	_class.prototype.initSlick = function initSlick() {
		this.$el.slick({
			arrows: true,
			dots: false,
			speed: 600,
			cssEase: 'cubic-bezier(0.4, 0, 0.2, 1)',
			prevArrow: '<button class="c-carousel_arrow -prev o-button -square -left" type="button"><span class="o-button_label"><svg class="o-button_icon" role="img" title="Previous"><use xlink:href="assets/pomerleau/images/sprite.svg#arrow-prev"></use></svg></span></button>',
			nextArrow: '<button class="c-carousel_arrow -next o-button -square -right" type="button"><span class="o-button_label"><svg class="o-button_icon" role="img" title="Next"><use xlink:href="assets/pomerleau/images/sprite.svg#arrow-next"></use></svg></span></button>',
			mobileFirst: true,
			responsive: [{
				breakpoint: 700,
				settings: {
					variableWidth: true
				}
			}]
		});
	};

	// Destroy
	// ==========================================================================


	_class.prototype.destroy = function destroy() {
		this.$el.off();
	};

	return _class;
}(_AbstractModule3.default);

exports.default = _class;

},{"./AbstractModule":6}],10:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _AbstractModule2 = require('./AbstractModule');

var _AbstractModule3 = _interopRequireDefault(_AbstractModule2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // ==========================================================================
// Generic module
// ==========================================================================


var _class = function (_AbstractModule) {
	_inherits(_class, _AbstractModule);

	function _class(options) {
		_classCallCheck(this, _class);

		var _this = _possibleConstructorReturn(this, _AbstractModule.call(this, options));

		_this.initSlick();
		return _this;
	}

	// Init slick
	// ==========================================================================


	_class.prototype.initSlick = function initSlick() {
		var _this2 = this;

		this.$el.slick({
			arrows: false,
			autoplay: true,
			autoplaySpeed: 4000,
			dots: true,
			speed: 600,
			pauseOnHover: false,
			pauseOnFocus: false,
			infinite: true,
			fade: true,
			cssEase: 'cubic-bezier(0.4, 0, 0.2, 1)',
			customPaging: function customPaging(slider, i) {
				i++;
				if (i === 1) {
					return '<button class="c-carousel_dot js-carousel-dot is-first" type="button"><span class="c-carousel_dot_label">0' + i + '</span><span class="c-carousel_dot_line"></span></button>';
				} else {
					return '<button class="c-carousel_dot js-carousel-dot" type="button"><span class="c-carousel_dot_label">0' + i + '</span><span class="c-carousel_dot_line"></span></button>';
				}
			}
		});

		this.$el.slick('slickPause');

		setTimeout(function () {
			_this2.$el.find('.js-carousel-dot.is-first').removeClass('is-first');
			_this2.$el.slick('slickPlay');
		}, 4000);
	};

	// Destroy
	// ==========================================================================


	_class.prototype.destroy = function destroy() {
		this.$el.off();
	};

	return _class;
}(_AbstractModule3.default);

exports.default = _class;

},{"./AbstractModule":6}],11:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _AbstractModule2 = require('./AbstractModule');

var _AbstractModule3 = _interopRequireDefault(_AbstractModule2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /* jshint esnext: true */


var _class = function (_AbstractModule) {
	_inherits(_class, _AbstractModule);

	function _class(options) {
		_classCallCheck(this, _class);

		var _this2 = _possibleConstructorReturn(this, _AbstractModule.call(this, options));

		_this2.$inputs = _this2.$el.find(':input');
		_this2.inputSelectors = 'input[type=text], input[type=password], input[type=email], input[type=url], input[type=tel], input[type=number], input[type=search], textarea';
		_this2.$panes = _this2.$el.find('.js-form-pane');
		_this2.$consent = _this2.$el.find('.js-form-consent');
		_this2.$consentLabel = _this2.$el.find('.js-form-consent-label');
		_this2.$consentError = _this2.$el.find('.js-form-consent-error');
		_this2.$consentError = _this2.$el.find('.js-form-consent-error');
		_this2.$formWrap = _this2.$el.find('.js-form-wrap');
		_this2.$formFeedback = _this2.$el.find('.js-form-feedback');
		_this2.currentPane = 0;

		_this2.updateTextFields();

		var _this = _this2;

		// Switch form panes
		// Simple switch between index 0 and 1 for now
		_this2.$el.on('click.ContactForm', '.js-switch-pane', function () {
			_this2.goToNextPane();
		});

		_this2.$el.on('click.ContactForm', '.js-submit', function () {
			_this2.$el.submit();
		});

		_this2.$el.on('submit.ContactForm', function (event) {
			event.preventDefault();

			if (_this.currentPane === 0) {
				_this.goToNextPane();
			} else {
				var data = $(this).serializeArray();
				_this.submitForm(event, data);
			}
		});

		// Add active if form auto complete
		_this2.$el.on('change.ContactForm', _this2.inputSelectors, function () {
			var $inputElement = $(this);

			if ($inputElement.val().length !== 0 || $inputElement.attr('placeholder') !== undefined) {
				$inputElement.siblings('label').addClass('is-active');
			}
			var error = _this.fieldHasError($inputElement);
		});

		// Add active when element has focus
		_this2.$el.on('focus.ContactForm', _this2.inputSelectors, function () {
			$(this).siblings('label, i').addClass('is-active');
		});

		_this2.$el.on('blur.ContactForm', _this2.inputSelectors, function () {
			var $inputElement = $(this);

			if ($inputElement.val().length === 0 && $inputElement[0].validity.badInput !== true && $inputElement.attr('placeholder') === undefined) {
				$inputElement.siblings('label, i').removeClass('is-active');
			}

			if ($inputElement.val().length === 0 && $inputElement[0].validity.badInput !== true && $inputElement.attr('placeholder') !== undefined) {
				$inputElement.siblings('i').removeClass('is-active');
			}

			var error = _this.fieldHasError($inputElement);
		});
		return _this2;
	}

	/**
  * Upon form submit, many things happen
  * - Validation of inputs
  * - Validation of consent
  * - Delivery of form data to the server
  * - Managing server response states
  *
  * @param  {Event}         event  jQuery Event object
  * @param  {array|string}  data  Form data
  */


	_class.prototype.submitForm = function submitForm(event, data) {
		var _this3 = this;

		var hasErrors = this.fieldsHaveErrors(this.$inputs);

		if (!this.$consent.is(':checked')) {
			this.$consentLabel.addClass('has-error');
			this.$consentError.removeClass('is-hidden');
			hasErrors = true;
		}

		if (!hasErrors) {
			this.$consentLabel.removeClass('has-error');
			this.$consentError.addClass('is-hidden');

			var jqxhr = $.ajax({
				method: 'POST',
				url: this.$el.attr('action'),
				data: data
			}).done(function (response) {
				if (response.success === true) {
					_this3.$panes.eq(_this3.currentPane).fadeOut(function () {
						_this3.$formFeedback.fadeIn();
					});
				} else {
					_this3.manageErrors(response.errors);
				}
			}).fail(function () {
				console.log('error');
			});
		}
	};

	/**
  * Simple function to determine if form is valid enough to switch panes
  * Used by 'Next' button and form submit
  */


	_class.prototype.goToNextPane = function goToNextPane() {
		var _this4 = this;

		if (!this.fieldsHaveErrors(this.$panes.eq(this.currentPane).find(':input'))) {
			this.$panes.eq(this.currentPane).fadeOut(function () {
				_this4.currentPane = 1;
				_this4.$panes.eq(_this4.currentPane).fadeIn();
			});
		}
	};

	/**
  * Loop through errors sent back by the servers and attempt to identify the faulty elements
  * @param  {array}  errors  An array of element names that are in error
  */


	_class.prototype.manageErrors = function manageErrors(errors) {
		var i = 0,
		    len = errors.length;
		for (; i < len; i++) {
			$('#' + errors[i]).addClass('has-error');
		}
	};

	/**
  * Function to update labels of text fields
  * @see  MaterializeCSS
  */


	_class.prototype.updateTextFields = function updateTextFields() {
		$(this.inputSelectors).each(function (index, element) {
			if ($(element).val().length > 0 || element.autofocus || $(this).attr('placeholder') !== undefined || $(element)[0].validity.badInput === true) {
				$(this).siblings('label, i').addClass('is-active');
			} else {
				$(this).siblings('label, i').removeClass('is-active');
			}
		});
	};

	/**
  * Function to validate single inputs
  * @see  MaterializeCSS
  */


	_class.prototype.fieldHasError = function fieldHasError($object) {
		var hasLength = $object.attr('length') !== undefined;
		var lenAttr = parseInt($object.attr('length'));
		var len = $object.val().length;
		var fieldHasError = false;

		if ($object.hasClass('js-validate')) {
			if ($object.val().length !== 0) {
				if ($object[0].validity.badInput !== false) {
					// Check for character counter attributes
					if ($object.is(':valid') && hasLength && len <= lenAttr || $object.is(':valid') && !hasLength) {} else {
						fieldHasError = true;
					}
				}
				if ($object.attr('type') == 'email') {
					var EMAIL_REGEX = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
					if (!EMAIL_REGEX.test($object.val())) {
						fieldHasError = true;
					}
				}
			} else {
				fieldHasError = true;
			}

			if (fieldHasError) {
				$object.addClass('has-error');
			} else {
				$object.removeClass('has-error');
			}
		}

		return fieldHasError;
	};

	/**
  * Validate multiple inputs
  * @return {boolean}
  */


	_class.prototype.fieldsHaveErrors = function fieldsHaveErrors($inputs) {
		var i = 0;
		var len = $inputs.length;
		var hasErrors = false;

		for (; i < len; i++) {
			if (this.fieldHasError($inputs.eq(i))) {
				hasErrors = true;
			}
		}

		return hasErrors;
	};

	_class.prototype.destroy = function destroy() {
		this.$el.off('.ContactForm');
	};

	return _class;
}(_AbstractModule3.default);

exports.default = _class;

},{"./AbstractModule":6}],12:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _AbstractModule2 = require('./AbstractModule');

var _AbstractModule3 = _interopRequireDefault(_AbstractModule2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /* jshint esnext: true */


var _class = function (_AbstractModule) {
	_inherits(_class, _AbstractModule);

	function _class(options) {
		_classCallCheck(this, _class);

		var _this = _possibleConstructorReturn(this, _AbstractModule.call(this, options));

		_this.$sliderOne = options.sliders.one.$el;
		_this.$sliderTwo = options.sliders.two.$el;

		_this.$sliderOne.slick(options.sliders.one.options).on('beforeChange', function (event, slick, currentSlide, nextSlide) {
			if (currentSlide !== nextSlide) {
				var action = void 0;
				if (Math.abs(nextSlide - currentSlide) === 1) {
					action = nextSlide - currentSlide > 0 ? 'slickNext' : 'slickPrev';
				} else {
					action = nextSlide - currentSlide > 0 ? 'slickPrev' : 'slickNext';
				}
				_this.$sliderTwo.slick(action);
				_this.activeSlideChanged(nextSlide);
			}
		});

		_this.$sliderTwo.slick(options.sliders.two.options);

		_this.$el.on('click.DoubleSlider', '.js-slider-button', function (event) {
			_this.changeSlide(event);
		});
		return _this;
	}

	/**
  * Change active slide for both sliders
  * @var  {Event}  event
  */


	_class.prototype.changeSlide = function changeSlide(event) {
		var $target = $(event.currentTarget);
		var action = $target.data('action');

		switch (action) {
			case 'prev':
				this.$sliderOne.slick('slickPrev');
				break;
			case 'next':
				this.$sliderOne.slick('slickNext');
				break;
		}
	};

	_class.prototype.activeSlideChanged = function activeSlideChanged(index) {};

	_class.prototype.destroy = function destroy() {
		this.$sliderOne.slick('unslick');
		this.$sliderTwo.slick('unslick');
		this.$el.off('.DoubleSlider');
	};

	return _class;
}(_AbstractModule3.default);

exports.default = _class;

},{"./AbstractModule":6}],13:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _AbstractModule2 = require('./AbstractModule');

var _AbstractModule3 = _interopRequireDefault(_AbstractModule2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _class = function (_AbstractModule) {
	_inherits(_class, _AbstractModule);

	function _class(options) {
		_classCallCheck(this, _class);

		var _this = _possibleConstructorReturn(this, _AbstractModule.call(this, options));

		_this.mode = typeof options['dropdown-mode'] !== 'undefined' ? options['dropdown-mode'] : 'accordeon';

		_this.$el.on('click.Dropdown', '.js-dropdown-toggle', function (event) {
			return _this.manageDropdownClick(event);
		});
		return _this;
	}

	// Toggle dropdown
	// ==========================================================================


	_class.prototype.manageDropdownClick = function manageDropdownClick(event) {
		if (window.matchMedia("(max-width: 1199px)").matches) {
			var $target = $(event.currentTarget);
			var $parent = $target.parents('.js-dropdown');

			event.preventDefault();

			if ($target.hasClass('is-disabled')) {
				return false;
			}

			if (this.mode === 'accordeon') {
				$parent.siblings('.js-dropdown').removeClass('has-dropdown').find('.js-dropdown-list').stop().slideUp();
			}

			$target.siblings('.js-dropdown-list').stop().slideToggle();

			if ($parent.hasClass('has-dropdown')) {
				$parent.removeClass('has-dropdown');
				this.$el.removeClass('has-dropdown');
			} else {
				$parent.addClass('has-dropdown');
				this.$el.addClass('has-dropdown');
			}
		}
	};

	// Destroy
	// ==========================================================================


	_class.prototype.destroy = function destroy() {
		this.$el.off('.Dropdown');
	};

	return _class;
}(_AbstractModule3.default);

exports.default = _class;

},{"./AbstractModule":6}],14:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _AbstractModule2 = require('./AbstractModule');

var _AbstractModule3 = _interopRequireDefault(_AbstractModule2);

var _animateTo = require('../utils/animateTo');

var _animateTo2 = _interopRequireDefault(_animateTo);

var _is = require('../utils/is');

var _dependencies = require('../global/dependencies');

var _smoothScrollbar = require('smooth-scrollbar');

var _smoothScrollbar2 = _interopRequireDefault(_smoothScrollbar);

var _ractiveEventsTap = require('../ractive/ractive-events-tap');

var _ractiveEventsTap2 = _interopRequireDefault(_ractiveEventsTap);

var _ractiveTransitionsFade = require('../ractive/ractive-transitions-fade');

var _ractiveTransitionsFade2 = _interopRequireDefault(_ractiveTransitionsFade);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // ==========================================================================
// Filters
// ==========================================================================
/* jshint esnext: true */


var _class = function (_AbstractModule) {
	_inherits(_class, _AbstractModule);

	function _class(options) {
		_classCallCheck(this, _class);

		var _this2 = _possibleConstructorReturn(this, _AbstractModule.call(this, options));

		_this2.searchIsOpen = false;

		_this2.elements = {
			$total: $('.js-project-total'),
			$filters: $('.js-filters'),
			$projects: $('.js-projects')
		};

		window.Ractive.DEBUG = false;

		_this2.filtersController = _this2.initFiltersController();
		_this2.projectsController = _this2.initProjectsController();

		_this2.smoothScrollingDependency = (0, _dependencies.addDependency)('Filters', 'SmoothScrolling');

		_this2.filtersController.dispatchFilters({
			firstBlood: true
		});

		if (window.matchMedia("(min-width: 1200px)").matches) {
			_this2.scrollbarTags = _smoothScrollbar2.default.init(_this2.$el.find('.js-filters-tags')[0]);
			_this2.scrollbarFilters = _smoothScrollbar2.default.init(_this2.$el.find('.js-filters-list')[0]);
		}

		_this2.$el.on('click.Filters', '.js-filters-open', function (event) {
			return _this2.toggleFilters(event);
		});
		_this2.$el.on('click.Filters', '.js-filters-search-open', function (event) {
			return _this2.toggleFiltersSearch(event);
		});
		_this2.$el.on('click.Filters', '.js-filters-button', function (event) {
			return _this2.filter(event);
		});
		_this2.$el.on('click.Filters', '.js-filters-search-button', function (event) {
			return _this2.search(event);
		});
		return _this2;
	}

	//	Toggle filters
	// ==========================================================================


	_class.prototype.toggleFilters = function toggleFilters(event) {
		this.$body.toggleClass('has-filters-open').removeClass('has-filters-search-open');
		$(event.currentTarget).toggleClass('is-active');
		this.$el.find('.js-filters-search-open.is-active').removeClass('is-active');

		if (this.$body.hasClass('has-filters-open')) {
			this.$el.find('.js-filters-list').scrollTop(0);
		}
	};

	//	Close filters
	// ==========================================================================


	_class.prototype.closeFilters = function closeFilters() {
		this.$body.removeClass('has-filters-open');
		this.$el.find('.js-filters-open').removeClass('is-active');
	};

	//	Toggle filters search
	// ==========================================================================


	_class.prototype.toggleFiltersSearch = function toggleFiltersSearch(event) {
		var $searchInput = this.$el.find('.js-filters-search-input');

		this.$body.toggleClass('has-filters-search-open').removeClass('has-filters-open');
		$(event.currentTarget).toggleClass('is-active');
		this.$el.find('.js-filters-open.is-active').removeClass('is-active');

		if (!this.searchIsOpen) {
			$searchInput.focus();
			this.searchIsOpen = true;
		} else {
			$searchInput.blur();
			this.searchIsOpen = false;
		}
	};

	//	Close filters search
	// ==========================================================================


	_class.prototype.closeFiltersSearch = function closeFiltersSearch(event) {
		this.$body.removeClass('has-filters-search-open');
		this.$el.find('.js-filters-search-open').removeClass('is-active');
	};

	// Filter
	// ==========================================================================


	_class.prototype.filter = function filter(event) {
		(0, _animateTo2.default)(this.elements.$projects);
		this.closeFilters();
	};

	// Search
	// ==========================================================================


	_class.prototype.search = function search(event) {
		this.closeFiltersSearch();
	};

	/**
  * This controller is used for managing filters being added and removed
  * It tells the project controller which filters are active or not through event dispatching
  *
  * @return  {Ractive Object}  Ractive instance
  */


	_class.prototype.initFiltersController = function initFiltersController() {
		var _this = this;
		var ractive = new Ractive({
			el: this.elements.$filters,
			template: this.unescapeHTML(this.elements.$filters.html()),
			data: {
				items: [],
				activeCategories: window.templateData.activeCategories,
				activeServices: window.templateData.activeServices,
				activeCharacteristics: window.templateData.activeCharacteristics,
				activeTags: window.templateData.activeTags,
				activeType: window.templateData.activeType,
				filterBoxes: window.templateData.filterBoxes,
				projectTypes: window.templateData.projectTypes,
				projectCategories: window.templateData.projectCategories,
				projectTags: window.templateData.projectTags
			},
			delimiters: ['[[', ']]'],
			tripleDelimiters: ['[[[', ']]]'],
			events: { tap: _ractiveEventsTap2.default },
			/**
    * Adds an item to filters
    *
    * @param {object}  model  Item model
    */
			addItem: function addItem(model) {
				this.push('items', model);
			},

			/**
    * Fire an event, so we can query the server for projects according to active filters
    */
			dispatchFilters: function dispatchFilters(options) {
				options = $.extend(options, {});

				var data = {
					filters: this.get('items'),
					keyword: this.get('keyword')
				};
				_this.projectsController.fire('refreshProjects', data, options);
			},

			/**
    * Find an item in items array using its ID
    *
    * @param  {string}       id  Quasi-unique identifier composed of {{filterIdent}}_{{ident}}
    * @return {int|boolean}      Index of the item in the array or false if can't be found
    */
			findIndex: function findIndex(id) {
				var items = this.get('items');
				var i = items.length;

				while (i--) {
					if (items[i].id === id) {
						return i;
					}
				}
				return false;
			},

			/**
    * Search item set for items with a specific taxonomy
    * @param   {string}  taxonomy  Taxonomy identifier
    * @return  {array}             Array of item indexes
    */
			findTaxonomyIndexes: function findTaxonomyIndexes(taxonomy) {
				var items = this.get('items');
				var i = items.length;
				var indexes = [];

				while (i--) {
					if (items[i].taxonomy === taxonomy) {
						indexes.push(i);
					}
				}
				return indexes;
			},

			/**
    * Item model
    * @param  {object}  params  Initial values for the model
    * @return {object}          Item model
    *
    * Model properties
    *
    * @param {string}  id        Quasi-unique identifier composed of {{filterIdent}}_{{ident}}
    * @param {string}  taxonomy  Filter taxonomy
    * @param {string}  label     Front end view
    * @param {string}  value     Input value used for filtering projects in our action
    */
			getItemModel: function getItemModel(params) {
				var defaults = {
					id: null,
					taxonomy: '',
					label: '',
					value: ''
				};
				return $.extend(defaults, params);
			},

			/**
    * Extract an item model from a node
    * @param  {object}  event  Ractive event object
    * @return {object}         Item model
    */
			getItemModelFromNode: function getItemModelFromNode(event) {
				return this.getItemModel({
					id: event.node.id,
					taxonomy: event.node.getAttribute('data-taxonomy'),
					label: event.node.getAttribute('data-label'),
					value: event.node.value
				});
			},

			/**
    * Remove an item in the items array according to its index
    * Also uncheck its associated input
    * Couldn't find a way to data-bind in this situation
    *
    * @param  {int}     index  Index of the item within the array
    */
			removeItem: function removeItem(index) {
				// False would indicate that the item could not be found in items array
				if (index !== false) {
					// Get item by keypath. Allows us to find its HTML input element
					var item = this.get('items.' + index);
					var $item = $('#' + item.id);

					// Removing the item from the items array
					this.splice('items', index, 1);

					// Not so graceful, since we couldn't really data-bind the input
					$item.prop('checked', false);
				}
			},

			/**
    * Receives a list of indexes to remove from `items`
    *
    * @param  {array}  indexes  Array of indexes to remove
    */
			removeItems: function removeItems(indexes) {
				for (var i = 0, len = indexes.length; i < len; i++) {
					this.removeItem(indexes[i]);
				}
			},

			/**
    * Add a filter to items according to defined filters
    *
    * @param  {string}      taxonomy  Filter taxonomy
    * @param  {string}      dataSet   Ractive dataset to parse
    * @param  {int|string}  value     Value found in URL
    */
			setActiveFilter: function setActiveFilter(taxonomy, dataSet, value) {
				var dataSet = this.get(dataSet);
				var dataSetFilters = [];

				if ((0, _is.isArray)(dataSet)) {
					dataSetFilters = dataSet.slice().map(function (currentValue) {
						return currentValue.filters;
					});
					dataSetFilters = [].concat.apply([], dataSetFilters);
				} else {
					dataSetFilters = dataSet.filters;
				}

				// Find filter object in datasets by filtering the values by their ID
				var object = dataSetFilters.filter(function (object) {
					if (object.id == value) {
						return object;
					}
				})[0];

				this.addItem(this.getItemModel({
					id: taxonomy + '_' + object.id,
					taxonomy: taxonomy,
					label: object.name,
					value: object.id
				}));
			},

			/**
    * Allows us to set proxy events and run other tasks when controller is initialized
    *
    * @param  {array}  options  Array of options
    */
			oninit: function oninit(options) {
				var _this3 = this;

				// Check for existing filters on module init
				var activeType = this.get('activeType');
				var activeCategories = this.get('activeCategories').slice();
				var activeServices = this.get('activeServices').slice();
				var activeCharacteristics = this.get('activeCharacteristics').slice();
				var activeTags = this.get('activeTags');

				if (activeType !== '') {
					this.setActiveFilter('type', 'projectTypes', activeType);
				}

				if (activeCategories.length !== 0) {
					activeCategories.forEach(function (element) {
						_this3.setActiveFilter('categories', 'projectCategories', element);
					});

					// Needs a little timeout
					window.setTimeout(function () {
						activeCategories.forEach(function (element) {
							$('#categories_' + element).prop('checked', true);
						});
					}, 500);
				}

				if (activeServices.length !== 0) {
					activeServices.forEach(function (element) {
						_this3.setActiveFilter('services', 'filterBoxes', element);
					});

					// Needs a little timeout
					window.setTimeout(function () {
						activeServices.forEach(function (element) {
							$('#services_' + element).prop('checked', true);
						});
					}, 500);
				}

				if (activeCharacteristics.length !== 0) {
					activeCharacteristics.forEach(function (element) {
						_this3.setActiveFilter('characteristics', 'filterBoxes', element);
					});

					// Needs a little timeout
					window.setTimeout(function () {
						activeCharacteristics.forEach(function (element) {
							$('#characteristics_' + element).prop('checked', true);
						});
					}, 500);
				}

				if (activeTags.length !== 0) {
					this.setActiveFilter('tags', 'projectTags', activeTags[0]);

					// Needs a little timeout
					window.setTimeout(function () {
						$('#tags_' + activeTags.id).prop('checked', true);
					}, 500);
				}

				this.on({
					/**
      * Determine the amount of projects per projectType
      *
      * @param  {array} projects Array of project.
      * @return void
      */
					refreshProjectTypeCount: function refreshProjectTypeCount(projects) {
						var countsByType = [];
						var i = projects.length;

						while (i--) {
							var type = projects[i].type;
							countsByType[type] = typeof countsByType[type] !== 'undefined' ? countsByType[type] + 1 : 1;
							projects.splice(i);
						}

						var projectTypes = this.get('projectTypes').filters.slice();
						var j = projectTypes.length;

						while (j--) {
							var count = countsByType[projectTypes[j].id];
							this.set('projectTypes.filters.' + j + '.count', typeof count === 'undefined' ? 0 : count);
							projectTypes.splice(j);
						}
					},

					/**
      * Event triggered by filter items when clicking close button
      * We find the item's index using the keypath and remove it from array
      *
      * @param  {object}  event  Ractive event object
      */
					remove: function remove(event) {

						// Check if its a project type.
						// We need to manually unset the activeType variable and removes its related categories
						if (event.context.taxonomy === 'type') {
							this.set('activeType', '');
							this.set('activeCategories', []);
							this.removeItems(this.findTaxonomyIndexes('categories'));
						}
						var i = event.keypath.replace('items.', '');
						this.removeItem(i);

						this.dispatchFilters();
					},

					removeAll: function removeAll() {
						var i = this.get('items').length;

						while (i--) {
							this.removeItem(i);
						}

						this.dispatchFilters();
					},


					/**
      * Event triggered by a change on filter inputs
      * Determine if input is being checked or not
      * Add or remove filter item depending on checked state
      *
      * @param  {object}  event  Ractive event object
      */
					toggleItem: function toggleItem(event) {
						var isChecked = event.node.checked;
						var model = this.getItemModelFromNode(event);

						if (isChecked) {
							this.addItem(model);
						} else {
							this.removeItem(this.findIndex(model.id));
						}

						this.dispatchFilters();
					},

					/**
      * Event triggered when type is changed
      * Determine which type of categories to show and toggle them all off
      *
      * @param  {object}  event  Ractive event object
      */
					toggleType: function toggleType(event) {
						var model = this.getItemModelFromNode(event);

						// Remove active type(s) from filters
						this.removeItems(this.findTaxonomyIndexes(model.taxonomy));

						// Remove all the related categories too
						this.removeItems(this.findTaxonomyIndexes('categories'));

						// Now add the toggled one
						this.addItem(model);

						this.dispatchFilters();
					},

					/**
      * Event triggered when search form is submitted
      * Extract the keyword and filter the project list
      *
      * @param  {object}  event  Ractive event object
      */
					search: function search(event) {
						event.original.preventDefault();
						this.dispatchFilters();
					}
				});
			}
		});

		return ractive;
	};

	_class.prototype.initProjectsController = function initProjectsController() {
		var _this = this;
		var ractive = new Ractive({
			el: this.elements.$projects,
			template: this.unescapeHTML(this.elements.$projects.html()),
			data: {
				viewType: 'grid',
				displayProjectList: false,
				projects: [],
				pageArray: [],
				page: 1,
				projectsPerPage: 24,
				state: 'inert'
			},
			computed: {
				hasMoreProjects: function hasMoreProjects() {
					return this.get('page') < this.maxPages();
				},
				projectCount: function projectCount() {
					return this.get('projects').length;
				}
			},
			partials: {
				image: '<span class="o-background -parallax-small js-parallax" data-speed="-0.6" style="background-image: url([[ image ]]);"></span>'
			},
			delimiters: ['[[', ']]'],
			tripleDelimiters: ['[[[', ']]]'],
			transitions: { fade: _ractiveTransitionsFade2.default },

			maxPages: function maxPages() {
				var projectCount = this.get('projectCount');
				var projectsPerPage = this.get('projectsPerPage');
				var remainder = projectCount % projectsPerPage;
				return (projectCount - remainder) / projectsPerPage + (remainder !== 0 ? 1 : 0);
			},

			updatePageArray: function updatePageArray() {

				// pageArray: function () {
				var projects = this.get('projects');
				var projectsPerPage = this.get('projectsPerPage');
				var pageArray = [];
				var i = 0;
				var len = this.get('page');
				for (; i < len; i++) {
					var min = projectsPerPage * i;
					var max = projectsPerPage * i + projectsPerPage;
					var page = projects.slice(min, max);
					pageArray[i] = {
						projects: page,
						projectsLoading: i === len - 1
					};
				}
				this.set('pageArray', pageArray);
				// return pageArray;
				// },
			},

			/**
    * Allows us to set proxy events and run other tasks when controller is initialized
    */
			oninit: function oninit() {
				// _this.$document.trigger('parallax.update');

				// Proxy event handlers
				this.on({
					loadNextPage: function loadNextPage() {
						var _this4 = this;

						this.add('page').then(function () {

							_this4.updatePageArray();

							$(document).trigger('SmoothScrolling.rebuild');

							var pages = _this4.get('pageArray').slice();
							_this4.set('pageArray.' + (pages.length - 1) + '.projectsLoading', false);
						});
					},
					refreshProjects: function refreshProjects(data, options) {
						var _this5 = this;

						this.set('state', 'loading');
						_this.invokeFilteredItems(data, function (projects) {
							_this5.set('displayProjectList', false).then(function () {
								_this5.set('page', 1);
								_this5.set('projects', projects).then(function () {
									_this5.updatePageArray();

									_this.filtersController.fire('refreshProjectTypeCount', projects.slice());

									if (typeof options.firstBlood === 'undefined') {
										(0, _animateTo2.default)($('.js-projects')); // @shame
									} else {
										(0, _dependencies.resolveDependency)(_this.smoothScrollingDependency);
									}

									_this.elements.$total.text(projects.length);

									_this5.set('state', 'inert').then(function () {
										_this5.set('displayProjectList', true).then(function () {

											var pages = _this5.get('pageArray').slice();

											_this5.set('pageArray.' + (pages.length - 1) + '.projectsLoading', false).then(function () {
												if (!options.firstBlood) {
													$(document).trigger('SmoothScrolling.rebuild');
												} else {
													setTimeout(function () {
														$(document).trigger('SmoothScrolling.rebuild');
													}, 301);
												}
											});
										});
									});
								});
							});
						});
					}
				});
			}
		});

		return ractive;
	};

	/**
  * Query server for items and send them to the callback function
  * @param  {array}     data      Object formed by a keyword and a list of filters to query DB with
  * @param  {function}  callback  Function to execute after the AJAX request is done
  */


	_class.prototype.invokeFilteredItems = function invokeFilteredItems(data, callback) {
		var results = [];
		var jqxhr = $.ajax({
			method: 'GET',
			url: 'project/list',
			data: data
		}).done(function (response) {
			if (response.success === true) {
				results = response.results;
			}
		}).fail(function () {}).always(function () {
			callback(results);
		});
	};

	_class.prototype.destroy = function destroy() {
		if (typeof this.scrollbarTags !== 'undefined') {
			this.scrollbarTags.destroy();
			this.scrollbarFilters.destroy();
		}
		this.filtersController.teardown();
		this.projectsController.teardown();
		this.$el.off('.Filters');
	};

	return _class;
}(_AbstractModule3.default);

exports.default = _class;

},{"../global/dependencies":3,"../ractive/ractive-events-tap":32,"../ractive/ractive-transitions-fade":33,"../utils/animateTo":34,"../utils/is":39,"./AbstractModule":6,"smooth-scrollbar":44}],15:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _AbstractModule2 = require('./AbstractModule');

var _AbstractModule3 = _interopRequireDefault(_AbstractModule2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // ==========================================================================
// Generic module
// ==========================================================================


var _class = function (_AbstractModule) {
    _inherits(_class, _AbstractModule);

    function _class(options) {
        _classCallCheck(this, _class);

        return _possibleConstructorReturn(this, _AbstractModule.call(this, options));
    }

    // Destroy
    // ==========================================================================


    _class.prototype.destroy = function destroy() {
        this.$el.off();
    };

    return _class;
}(_AbstractModule3.default);

exports.default = _class;

},{"./AbstractModule":6}],16:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _AbstractModule2 = require('./AbstractModule');

var _AbstractModule3 = _interopRequireDefault(_AbstractModule2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // ==========================================================================
// Slider page
// ==========================================================================


var _class = function (_AbstractModule) {
	_inherits(_class, _AbstractModule);

	function _class(options) {
		_classCallCheck(this, _class);

		var _this = _possibleConstructorReturn(this, _AbstractModule.call(this, options));

		_this.currentSlide = 1;
		_this.isAnimating = false;
		_this.animationDuration = 1200;
		_this.maxSlide = _this.$el.find($('.js-slider-home-slide')).length;
		_this.$controls = _this.$el.find('.js-slider-home-button');

		_this.$el.on('click', '.js-slider-home-next', function (event) {
			return _this.nextSlide();
		});
		_this.$el.on('click', '.js-slider-home-prev', function (event) {
			return _this.prevSlide();
		});
		return _this;
	}

	// Next slide
	// ==========================================================================


	_class.prototype.nextSlide = function nextSlide() {
		this.preventClick();

		if (this.currentSlide === this.maxSlide) {
			this.currentSlide = 0;
		}

		this.currentSlide++;
		this.$el.find('.js-slider-home-slide.is-prev').removeClass('is-prev').addClass('is-next');
		this.$el.find('.js-slider-home-slide.is-current').removeClass('is-current').addClass('is-prev');
		this.$el.find('.js-slider-home-slide[data-slide="' + this.currentSlide + '"]').removeClass('is-next').addClass('is-current');
	};

	// Prev slide
	// ==========================================================================


	_class.prototype.prevSlide = function prevSlide() {
		this.preventClick();

		if (this.currentSlide === 1) {
			this.currentSlide = this.maxSlide + 1;
		}

		this.currentSlide--;
		this.$el.find('.js-slider-home-slide.is-next').removeClass('is-next').addClass('is-prev');
		this.$el.find('.js-slider-home-slide.is-current').removeClass('is-current').addClass('is-next');
		this.$el.find('.js-slider-home-slide[data-slide="' + this.currentSlide + '"]').removeClass('is-prev').addClass('is-current');
	};

	// Prevent click
	// ==========================================================================


	_class.prototype.preventClick = function preventClick() {
		var _this2 = this;

		this.isAnimating = true;
		this.$controls.prop('disabled', true);

		setTimeout(function () {
			_this2.isAnimating = false;
			_this2.$controls.prop('disabled', false);
		}, this.animationDuration);
	};

	// Destroy
	// ==========================================================================


	_class.prototype.destroy = function destroy() {
		this.$el.off();
	};

	return _class;
}(_AbstractModule3.default);

exports.default = _class;

},{"./AbstractModule":6}],17:[function(require,module,exports){
"use strict";

},{}],18:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _AbstractModule2 = require('./AbstractModule');

var _AbstractModule3 = _interopRequireDefault(_AbstractModule2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // ==========================================================================
// Generic module
// ==========================================================================


var _class = function (_AbstractModule) {
	_inherits(_class, _AbstractModule);

	function _class(options) {
		_classCallCheck(this, _class);

		var _this = _possibleConstructorReturn(this, _AbstractModule.call(this, options));

		_this.$el.on('click', '.js-lightbox-video-open', function (event) {
			return _this.openLightbox(event);
		});
		_this.$el.on('click', '.js-lightbox-video-close', function () {
			return _this.closeLightbox();
		});
		return _this;
	}

	// Open
	// ==========================================================================


	_class.prototype.openLightbox = function openLightbox(event) {
		var dataVideo = $(event.currentTarget).data('video');
		this.$body.addClass('has-lightbox-video-open');
		$('.js-lightbox-video-content').html(dataVideo);
	};

	// Close
	// ==========================================================================


	_class.prototype.closeLightbox = function closeLightbox() {
		this.$body.removeClass('has-lightbox-video-open');

		setTimeout(function () {
			$('.js-lightbox-video-content').html("");
		}, 600);
	};

	// Destroy
	// ==========================================================================


	_class.prototype.destroy = function destroy() {
		this.$el.off();
	};

	return _class;
}(_AbstractModule3.default);

exports.default = _class;

},{"./AbstractModule":6}],19:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _AbstractModule2 = require('./AbstractModule');

var _AbstractModule3 = _interopRequireDefault(_AbstractModule2);

var _Map = require('./Map');

var _Map2 = _interopRequireDefault(_Map);

var _ractiveEventsTap = require('ractive-events-tap');

var _ractiveEventsTap2 = _interopRequireDefault(_ractiveEventsTap);

var _ractiveTransitionsFade = require('ractive-transitions-fade');

var _ractiveTransitionsFade2 = _interopRequireDefault(_ractiveTransitionsFade);

var _dependencies = require('../global/dependencies');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /* jshint esnext: true */


var _class = function (_AbstractModule) {
	_inherits(_class, _AbstractModule);

	function _class(options) {
		_classCallCheck(this, _class);

		var _this2 = _possibleConstructorReturn(this, _AbstractModule.call(this, options));

		_this2.smoothScrollingDependency = (0, _dependencies.addDependency)('LocationSwitcher', 'SmoothScrolling');

		_this2.$mapContainer = _this2.$el.find('.js-map-container');
		_this2.$switcherContainer = _this2.$el.find('.js-switcher-container');
		_this2.idPrefix = 'location_';
		_this2.icon = _this2.$mapContainer.data('icon');
		_this2.places = _this2.prepareLocations(window.locationsOptions.locations);

		_this2.locationController = _this2.initLocationController();
		window.Ractive.DEBUG = false;
		return _this2;
	}

	/**
  * This controller is used for switching between active locations
  * @return  {Ractive Object}  Ractive instance
  */


	_class.prototype.initLocationController = function initLocationController() {
		var _this = this;
		var ractive = new Ractive({
			el: this.$switcherContainer,
			template: this.unescapeHTML(this.$switcherContainer.html()),
			data: {
				locations: window.locationsOptions.locations,
				activeLocation: {},
				displayActiveLocation: true,
				isActive: function isActive(item) {
					return item.id === this.get('activeLocation').id;
				}
			},
			events: { tap: _ractiveEventsTap2.default },
			transitions: { fade: _ractiveTransitionsFade2.default },
			/**
    * Allows us to set proxy events and run other tasks when controller is initialized
    * @param  {array}  options  Array of options
    */
			oninit: function oninit(options) {
				// Set active location as first of locations set
				this.set('activeLocation', this.get('locations.0'));

				// Init map and set first location as "active"
				_this.map = new _Map2.default({
					$container: _this.$mapContainer,
					mapOptions: {
						places: _this.places
					},
					controllerReadyCallback: function controllerReadyCallback(map) {
						(0, _dependencies.resolveDependency)(_this.smoothScrollingDependency);
						ractive.displayActiveLocation();
					}
				});

				this.on({
					/**
      * When we toggle a location, we set the active event
      * and change the map
      * @param  {object}  event  Ractive event object
      */
					toggleLocation: function toggleLocation(event) {
						this.set('displayActiveLocation', false).then(function () {
							ractive.set('activeLocation', ractive.get(event.keypath)).then(function () {
								ractive.set('displayActiveLocation', true);
								ractive.displayActiveLocation();
							});
						});
					}
				});
			},
			/**
    * Updates the Google Map by showing only the active location
    */
			displayActiveLocation: function displayActiveLocation() {
				var ident = _this.idPrefix + this.get('activeLocation').id;
				var place = _this.map.controller.get_place(ident);

				_this.map.controller.filter(ident);
				_this.map.controller.set_zoom(10);
				_this.map.controller.map().setCenter(place.object().getPosition());
			}
		});

		return ractive;
	};

	/**
  * Convert our Location models to BB Map objects
  * @return {array}
  */


	_class.prototype.prepareLocations = function prepareLocations(locations) {
		var i = 0;
		var len = locations.length;
		var preppedLocations = {};

		for (; i < len; i++) {
			var id = this.idPrefix + locations[i].id;
			preppedLocations[id] = {
				type: 'marker',
				categories: [id],
				icon: {
					src: this.icon,
					height: 40,
					width: 33
				},
				coords: [locations[i].lat, locations[i].lon]
			};
		}

		return preppedLocations;
	};

	// Destroy
	// ==========================================================================


	_class.prototype.destroy = function destroy() {
		this.locationController.teardown();
		this.$el.off('.LocationSwitcher');
	};

	return _class;
}(_AbstractModule3.default);

exports.default = _class;

},{"../global/dependencies":3,"./AbstractModule":6,"./Map":20,"ractive-events-tap":42,"ractive-transitions-fade":43}],20:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/* jshint esnext: true */
var Map = function () {
	function Map(options) {
		var _this = this;

		_classCallCheck(this, Map);

		setTimeout(function () {
			_this.controller = undefined;
			_this.$container = options.$container;

			var mapOptions = typeof options.mapOptions !== 'undefined' ? options.mapOptions : {};
			var controllerReadyCallback = typeof options.controllerReadyCallback !== 'undefined' ? options.controllerReadyCallback : function () {};

			_this.$container.on('controllerReady.Map', function () {
				controllerReadyCallback(_this);
			});

			// If google is undefined
			if (!window.google || !window.google.maps) {
				window._tmp_google_onload = function () {
					_this.displayMap(mapOptions);
				};

				$.getScript('https://maps.googleapis.com/maps/api/js?sensor=true&v=3' + '&language=fr&callback=_tmp_google_onload&key=AIzaSyCRL-lhPXm5SM6cC7Y0jdkjCfApU8Xur3Y', function () {});

				return false;
			} else {
				_this.displayMap(mapOptions);
			}
		}, 1700);
	}

	Map.prototype.displayMap = function displayMap(mapOptions) {
		var _this2 = this;

		if (!this.$container.length) {
			return false;
		}

		var icon = this.$container.data('icon');
		var address = this.$container.data('address');
		var scrollwheel = typeof this.$container.data('scrollwheel') !== 'undefined' ? true : false;
		var places = typeof mapOptions.places !== 'undefined' ? mapOptions.places : {};

		// Default options.
		// Map center changes after the marker is added
		var controllerOptions = {
			map: {
				center: {
					x: 45.3712923,
					y: -73.9820994
				},
				zoom: 3,
				scrollwheel: scrollwheel,
				mapType: 'roadmap',
				coordsType: 'inpage', // array, json? (vs ul li)
				map_mode: 'default'
				//disableDefaultUI: true
			},
			places: places,
			max_fitbounds_zoom: 14
		};

		this.controller = new BB.gmap.controller(this.$container.get(0), controllerOptions);

		this.controller.init();

		this.controller.set_styles([{ "featureType": "all", "elementType": "geometry", "stylers": [{ "lightness": "-5" }] }, { "featureType": "all", "elementType": "geometry.fill", "stylers": [{ "lightness": "-10" }, { "saturation": "-100" }] }, { "featureType": "all", "elementType": "labels", "stylers": [{ "visibility": "off" }, { "lightness": "0" }, { "gamma": "1" }] }, { "featureType": "all", "elementType": "labels.text", "stylers": [{ "visibility": "on" }] }, { "featureType": "all", "elementType": "labels.text.fill", "stylers": [{ "visibility": "on" }, { "lightness": "0" }, { "gamma": "1" }] }, { "featureType": "all", "elementType": "labels.text.stroke", "stylers": [{ "hue": "#d700ff" }, { "visibility": "off" }] }, { "featureType": "all", "elementType": "labels.icon", "stylers": [{ "hue": "#ff0000" }] }, { "featureType": "administrative", "elementType": "labels.text.fill", "stylers": [{ "color": "#444444" }, { "saturation": "0" }, { "lightness": "0" }, { "visibility": "on" }] }, { "featureType": "administrative.country", "elementType": "geometry.stroke", "stylers": [{ "lightness": "50" }] }, { "featureType": "administrative.country", "elementType": "labels.text.fill", "stylers": [{ "lightness": "25" }] }, { "featureType": "administrative.province", "elementType": "geometry.stroke", "stylers": [{ "weight": "1" }, { "lightness": "0" }] }, { "featureType": "administrative.province", "elementType": "labels.text", "stylers": [{ "lightness": "25" }] }, { "featureType": "administrative.locality", "elementType": "labels.text", "stylers": [{ "lightness": "30" }, { "gamma": "1.00" }] }, { "featureType": "administrative.neighborhood", "elementType": "labels.text", "stylers": [{ "lightness": "53" }, { "gamma": "1.00" }] }, { "featureType": "administrative.neighborhood", "elementType": "labels.text.fill", "stylers": [{ "lightness": "-20" }, { "gamma": "1.00" }] }, { "featureType": "administrative.land_parcel", "elementType": "labels.text.fill", "stylers": [{ "lightness": "30" }, { "gamma": "1" }, { "visibility": "on" }] }, { "featureType": "administrative.land_parcel", "elementType": "labels.text.stroke", "stylers": [{ "visibility": "on" }] }, { "featureType": "landscape", "elementType": "all", "stylers": [{ "color": "#f2f2f2" }] }, { "featureType": "landscape", "elementType": "geometry.fill", "stylers": [{ "lightness": "-10" }] }, { "featureType": "landscape", "elementType": "labels.text.fill", "stylers": [{ "lightness": "-40" }] }, { "featureType": "poi", "elementType": "all", "stylers": [{ "visibility": "off" }] }, { "featureType": "road", "elementType": "all", "stylers": [{ "lightness": "18" }, { "saturation": "-100" }] }, { "featureType": "road", "elementType": "geometry.fill", "stylers": [{ "lightness": "-30" }] }, { "featureType": "road", "elementType": "labels.icon", "stylers": [{ "visibility": "off" }, { "lightness": "50" }] }, { "featureType": "road.highway", "elementType": "all", "stylers": [{ "visibility": "simplified" }, { "lightness": "0" }] }, { "featureType": "road.highway", "elementType": "geometry.fill", "stylers": [{ "weight": "1" }, { "saturation": "0" }, { "lightness": "83" }] }, { "featureType": "road.arterial", "elementType": "all", "stylers": [{ "lightness": "0" }] }, { "featureType": "road.arterial", "elementType": "geometry.fill", "stylers": [{ "lightness": "80" }] }, { "featureType": "road.arterial", "elementType": "labels.icon", "stylers": [{ "visibility": "off" }] }, { "featureType": "road.local", "elementType": "all", "stylers": [{ "lightness": "0" }] }, { "featureType": "road.local", "elementType": "geometry.fill", "stylers": [{ "lightness": "80" }, { "gamma": "1" }] }, { "featureType": "road.local", "elementType": "geometry.stroke", "stylers": [{ "saturation": "0" }, { "lightness": "-15" }, { "weight": ".25" }, { "gamma": "1" }] }, { "featureType": "road.local", "elementType": "labels.text", "stylers": [{ "lightness": "0" }, { "gamma": "1.00" }] }, { "featureType": "transit", "elementType": "all", "stylers": [{ "visibility": "off" }] }, { "featureType": "water", "elementType": "all", "stylers": [{ "color": "#ffc1d9" }, { "visibility": "on" }] }, { "featureType": "water", "elementType": "geometry.fill", "stylers": [{ "color": "#ffffff" }, { "saturation": "-100" }, { "lightness": "-5" }, { "gamma": "0.5" }] }, { "featureType": "water", "elementType": "labels.text.fill", "stylers": [{ "visibility": "off" }] }, { "featureType": "water", "elementType": "labels.text.stroke", "stylers": [{ "weight": ".75" }, { "visibility": "off" }] }]);

		if (address !== '') {
			this.controller.add_place_by_address('place', address, {
				type: 'marker',
				icon: {
					src: icon,
					height: 84,
					width: 60
				},
				loaded_callback: function loaded_callback(o) {
					_this2.controller.fit_bounds();
				}
			});
		}

		this.controller.ready(function () {
			_this2.$container.trigger('controllerReady.Map');
		});
	};

	// Destroy
	// ==========================================================================


	Map.prototype.destroy = function destroy() {
		this.$container.off('.Map');
	};

	return Map;
}();

exports.default = Map;

},{}],21:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _AbstractModule2 = require('./AbstractModule');

var _AbstractModule3 = _interopRequireDefault(_AbstractModule2);

var _smoothScrollbar = require('smooth-scrollbar');

var _smoothScrollbar2 = _interopRequireDefault(_smoothScrollbar);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // ==========================================================================
// Generic module
// ==========================================================================


var _class = function (_AbstractModule) {
	_inherits(_class, _AbstractModule);

	function _class(options) {
		_classCallCheck(this, _class);

		var _this = _possibleConstructorReturn(this, _AbstractModule.call(this, options));

		$('.js-nav-toggle').click(function (event) {
			return _this.toggleNav();
		});

		_this.$el.find('.js-nav-search').click(function (event) {});
		_this.$el.on('click', '.js-search-button', function (event) {
			return _this.openSearch(event);
		});

		if (window.matchMedia("(min-width: 1200px)").matches) {
			_this.scrollbar = _smoothScrollbar2.default.init(_this.$el.find('[data-scrollbar]')[0]);
		}
		return _this;
	}

	// Open search
	// ==========================================================================


	_class.prototype.openSearch = function openSearch(event) {
		var _this2 = this;

		event.preventDefault();

		this.$body.toggleClass('has-search-open');

		setTimeout(function () {
			_this2.$el.find('.js-search-input').focus();
		}, 300);
	};

	// Toggle nav
	// ==========================================================================


	_class.prototype.toggleNav = function toggleNav() {
		if (this.$body.hasClass('has-nav-open')) {
			this.$body.removeClass('has-nav-open');
		} else {
			this.$el.find('.js-search-input').val('');
			this.$el.find('.js-search-results').html('');
			this.$body.removeClass('has-search-open').addClass('has-nav-open');
		}
	};

	// Destroy
	// ==========================================================================


	_class.prototype.destroy = function destroy() {
		this.$el.off();
	};

	return _class;
}(_AbstractModule3.default);

exports.default = _class;

},{"./AbstractModule":6,"smooth-scrollbar":44}],22:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _AbstractModule2 = require('./AbstractModule');

var _AbstractModule3 = _interopRequireDefault(_AbstractModule2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /* jshint esnext: true */


var _class = function (_AbstractModule) {
	_inherits(_class, _AbstractModule);

	function _class(options) {
		_classCallCheck(this, _class);

		var _this = _possibleConstructorReturn(this, _AbstractModule.call(this, options));

		_this.$el.on('click', '.js-nav-news-toggle', function (event) {
			return _this.toggleNavNews();
		});
		return _this;
	}

	_class.prototype.toggleNavNews = function toggleNavNews() {
		this.$body.toggleClass('has-nav-news-open');

		if (this.$body.hasClass('has-nav-news-open')) {
			$('.js-news-nav').scrollTop(0);
		}
	};

	_class.prototype.destroy = function destroy() {
		this.$el.off();
	};

	return _class;
}(_AbstractModule3.default);

exports.default = _class;

},{"./AbstractModule":6}],23:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _AbstractModule2 = require('./AbstractModule');

var _AbstractModule3 = _interopRequireDefault(_AbstractModule2);

var _ractiveEventsTap = require('ractive-events-tap');

var _ractiveEventsTap2 = _interopRequireDefault(_ractiveEventsTap);

var _ractiveTransitionsFade = require('ractive-transitions-fade');

var _ractiveTransitionsFade2 = _interopRequireDefault(_ractiveTransitionsFade);

var _smoothScrollbar = require('smooth-scrollbar');

var _smoothScrollbar2 = _interopRequireDefault(_smoothScrollbar);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /* jshint esnext: true */


var _class = function (_AbstractModule) {
	_inherits(_class, _AbstractModule);

	function _class(options) {
		_classCallCheck(this, _class);

		var _this2 = _possibleConstructorReturn(this, _AbstractModule.call(this, options));

		_this2.elements = {
			$newsList: _this2.$el.find('.js-news-list')
		};

		_this2.newsListController = _this2.initNewsListController();

		_this2.$el.on('click.News', '.js-news-toggle', function (event) {
			_this2.toggleNavNews();
		});

		if (window.matchMedia("(min-width: 1200px)").matches) {
			_this2.scrollbar = _smoothScrollbar2.default.init(_this2.$el[0]);
		}
		window.Ractive.DEBUG = false;
		return _this2;
	}

	_class.prototype.toggleNavNews = function toggleNavNews() {
		this.$body.toggleClass('has-nav-news-open');
	};

	/**
  * This controller is used for loading more news
  *
  * @return  {Ractive Object}  Ractive instance
  */


	_class.prototype.initNewsListController = function initNewsListController() {
		var _this = this;
		var ractive = new Ractive({
			el: this.elements.$newsList,
			template: this.unescapeHTML(this.elements.$newsList.html()),
			data: {
				news: window.newsOptions.news,
				page: window.newsOptions.page,
				nextPage: window.newsOptions.nextPage,
				state: window.newsOptions.state
			},
			events: { tap: _ractiveEventsTap2.default },
			transitions: { fade: _ractiveTransitionsFade2.default },

			/**
    * Allows us to set proxy events and run other tasks when controller is initialized
    *
    * @param  {array}  options  Array of options
    */
			oninit: function oninit(options) {
				var _ractive = this;
				this.on({

					/**
      * When load more is clicked, we fetch more news
      * If nextPage is false, the button will disapear
      *
      * @param  {object}  event  Ractive event object
      */
					loadMore: function loadMore(event) {
						var parameters = {
							page: this.get('page')
						};

						this.set('state', 'loading');

						_this.invokeLoadNews(parameters, function (response) {
							// Give an impression of loading, lel
							window.setTimeout(function () {
								_ractive.set({
									'page': response.page,
									'nextPage': response.nextPage
								});
								_ractive.push.apply(_ractive, ['news'].concat(response.news)).then(function () {
									_ractive.set('state', 'inert');
								});
							}, 500);
						});
					}
				});
			}
		});

		return ractive;
	};

	/**
  * Query server for news and send them to the callback function
  * @param  {array}     data      Object formed by a page number
  * @param  {function}  callback  Function to execute after the AJAX request is done
  */


	_class.prototype.invokeLoadNews = function invokeLoadNews(data, callback) {
		// Default response
		var _response = {
			news: [],
			page: data.page,
			nextPage: false
		};
		var jqxhr = $.ajax({
			method: 'GET',
			url: 'news/list',
			data: data
		}).done(function (response) {
			if (response.success === true) {
				_response = response;
			}
		}).fail(function () {
			console.log('error');
		}).always(function () {
			callback(_response);
		});
	};

	_class.prototype.destroy = function destroy() {
		this.newsListController.teardown();
		this.$el.off('.News');
	};

	return _class;
}(_AbstractModule3.default);

exports.default = _class;

},{"./AbstractModule":6,"ractive-events-tap":42,"ractive-transitions-fade":43,"smooth-scrollbar":44}],24:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _barba = require('barba.js');

var _barba2 = _interopRequireDefault(_barba);

var _environment = require('../utils/environment');

var _PageTransitions = require('../global/PageTransitions');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
/* jshint esnext: true */


var _class = function () {
	function _class(options) {
		_classCallCheck(this, _class);

		this.load();
	}

	_class.prototype.load = function load() {

		var self = this;

		//Init Barba JS
		_barba2.default.Pjax.Dom.containerClass = 'js-barba-container';
		_barba2.default.Pjax.Dom.wrapperId = 'js-barba-wrapper';

		_barba2.default.Pjax.start();

		var mainTransition = _barba2.default.BaseTransition.extend(_PageTransitions.transitions.mainTransition);
		var navTransition = _barba2.default.BaseTransition.extend(_PageTransitions.transitions.navTransition);
		var sectionTransition = _barba2.default.BaseTransition.extend(_PageTransitions.transitions.sectionTransition);

		_barba2.default.Pjax.getTransition = function () {
			if (self.route === 'nav') {
				return navTransition;
			} else if (self.route == 'same-section') {
				return sectionTransition;
			} else {
				return mainTransition;
			}
		};

		_barba2.default.Dispatcher.on('linkClicked', function (currentStatus, oldStatus, container) {
			self.route = currentStatus.getAttribute('data-route');
			self.routeOption = currentStatus.getAttribute('data-route-option');

			if (self.routeOption != undefined) {
				_environment.$body.attr('data-route-option', self.routeOption);
			} else {
				_environment.$body.attr('data-route-option', '');
			}
		});

		/**
   * Execute any third party features.
   */
		_barba2.default.Dispatcher.on('newPageReady', function (currentStatus, oldStatus, container) {

			if (window.ga && !_environment.$html.data('debug')) {
				ga('send', {
					hitType: 'pageview',
					page: location.pathname,
					location: currentStatus.url,
					title: document.title
				});
			}

			var js = container.querySelector("script");
			if (js != null) {
				eval(js.innerHTML);
			}
		});
	};

	_class.prototype.destroy = function destroy() {
		this.$el.off();
	};

	return _class;
}();

exports.default = _class;

},{"../global/PageTransitions":2,"../utils/environment":36,"barba.js":41}],25:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _AbstractModule2 = require('./AbstractModule');

var _AbstractModule3 = _interopRequireDefault(_AbstractModule2);

var _smoothScrollbar = require('smooth-scrollbar');

var _smoothScrollbar2 = _interopRequireDefault(_smoothScrollbar);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /* jshint esnext: true */


// import tap from '../ractive/ractive-events-tap';
// import fade from '../ractive/ractive-transitions-fade';

var _class = function (_AbstractModule) {
	_inherits(_class, _AbstractModule);

	function _class(options) {
		_classCallCheck(this, _class);

		var _this2 = _possibleConstructorReturn(this, _AbstractModule.call(this, options));

		_this2.searchResultsController = _this2.initSearchResultsController();

		if (window.matchMedia("(min-width: 1200px)").matches) {
			_this2.scrollbar = _smoothScrollbar2.default.init(_this2.$el.find('[data-scrollbar]')[0]);
		}
		window.Ractive.DEBUG = false;
		return _this2;
	}

	/**
  * This controller is used for loading search results and various visual effects
  *
  * @return  {Ractive Object}  Ractive instance
  */


	_class.prototype.initSearchResultsController = function initSearchResultsController() {
		var _this = this;
		var timeout = 0;
		var minLength = 3;
		var searchDelay = 500;
		var ractive = new Ractive({
			el: this.$el,
			template: this.unescapeHTML(this.$el.html()),
			data: {
				keyword: '',
				news: [],
				projects: [],
				state: 'inert'
			},
			computed: {
				displaySearchResults: function displaySearchResults() {
					return this.get('keyword').length >= minLength;
				},
				encodedKeyword: function encodedKeyword() {
					return this.get('keyword').replace(/\s/g, '&nbsp;');
				},
				hasNews: function hasNews() {
					return this.objectCount('news') !== 0;
				},
				hasProjects: function hasProjects() {
					return this.objectCount('projects') !== 0;
				},
				hasSections: function hasSections() {
					return this.objectCount('sections') !== 0;
				},
				isLoading: function isLoading() {
					return this.get('state') === 'loading';
				},
				totalResults: function totalResults() {
					return this.get('projects').length + this.get('news').length + this.get('sections').length;
				}
			},
			// events: { tap },
			// transitions: { fade },

			/**
    * News model
    * @param  {object}  params  Initial values for the model
    * @return {object}          News model
    *
    * Model properties
    *
    * @param {string}  url
    * @param {string}  title
    * @param {string}  date
    * @param {string}  description
    */
			getNewsModel: function getNewsModel(params) {
				var defaults = {
					url: '',
					title: '',
					date: '',
					description: ''
				};
				return $.extend(defaults, params);
			},

			/**
    * Project model
    * @param  {object}  params  Initial values for the model
    * @return {object}          Project model
    *
    * Model properties
    *
    * @param {string}  url
    * @param {string}  image
    * @param {string}  title
    * @param {array}   tags
    * @param {string}  description
    */
			getProjectModel: function getProjectModel(params) {
				var defaults = {
					url: '',
					image: '',
					title: '',
					tags: [],
					description: ''
				};
				return $.extend(defaults, params);
			},
			getSectionModel: function getSectionModel(params) {
				var defaults = {
					url: '',
					title: '',
					description: ''
				};
				return $.extend(defaults, params);
			},

			/**
    * Count objects according to keypath
    * @param  {string}  keypath
    * @return {int}
    */
			objectCount: function objectCount(keypath) {
				return this.get(keypath).length;
			},

			/**
    * Allows us to set proxy events and run other tasks when controller is initialized
    *
    * @param  {array}  options  Array of options
    */
			oninit: function oninit(options) {
				this.on({
					/**
      * Empty all search results
      *
      * @param  {object}  event  Ractive event object
      */
					emptyResults: function emptyResults(event) {
						ractive.set('projects', []);
						ractive.set('news', []);
						ractive.set('sections', []);
					},

					/**
      * When load more is clicked, we fetch more news
      * If nextPage is false, the button will disapear
      *
      * @param  {object}  event  Ractive event object
      */
					loadSearchResults: function loadSearchResults(event) {
						var parameters = {
							keyword: this.get('keyword')
						};

						this.set('state', 'loading');

						_this.invokeLoadResults(parameters, function (response) {
							ractive.set('projects', response.projects);
							ractive.set('sections', response.sections);
							ractive.set('news', response.news).then(function () {
								ractive.set('state', 'inert');
							});
						});
					},

					/**
      * Gobble up the submit event
      *
      * @param  {object}  event  Ractive event object
      */
					submitForm: function submitForm(event) {
						event.original.preventDefault();
					}
				});
			}
		});

		// Watching for changes on the typed in data
		ractive.observe('keyword', function (newValue) {

			// Timeout clearing!
			if (timeout !== 0) {
				clearTimeout(timeout);
				timeout = 0;
			}

			// If less than minLength characters, clear out the search results
			if (newValue.length < minLength) {
				ractive.fire('emptyResults');
			} else {
				// Dont search if loading
				if (ractive.get('state') === 'inert') {
					timeout = setTimeout(function () {
						ractive.fire('loadSearchResults');
					}, searchDelay);
				}
			}
		});

		return ractive;
	};

	/**
  * Query server for search results and send them to the callback function
  * @param  {array}     data      Object formed by a keyword
  * @param  {function}  callback  Function to execute after the AJAX request is done
  */


	_class.prototype.invokeLoadResults = function invokeLoadResults(data, callback) {
		// Default response
		var _response = {
			news: [],
			projects: []
		};
		var jqxhr = $.ajax({
			method: 'GET',
			url: 'search',
			data: data
		}).done(function (response) {
			if (response.success === true) {
				_response = response;
			}
		}).fail(function () {
			console.log('error');
		}).always(function () {
			callback(_response);
		});
	};

	// Destroy
	// ==========================================================================


	_class.prototype.destroy = function destroy() {
		this.searchResultsController.teardown();
		this.$el.off('.Search');
	};

	return _class;
}(_AbstractModule3.default);

exports.default = _class;

},{"./AbstractModule":6,"smooth-scrollbar":44}],26:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _AbstractModule2 = require('./AbstractModule');

var _AbstractModule3 = _interopRequireDefault(_AbstractModule2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _class = function (_AbstractModule) {
	_inherits(_class, _AbstractModule);

	function _class(options) {
		_classCallCheck(this, _class);

		var _this = _possibleConstructorReturn(this, _AbstractModule.call(this, options));

		_this.$toggles = _this.$el.find('.js-switch-toggle');
		_this.$imageElem = _this.$el.find('.js-image');

		_this.$el.on('mouseenter.SimilarSwitcher', '.js-switch-toggle', function (event) {
			_this.switchProject(event);
		});
		return _this;
	}

	// Hover project
	// ==========================================================================


	_class.prototype.switchProject = function switchProject(event) {
		var src = event.currentTarget.getAttribute('data-image');

		if (src !== null) {
			this.$toggles.removeClass('is-active');
			$(event.currentTarget).addClass('is-active');
			this.$imageElem.css('background-image', 'url(' + src + ')');
		}
	};

	// Destroy
	// ==========================================================================


	_class.prototype.destroy = function destroy() {
		this.$el.off('.SimilarSwitcher');
	};

	return _class;
}(_AbstractModule3.default);

exports.default = _class;

},{"./AbstractModule":6}],27:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _AbstractModule2 = require('./AbstractModule');

var _AbstractModule3 = _interopRequireDefault(_AbstractModule2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // ==========================================================================
// Slider home
// ==========================================================================


var _class = function (_AbstractModule) {
	_inherits(_class, _AbstractModule);

	function _class(options) {
		_classCallCheck(this, _class);

		var _this = _possibleConstructorReturn(this, _AbstractModule.call(this, options));

		_this.currentSlide = 1;
		_this.isAnimating = false;
		_this.animationDuration = 1200;
		_this.autoplaySpeed = 10000;
		_this.interval;
		_this.maxSlide = _this.$el.find($('.js-slider-home-slide')).length;
		_this.$controls = _this.$el.find('.js-slider-home-button');

		_this.$el.on('click', '.js-slider-home-next', function (event) {
			return _this.nextSlide();
		});
		_this.$el.on('click', '.js-slider-home-prev', function (event) {
			return _this.prevSlide();
		});

		_this.startAutoplay();
		return _this;
	}

	// Next slide
	// ==========================================================================


	_class.prototype.nextSlide = function nextSlide() {
		this.preventClick();

		if (this.currentSlide === this.maxSlide) {
			this.currentSlide = 0;
		}

		this.currentSlide++;
		this.$el.find('.js-slider-home-slide.is-prev').removeClass('is-prev').addClass('is-next');
		this.$el.find('.js-slider-home-slide.is-current').removeClass('is-current').addClass('is-prev');
		this.$el.find('.js-slider-home-slide[data-slide="' + this.currentSlide + '"]').removeClass('is-next').addClass('is-current');
	};

	// Prev slide
	// ==========================================================================


	_class.prototype.prevSlide = function prevSlide() {
		this.preventClick();

		if (this.currentSlide === 1) {
			this.currentSlide = this.maxSlide + 1;
		}

		this.currentSlide--;
		this.$el.find('.js-slider-home-slide.is-next').removeClass('is-next').addClass('is-prev');
		this.$el.find('.js-slider-home-slide.is-current').removeClass('is-current').addClass('is-next');
		this.$el.find('.js-slider-home-slide[data-slide="' + this.currentSlide + '"]').removeClass('is-prev').addClass('is-current');
	};

	// Prevent click
	// ==========================================================================


	_class.prototype.preventClick = function preventClick() {
		var _this2 = this;

		this.isAnimating = true;
		this.$controls.prop('disabled', true);
		clearInterval(this.interval);

		setTimeout(function () {
			_this2.isAnimating = false;
			_this2.$controls.prop('disabled', false);
			_this2.startAutoplay();
		}, this.animationDuration);
	};

	// Start autoplay
	// ==========================================================================


	_class.prototype.startAutoplay = function startAutoplay() {
		var _this3 = this;

		this.interval = setInterval(function () {
			if (!_this3.isAnimating) {
				_this3.nextSlide();
			}
		}, this.autoplaySpeed);
	};

	// Destroy
	// ==========================================================================


	_class.prototype.destroy = function destroy() {
		this.$el.off();
	};

	return _class;
}(_AbstractModule3.default);

exports.default = _class;

},{"./AbstractModule":6}],28:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _AbstractModule2 = require('./AbstractModule');

var _AbstractModule3 = _interopRequireDefault(_AbstractModule2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // ==========================================================================
// Slider home
// ==========================================================================


var _class = function (_AbstractModule) {
	_inherits(_class, _AbstractModule);

	function _class(options) {
		_classCallCheck(this, _class);

		var _this = _possibleConstructorReturn(this, _AbstractModule.call(this, options));

		_this.currentSlide = 1;
		_this.isAnimating = false;
		_this.animationDuration = 1200;
		_this.autoplaySpeed = 10000;
		_this.maxSlide = _this.$el.find($('.js-slider-home-slide')).length;
		_this.$controls = _this.$el.find('.js-slider-home-button');

		_this.$el.on('click', '.js-slider-home-next', function (event) {
			return _this.nextSlide();
		});
		_this.$el.on('click', '.js-slider-home-prev', function (event) {
			return _this.prevSlide();
		});
		return _this;
	}

	// Next slide
	// ==========================================================================


	_class.prototype.nextSlide = function nextSlide() {
		this.preventClick();

		if (this.currentSlide === this.maxSlide) {
			this.currentSlide = 0;
		}

		this.currentSlide++;
		this.$el.find('.js-slider-home-slide.is-prev').removeClass('is-prev').addClass('is-next');
		this.$el.find('.js-slider-home-slide.is-current').removeClass('is-current').addClass('is-prev');
		this.$el.find('.js-slider-home-slide[data-slide="' + this.currentSlide + '"]').removeClass('is-next').addClass('is-current');
	};

	// Prev slide
	// ==========================================================================


	_class.prototype.prevSlide = function prevSlide() {
		this.preventClick();

		if (this.currentSlide === 1) {
			this.currentSlide = this.maxSlide + 1;
		}

		this.currentSlide--;
		this.$el.find('.js-slider-home-slide.is-next').removeClass('is-next').addClass('is-prev');
		this.$el.find('.js-slider-home-slide.is-current').removeClass('is-current').addClass('is-next');
		this.$el.find('.js-slider-home-slide[data-slide="' + this.currentSlide + '"]').removeClass('is-prev').addClass('is-current');
	};

	// Prevent click
	// ==========================================================================


	_class.prototype.preventClick = function preventClick() {
		var _this2 = this;

		this.isAnimating = true;
		this.$controls.prop('disabled', true);

		setTimeout(function () {
			_this2.isAnimating = false;
			_this2.$controls.prop('disabled', false);
		}, this.animationDuration);
	};

	// Destroy
	// ==========================================================================


	_class.prototype.destroy = function destroy() {
		this.$el.off();
	};

	return _class;
}(_AbstractModule3.default);

exports.default = _class;

},{"./AbstractModule":6}],29:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _DoubleSlider2 = require('./DoubleSlider');

var _DoubleSlider3 = _interopRequireDefault(_DoubleSlider2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /* jshint esnext: true */


var _class = function (_DoubleSlider) {
	_inherits(_class, _DoubleSlider);

	function _class(options) {
		_classCallCheck(this, _class);

		options.sliders = {
			one: {
				$el: options.$el.find('.js-slider-project-main'),
				options: {
					arrows: false,
					cssEase: 'cubic-bezier(0.4, 0, 0.2, 1)',
					speed: 500
				}
			},
			two: {
				$el: options.$el.find('.js-slider-project-secondary'),
				options: {
					arrows: false,
					cssEase: 'cubic-bezier(0.4, 0, 0.2, 1)',
					draggable: false,
					speed: 500,

					initialSlide: 1,
					swipe: false
				}
			}
		};
		return _possibleConstructorReturn(this, _DoubleSlider.call(this, options));
	}

	return _class;
}(_DoubleSlider3.default);

exports.default = _class;

},{"./DoubleSlider":12}],30:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _AbstractModule2 = require('./AbstractModule');

var _AbstractModule3 = _interopRequireDefault(_AbstractModule2);

var _smoothScrollbar = require('smooth-scrollbar');

var _smoothScrollbar2 = _interopRequireDefault(_smoothScrollbar);

var _environment = require('../utils/environment');

var _throttledResize = require('throttled-resize');

var _throttledResize2 = _interopRequireDefault(_throttledResize);

var _dependencies = require('../global/dependencies');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // ==========================================================================
// Smooth scrolling module
// ==========================================================================


var _class = function (_AbstractModule) {
	_inherits(_class, _AbstractModule);

	function _class(options) {
		_classCallCheck(this, _class);

		var _this = _possibleConstructorReturn(this, _AbstractModule.call(this, options));

		_this.scrollbar;
		_this.isSmooth = false;
		_this.isMobile = true;

		_this.selector = '.js-parallax, .s-wysiwyg ul, .s-wysiwyg blockquote';

		// if (hasDependencies('SmoothScrolling')) {
		// 	this.$document.on('resolveDependencies.SmoothScrolling', () => this.buildSmoothScrolling());
		// } else {

		// SmoothScrolling only on this matchMedia matche
		if (window.matchMedia("(min-width: 1200px)").matches) {
			_this.buildSmoothScrolling();
			_this.isSmooth = true;
			_this.isMobile = false;

			_environment.$document.on('SmoothScrolling.rebuild', function () {
				_this.updateElements();
			});
		}
		// }

		var resize = new _throttledResize2.default();
		resize.on('resize:end', function () {
			return _this.checkResize();
		});
		return _this;
	}

	_class.prototype.buildSmoothScrolling = function buildSmoothScrolling() {
		var _this2 = this;

		setTimeout(function () {
			_this2.scrollbar = _smoothScrollbar2.default.init(_this2.$el[0]);
			_this2.windowHeight = _this2.$window.height();
			_this2.windowMiddle = _this2.windowHeight / 2;
			_this2.scrollbarLimit = _this2.scrollbar.limit.y + _this2.windowHeight;
			_this2.elements = {};
			// Create elements object
			_this2.addElements();
			// First load
			_this2.checkElements(true);
			// On scroll
			_this2.scrollbar.addListener(function () {
				return _this2.checkElements();
			});

			// Scrollto buttons event
			$('.js-scrollto').on('click.SmoothScrolling', function (event) {
				return _this2.scrollTo(event);
			});

			// Setup done.
			_this2.$document.trigger({
				type: 'SmoothScroll.isReady'
			});
		}, 300);
	};

	// Add elements
	// ==========================================================================


	_class.prototype.addElements = function addElements() {
		var _this3 = this;

		$(this.selector).each(function (i, el) {
			var $element = $(el);
			var elementSpeed = $element.data('speed') / 10;
			var elementPosition = $element.data('position');
			var elementTarget = $element.data('target');
			var elementHorizontal = $element.data('horizontal');
			var $target = elementTarget ? $(elementTarget) : $element;
			var elementOffset = $target.offset().top + _this3.scrollbar.scrollTop;

			var elementPersist = $element.data('persist');

			if (!elementTarget && $element.data('transform')) {
				var transform = $element.data('transform');
				elementOffset -= parseFloat(transform.y);
			}

			var elementLimit = elementOffset + $target.outerHeight();
			var elementMiddle = (elementLimit - elementOffset) / 2 + elementOffset;

			_this3.elements[i] = {
				$element: $element,
				offset: elementOffset,
				limit: elementLimit,
				middle: elementMiddle,
				speed: elementSpeed,
				position: elementPosition,
				horizontal: elementHorizontal,
				persist: elementPersist
			};
		});
	};

	/**
  * Update elements, recalculate all position as if the template
  * just loaded.
  */


	_class.prototype.updateElements = function updateElements() {
		this.scrollbar.update();
		// Reset container and scrollbar data.
		this.windowHeight = this.$window.height();
		this.windowMiddle = this.windowHeight / 2;
		this.scrollbarLimit = this.scrollbar.limit.y + this.windowHeight;
		this.addElements();
		this.checkElements(true);
		// this.checkElements(true);
		_environment.$document.trigger('SmoothScroll.update');
	};

	// Check resize
	// ==========================================================================


	_class.prototype.checkResize = function checkResize() {
		if (window.matchMedia("(min-width: 1200px)").matches) {
			if (!this.isSmooth) {
				this.isSmooth = true;
				this.buildSmoothScrolling();
			} else {
				this.updateElements();
			}
		} else {
			if (this.isSmooth) {
				this.isSmooth = false;
				this.destroy();
			}
		}
	};

	// Check elements
	// ==========================================================================


	_class.prototype.checkElements = function checkElements(first) {
		var scrollbarTop = this.scrollbar.scrollTop;
		var scrollbarLimit = this.scrollbarLimit;
		var scrollbarBottom = scrollbarTop + this.windowHeight;
		var scrollbarMiddle = scrollbarTop + this.windowMiddle;

		for (var i in this.elements) {
			var transformDistance = void 0;
			var scrollBottom = scrollbarBottom;
			var $element = this.elements[i].$element;
			var elementOffset = this.elements[i].offset;
			// elementOffset = $element.offset().top;
			var elementLimit = this.elements[i].limit;
			var elementMiddle = this.elements[i].middle;
			var elementSpeed = this.elements[i].speed;
			var elementPosition = this.elements[i].position;
			var elementHorizontal = this.elements[i].horizontal;
			var elementPersist = this.elements[i].persist;

			if (elementPosition === 'top') {
				scrollBottom = scrollbarTop;
			}

			// Define if the element is inview
			var inview = scrollBottom >= elementOffset && scrollbarTop <= elementLimit;

			// Add class if inview, remove if not
			if (inview) {
				$element.addClass('is-inview');

				if (elementPersist != undefined) {
					$element.addClass('is-visible');
				}
			} else {
				$element.removeClass('is-inview');
			}

			if (first && !inview && elementSpeed) {
				// Different calculations if it is the first call and the
				// item is not in the view
				if (elementPosition !== 'top') {
					transformDistance = (elementOffset - this.windowMiddle - elementMiddle) * -elementSpeed;
				}
			}

			// If element is in view
			if (inview && elementSpeed) {
				switch (elementPosition) {
					case 'top':
						transformDistance = (scrollbarTop - elementOffset) * -elementSpeed;
						break;

					case 'bottom':
						transformDistance = (scrollbarLimit - scrollBottom) * elementSpeed;
						break;

					default:
						transformDistance = (scrollbarMiddle - elementMiddle) * -elementSpeed;
						break;
				}
			}

			if (transformDistance) {
				// Transform horizontal OR vertical.
				// Default to vertical.
				elementHorizontal ? this.transform($element, transformDistance + 'px') : this.transform($element, 0, transformDistance + 'px');
			}
		}
	};

	// Transform element horizontal
	// ==========================================================================
	//

	/**
  * [transform description]
  * @param  {[type]} $element Jquery element.
  * @param  {mixed} 	x        Translate value
  * @param  {mixed} 	y        Translate value
  * @param  {mixed} 	z        Translate value
  * @return {void}
  */


	_class.prototype.transform = function transform($element, x, y, z) {
		// Defaults
		x = x || 0;
		y = y || 0;
		z = z || 0;

		// Translate
		$element.css({
			'-webkit-transform': 'translate3d(' + x + ', ' + y + ', ' + z + ')',
			'-ms-transform': 'translate3d(' + x + ', ' + y + ', ' + z + ')',
			'transform': 'translate3d(' + x + ', ' + y + ', ' + z + ')'
		}).data('transform', {
			x: x,
			y: y,
			z: z
		}); // Remember

		$element.find(this.selector).each(function (i, e) {
			var $this = $(e);
			if (!$this.data('transform')) {
				$this.data('transform', {
					x: x,
					y: y,
					z: z
				});
			}
		});
	};

	// Scroll to
	// ==========================================================================


	_class.prototype.scrollTo = function scrollTo(event) {

		if (!$.isNumeric(event)) {
			event.preventDefault();

			var $target = $(event.currentTarget);
			var targetData = void 0;

			if ($target.data('target')) {
				targetData = $target.data('target');
			} else {
				targetData = $target.attr('href');
			}

			var targetOffset = $(targetData).offset().top + this.scrollbar.scrollTop;
		} else {
			var targetOffset = event;
		}

		this.scrollbar.scrollTo(0, targetOffset, 900);
	};

	// Destroy
	// ==========================================================================


	_class.prototype.destroy = function destroy() {
		this.$el.off('.SmoothScrolling');
		this.parallaxElements = undefined;
		this.elements = {};

		if (!this.isMobile) {
			this.scrollbar.destroy();
		}
	};

	return _class;
}(_AbstractModule3.default);

exports.default = _class;

},{"../global/dependencies":3,"../utils/environment":36,"./AbstractModule":6,"smooth-scrollbar":44,"throttled-resize":45}],31:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _visibility = require('../utils/visibility');

var _AbstractModule2 = require('./AbstractModule');

var _AbstractModule3 = _interopRequireDefault(_AbstractModule2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /* jshint esnext: true */


var _class = function (_AbstractModule) {
	_inherits(_class, _AbstractModule);

	function _class(options) {
		_classCallCheck(this, _class);

		var _this = _possibleConstructorReturn(this, _AbstractModule.call(this, options));

		_this.$label = _this.$el.find('.js-label');

		_this.$document.on('Title.changeLabel', function (event, value) {
			_this.changeLabel(value);
			_this.destroy();
		});

		_this.hiddenCallbackIdent = (0, _visibility.visibilityApi)({
			action: 'addCallback',
			state: 'hidden',
			callback: _this.logHidden
		});

		_this.visibleCallbackIdent = (0, _visibility.visibilityApi)({
			action: 'addCallback',
			state: 'visible',
			callback: _this.logVisible
		});
		return _this;
	}

	_class.prototype.logHidden = function logHidden() {
		console.log('Title is hidden');
	};

	_class.prototype.logVisible = function logVisible() {
		console.log('Title is visible');
	};

	_class.prototype.changeLabel = function changeLabel(value) {
		this.$label.text(value);
	};

	_class.prototype.destroy = function destroy() {
		this.$document.off('Title.changeLabel');

		(0, _visibility.visibilityApi)({
			action: 'removeCallback',
			state: 'hidden',
			ident: this.hiddenCallbackIdent
		});

		(0, _visibility.visibilityApi)({
			action: 'removeCallback',
			state: 'visible',
			ident: this.visibleCallbackIdent
		});

		this.$el.off('.Title');
	};

	return _class;
}(_AbstractModule3.default);

exports.default = _class;

},{"../utils/visibility":40,"./AbstractModule":6}],32:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.default = tap;
var DISTANCE_THRESHOLD = 5; // maximum pixels pointer can move before cancel
var TIME_THRESHOLD = 400; // maximum milliseconds between down and up before cancel

function tap(node, callback) {
	return new TapHandler(node, callback);
}

function TapHandler(node, callback) {
	this.node = node;
	this.callback = callback;

	this.preventMousedownEvents = false;

	this.bind(node);
}

TapHandler.prototype = {
	bind: function bind(node) {
		// listen for mouse/pointer events...
		if (window.navigator.pointerEnabled) {
			node.addEventListener('pointerdown', handleMousedown, false);
		} else if (window.navigator.msPointerEnabled) {
			node.addEventListener('MSPointerDown', handleMousedown, false);
		} else {
			node.addEventListener('mousedown', handleMousedown, false);

			// ...and touch events
			node.addEventListener('touchstart', handleTouchstart, false);
		}

		// native buttons, and <input type='button'> elements, should fire a tap event
		// when the space key is pressed
		if (node.tagName === 'BUTTON' || node.type === 'button') {
			node.addEventListener('focus', handleFocus, false);
		}

		node.__tap_handler__ = this;
	},
	fire: function fire(event, x, y) {
		this.callback({
			node: this.node,
			original: event,
			x: x,
			y: y
		});
	},
	mousedown: function mousedown(event) {
		var _this = this;

		if (this.preventMousedownEvents) {
			return;
		}

		if (event.which !== undefined && event.which !== 1) {
			return;
		}

		var x = event.clientX;
		var y = event.clientY;

		// This will be null for mouse events.
		var pointerId = event.pointerId;

		var handleMouseup = function handleMouseup(event) {
			if (event.pointerId != pointerId) {
				return;
			}

			_this.fire(event, x, y);
			cancel();
		};

		var handleMousemove = function handleMousemove(event) {
			if (event.pointerId != pointerId) {
				return;
			}

			if (Math.abs(event.clientX - x) >= DISTANCE_THRESHOLD || Math.abs(event.clientY - y) >= DISTANCE_THRESHOLD) {
				cancel();
			}
		};

		var cancel = function cancel() {
			_this.node.removeEventListener('MSPointerUp', handleMouseup, false);
			document.removeEventListener('MSPointerMove', handleMousemove, false);
			document.removeEventListener('MSPointerCancel', cancel, false);
			_this.node.removeEventListener('pointerup', handleMouseup, false);
			document.removeEventListener('pointermove', handleMousemove, false);
			document.removeEventListener('pointercancel', cancel, false);
			_this.node.removeEventListener('click', handleMouseup, false);
			document.removeEventListener('mousemove', handleMousemove, false);
		};

		if (window.navigator.pointerEnabled) {
			this.node.addEventListener('pointerup', handleMouseup, false);
			document.addEventListener('pointermove', handleMousemove, false);
			document.addEventListener('pointercancel', cancel, false);
		} else if (window.navigator.msPointerEnabled) {
			this.node.addEventListener('MSPointerUp', handleMouseup, false);
			document.addEventListener('MSPointerMove', handleMousemove, false);
			document.addEventListener('MSPointerCancel', cancel, false);
		} else {
			this.node.addEventListener('click', handleMouseup, false);
			document.addEventListener('mousemove', handleMousemove, false);
		}

		setTimeout(cancel, TIME_THRESHOLD);
	},
	touchdown: function touchdown(event) {
		var _this2 = this;

		var touch = event.touches[0];

		var x = touch.clientX;
		var y = touch.clientY;

		var finger = touch.identifier;

		var handleTouchup = function handleTouchup(event) {
			var touch = event.changedTouches[0];

			if (touch.identifier !== finger) {
				cancel();
				return;
			}

			event.preventDefault(); // prevent compatibility mouse event

			// for the benefit of mobile Firefox and old Android browsers, we need this absurd hack.
			_this2.preventMousedownEvents = true;
			clearTimeout(_this2.preventMousedownTimeout);

			_this2.preventMousedownTimeout = setTimeout(function () {
				_this2.preventMousedownEvents = false;
			}, 400);

			_this2.fire(event, x, y);
			cancel();
		};

		var handleTouchmove = function handleTouchmove(event) {
			if (event.touches.length !== 1 || event.touches[0].identifier !== finger) {
				cancel();
			}

			var touch = event.touches[0];
			if (Math.abs(touch.clientX - x) >= DISTANCE_THRESHOLD || Math.abs(touch.clientY - y) >= DISTANCE_THRESHOLD) {
				cancel();
			}
		};

		var cancel = function cancel() {
			_this2.node.removeEventListener('touchend', handleTouchup, false);
			window.removeEventListener('touchmove', handleTouchmove, false);
			window.removeEventListener('touchcancel', cancel, false);
		};

		this.node.addEventListener('touchend', handleTouchup, false);
		window.addEventListener('touchmove', handleTouchmove, false);
		window.addEventListener('touchcancel', cancel, false);

		setTimeout(cancel, TIME_THRESHOLD);
	},
	teardown: function teardown() {
		var node = this.node;

		node.removeEventListener('pointerdown', handleMousedown, false);
		node.removeEventListener('MSPointerDown', handleMousedown, false);
		node.removeEventListener('mousedown', handleMousedown, false);
		node.removeEventListener('touchstart', handleTouchstart, false);
		node.removeEventListener('focus', handleFocus, false);
	}
};

function handleMousedown(event) {
	this.__tap_handler__.mousedown(event);
}

function handleTouchstart(event) {
	this.__tap_handler__.touchdown(event);
}

function handleFocus() {
	this.addEventListener('keydown', handleKeydown, false);
	this.addEventListener('blur', handleBlur, false);
}

function handleBlur() {
	this.removeEventListener('keydown', handleKeydown, false);
	this.removeEventListener('blur', handleBlur, false);
}

function handleKeydown(event) {
	if (event.which === 32) {
		// space key
		this.__tap_handler__.fire();
	}
}

},{}],33:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
var DEFAULTS = {
	delay: 0,
	duration: 300,
	easing: 'linear'
};

function fade(t, params) {
	var targetOpacity;

	params = t.processParams(params, DEFAULTS);

	if (t.isIntro) {
		targetOpacity = t.getStyle('opacity');
		t.setStyle('opacity', 0);
	} else {
		targetOpacity = 0;
	}
	t.animateStyle('opacity', targetOpacity, params).then(t.complete);
}

exports.default = fade;

},{}],34:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

exports.default = function ($element) {
	if ($element instanceof jQuery && $element.length > 0) {
		if (isAnimating === false) {

			if (window.matchMedia('(min-width: ' + _environment.minWidth + 'px)').matches) {
				headerOffset = 70;
			} else {
				headerOffset = 90;
			}

			isAnimating = true;

			$('html, body').animate({
				scrollTop: $element.offset().top - headerOffset
			}, speed, 'swing', function () {
				isAnimating = false;
			});
		}
	}
};

var _environment = require('../utils/environment');

var isAnimating = false;
var headerOffset;
var speed = 300;

},{"../utils/environment":36}],35:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.addToArray = addToArray;
exports.arrayContains = arrayContains;
exports.arrayContentsMatch = arrayContentsMatch;
exports.ensureArray = ensureArray;
exports.lastItem = lastItem;
exports.removeFromArray = removeFromArray;
exports.toArray = toArray;
exports.findByKeyValue = findByKeyValue;

var _is = require('./is');

function addToArray(array, value) {
	var index = array.indexOf(value);

	if (index === -1) {
		array.push(value);
	}
}

function arrayContains(array, value) {
	for (var i = 0, c = array.length; i < c; i++) {
		if (array[i] == value) {
			return true;
		}
	}

	return false;
}

function arrayContentsMatch(a, b) {
	var i;

	if (!(0, _is.isArray)(a) || !(0, _is.isArray)(b)) {
		return false;
	}

	if (a.length !== b.length) {
		return false;
	}

	i = a.length;
	while (i--) {
		if (a[i] !== b[i]) {
			return false;
		}
	}

	return true;
}

function ensureArray(x) {
	if (typeof x === 'string') {
		return [x];
	}

	if (x === undefined) {
		return [];
	}

	return x;
}

function lastItem(array) {
	return array[array.length - 1];
}

function removeFromArray(array, member) {
	if (!array) {
		return;
	}

	var index = array.indexOf(member);

	if (index !== -1) {
		array.splice(index, 1);
	}
}

function toArray(arrayLike) {
	var array = [],
	    i = arrayLike.length;
	while (i--) {
		array[i] = arrayLike[i];
	}

	return array;
}

function findByKeyValue(array, key, value) {
	return array.filter(function (obj) {
		return obj[key] === value;
	});
}

},{"./is":39}],36:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var $document = $(document);
var $window = $(window);
var $html = $(document.documentElement);
var $body = $(document.body);

var minWidth = 1024;

exports.$document = $document;
exports.$window = $window;
exports.$html = $html;
exports.$body = $body;

},{}],37:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

exports.default = function () {
	window.Ractive.DEBUG = false;
	svg4everybody();

	var pagetransitionsManager = new _PageTransitionsManager2.default();
};

var _PageTransitionsManager = require('../modules/PageTransitionsManager');

var _PageTransitionsManager2 = _interopRequireDefault(_PageTransitionsManager);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

},{"../modules/PageTransitionsManager":24}],38:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.escapeHtml = escapeHtml;
exports.unescapeHtml = unescapeHtml;
exports.getNodeData = getNodeData;
/**
 * @see  https://github.com/ractivejs/ractive/blob/dev/src/utils/html.js
 */
function escapeHtml(str) {
    return str.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
}

/**
 * Prepare HTML content that contains mustache characters for use with Ractive
 * @param  {string} str
 * @return {string}
 */
function unescapeHtml(str) {
    return str.replace(/&lt;/g, '<').replace(/&gt;/g, '>').replace(/&amp;/g, '&');
}

/**
 * Get element data attributes
 * @param   {DOMElement}  node
 * @return  {Array}       data
 */
function getNodeData(node) {
    // All attributes
    var attributes = node.attributes;

    // Regex Pattern
    var pattern = /^data\-(.+)$/;

    // Output
    var data = {};

    for (var i in attributes) {
        if (!attributes[i]) {
            continue;
        }

        // Attributes name (ex: data-module)
        var name = attributes[i].name;

        // This happens.
        if (!name) {
            continue;
        }

        var match = name.match(pattern);
        if (!match) {
            continue;
        }

        // If this throws an error, you have some
        // serious problems in your HTML.
        data[match[1]] = node.getAttribute(name);
    }

    return data;
}

},{}],39:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

exports.isArray = isArray;
exports.isArrayLike = isArrayLike;
exports.isEqual = isEqual;
exports.isNumeric = isNumeric;
exports.isObject = isObject;
exports.isFunction = isFunction;
var toString = Object.prototype.toString,
    arrayLikePattern = /^\[object (?:Array|FileList)\]$/;

// thanks, http://perfectionkills.com/instanceof-considered-harmful-or-how-to-write-a-robust-isarray/
function isArray(thing) {
	return toString.call(thing) === '[object Array]';
}

function isArrayLike(obj) {
	return arrayLikePattern.test(toString.call(obj));
}

function isEqual(a, b) {
	if (a === null && b === null) {
		return true;
	}

	if ((typeof a === 'undefined' ? 'undefined' : _typeof(a)) === 'object' || (typeof b === 'undefined' ? 'undefined' : _typeof(b)) === 'object') {
		return false;
	}

	return a === b;
}

// http://stackoverflow.com/questions/18082/validate-numbers-in-javascript-isnumeric
function isNumeric(thing) {
	return !isNaN(parseFloat(thing)) && isFinite(thing);
}

function isObject(thing) {
	return thing && toString.call(thing) === '[object Object]';
}

function isFunction(thing) {
	var getType = {};
	return thing && getType.toString.call(thing) === '[object Function]';
}

},{}],40:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.visibilityApi = undefined;

var _is = require('./is');

var _array = require('./array');

var _environment = require('./environment');

var CALLBACKS = {
	hidden: [],
	visible: []
}; /* jshint esnext: true */


var ACTIONS = ['addCallback', 'removeCallback'];

var STATES = ['visible', 'hidden'];

var PREFIX = 'v-';

var UUID = 0;

// Main event
_environment.$document.on('visibilitychange', function (event) {
	if (document.hidden) {
		onDocumentChange('hidden');
	} else {
		onDocumentChange('visible');
	}
});

/**
 * Add a callback
 * @param {string}   state
 * @param {function} callback
 * @return {string}  ident
 */
function addCallback(state, options) {
	var callback = options.callback || '';

	if (!(0, _is.isFunction)(callback)) {
		console.warn('Callback is not a function');
		return false;
	}

	var ident = PREFIX + UUID++;

	CALLBACKS[state].push({
		ident: ident,
		callback: callback
	});

	return ident;
}

/**
 * Remove a callback
 * @param  {string}   state  Visible or hidden
 * @param  {string}   ident  Unique identifier
 * @return {boolean}         If operation was a success
 */
function removeCallback(state, options) {
	var ident = options.ident || '';

	if (typeof ident === 'undefined' || ident === '') {
		console.warn('Need ident to remove callback');
		return false;
	}

	var index = (0, _array.findByKeyValue)(CALLBACKS[state], 'ident', ident)[0];

	// console.log(ident)
	// console.log(CALLBACKS[state])

	if (typeof index !== 'undefined') {
		(0, _array.removeFromArray)(CALLBACKS[state], index);
		return true;
	} else {
		console.warn('Callback could not be found');
		return false;
	}
}

/**
 * When document state changes, trigger callbacks
 * @param  {string}  state  Visible or hidden
 */
function onDocumentChange(state) {
	var callbackArray = CALLBACKS[state];
	var i = 0;
	var len = callbackArray.length;

	for (; i < len; i++) {
		callbackArray[i].callback();
	}
}

/**
 * Public facing API for adding and removing callbacks
 * @param   {object}           options  Options
 * @return  {boolean|integer}           Unique identifier for the callback or boolean indicating success or failure
 */
function visibilityApi(options) {
	var action = options.action || '';
	var state = options.state || '';
	var ret = void 0;

	// Type and value checking
	if (!(0, _array.arrayContains)(ACTIONS, action)) {
		console.warn('Action does not exist');
		return false;
	}
	if (!(0, _array.arrayContains)(STATES, state)) {
		console.warn('State does not exist');
		return false;
	}

	// @todo Magic call function pls
	if (action === 'addCallback') {
		ret = addCallback(state, options);
	} else if (action === 'removeCallback') {
		ret = removeCallback(state, options);
	}

	return ret;
}

exports.visibilityApi = visibilityApi;

},{"./array":35,"./environment":36,"./is":39}],41:[function(require,module,exports){
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define("Barba", [], factory);
	else if(typeof exports === 'object')
		exports["Barba"] = factory();
	else
		root["Barba"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "http://localhost:8080/dist";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	//Promise polyfill https://github.com/taylorhakes/promise-polyfill
	
	if (typeof Promise !== 'function') {
	 window.Promise = __webpack_require__(1);
	}
	
	var Barba = {
	  version: '1.0.0',
	  BaseTransition: __webpack_require__(4),
	  BaseView: __webpack_require__(6),
	  BaseCache: __webpack_require__(8),
	  Dispatcher: __webpack_require__(7),
	  HistoryManager: __webpack_require__(9),
	  Pjax: __webpack_require__(10),
	  Prefetch: __webpack_require__(13),
	  Utils: __webpack_require__(5)
	};
	
	module.exports = Barba;


/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(setImmediate) {(function (root) {
	
	  // Store setTimeout reference so promise-polyfill will be unaffected by
	  // other code modifying setTimeout (like sinon.useFakeTimers())
	  var setTimeoutFunc = setTimeout;
	
	  function noop() {
	  }
	
	  // Use polyfill for setImmediate for performance gains
	  var asap = (typeof setImmediate === 'function' && setImmediate) ||
	    function (fn) {
	      setTimeoutFunc(fn, 0);
	    };
	
	  var onUnhandledRejection = function onUnhandledRejection(err) {
	    if (typeof console !== 'undefined' && console) {
	      console.warn('Possible Unhandled Promise Rejection:', err); // eslint-disable-line no-console
	    }
	  };
	
	  // Polyfill for Function.prototype.bind
	  function bind(fn, thisArg) {
	    return function () {
	      fn.apply(thisArg, arguments);
	    };
	  }
	
	  function Promise(fn) {
	    if (typeof this !== 'object') throw new TypeError('Promises must be constructed via new');
	    if (typeof fn !== 'function') throw new TypeError('not a function');
	    this._state = 0;
	    this._handled = false;
	    this._value = undefined;
	    this._deferreds = [];
	
	    doResolve(fn, this);
	  }
	
	  function handle(self, deferred) {
	    while (self._state === 3) {
	      self = self._value;
	    }
	    if (self._state === 0) {
	      self._deferreds.push(deferred);
	      return;
	    }
	    self._handled = true;
	    asap(function () {
	      var cb = self._state === 1 ? deferred.onFulfilled : deferred.onRejected;
	      if (cb === null) {
	        (self._state === 1 ? resolve : reject)(deferred.promise, self._value);
	        return;
	      }
	      var ret;
	      try {
	        ret = cb(self._value);
	      } catch (e) {
	        reject(deferred.promise, e);
	        return;
	      }
	      resolve(deferred.promise, ret);
	    });
	  }
	
	  function resolve(self, newValue) {
	    try {
	      // Promise Resolution Procedure: https://github.com/promises-aplus/promises-spec#the-promise-resolution-procedure
	      if (newValue === self) throw new TypeError('A promise cannot be resolved with itself.');
	      if (newValue && (typeof newValue === 'object' || typeof newValue === 'function')) {
	        var then = newValue.then;
	        if (newValue instanceof Promise) {
	          self._state = 3;
	          self._value = newValue;
	          finale(self);
	          return;
	        } else if (typeof then === 'function') {
	          doResolve(bind(then, newValue), self);
	          return;
	        }
	      }
	      self._state = 1;
	      self._value = newValue;
	      finale(self);
	    } catch (e) {
	      reject(self, e);
	    }
	  }
	
	  function reject(self, newValue) {
	    self._state = 2;
	    self._value = newValue;
	    finale(self);
	  }
	
	  function finale(self) {
	    if (self._state === 2 && self._deferreds.length === 0) {
	      asap(function() {
	        if (!self._handled) {
	          onUnhandledRejection(self._value);
	        }
	      });
	    }
	
	    for (var i = 0, len = self._deferreds.length; i < len; i++) {
	      handle(self, self._deferreds[i]);
	    }
	    self._deferreds = null;
	  }
	
	  function Handler(onFulfilled, onRejected, promise) {
	    this.onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : null;
	    this.onRejected = typeof onRejected === 'function' ? onRejected : null;
	    this.promise = promise;
	  }
	
	  /**
	   * Take a potentially misbehaving resolver function and make sure
	   * onFulfilled and onRejected are only called once.
	   *
	   * Makes no guarantees about asynchrony.
	   */
	  function doResolve(fn, self) {
	    var done = false;
	    try {
	      fn(function (value) {
	        if (done) return;
	        done = true;
	        resolve(self, value);
	      }, function (reason) {
	        if (done) return;
	        done = true;
	        reject(self, reason);
	      });
	    } catch (ex) {
	      if (done) return;
	      done = true;
	      reject(self, ex);
	    }
	  }
	
	  Promise.prototype['catch'] = function (onRejected) {
	    return this.then(null, onRejected);
	  };
	
	  Promise.prototype.then = function (onFulfilled, onRejected) {
	    var prom = new (this.constructor)(noop);
	
	    handle(this, new Handler(onFulfilled, onRejected, prom));
	    return prom;
	  };
	
	  Promise.all = function (arr) {
	    var args = Array.prototype.slice.call(arr);
	
	    return new Promise(function (resolve, reject) {
	      if (args.length === 0) return resolve([]);
	      var remaining = args.length;
	
	      function res(i, val) {
	        try {
	          if (val && (typeof val === 'object' || typeof val === 'function')) {
	            var then = val.then;
	            if (typeof then === 'function') {
	              then.call(val, function (val) {
	                res(i, val);
	              }, reject);
	              return;
	            }
	          }
	          args[i] = val;
	          if (--remaining === 0) {
	            resolve(args);
	          }
	        } catch (ex) {
	          reject(ex);
	        }
	      }
	
	      for (var i = 0; i < args.length; i++) {
	        res(i, args[i]);
	      }
	    });
	  };
	
	  Promise.resolve = function (value) {
	    if (value && typeof value === 'object' && value.constructor === Promise) {
	      return value;
	    }
	
	    return new Promise(function (resolve) {
	      resolve(value);
	    });
	  };
	
	  Promise.reject = function (value) {
	    return new Promise(function (resolve, reject) {
	      reject(value);
	    });
	  };
	
	  Promise.race = function (values) {
	    return new Promise(function (resolve, reject) {
	      for (var i = 0, len = values.length; i < len; i++) {
	        values[i].then(resolve, reject);
	      }
	    });
	  };
	
	  /**
	   * Set the immediate function to execute callbacks
	   * @param fn {function} Function to execute
	   * @private
	   */
	  Promise._setImmediateFn = function _setImmediateFn(fn) {
	    asap = fn;
	  };
	
	  Promise._setUnhandledRejectionFn = function _setUnhandledRejectionFn(fn) {
	    onUnhandledRejection = fn;
	  };
	
	  if (typeof module !== 'undefined' && module.exports) {
	    module.exports = Promise;
	  } else if (!root.Promise) {
	    root.Promise = Promise;
	  }
	
	})(this);
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2).setImmediate))

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(setImmediate, clearImmediate) {var nextTick = __webpack_require__(3).nextTick;
	var apply = Function.prototype.apply;
	var slice = Array.prototype.slice;
	var immediateIds = {};
	var nextImmediateId = 0;
	
	// DOM APIs, for completeness
	
	exports.setTimeout = function() {
	  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);
	};
	exports.setInterval = function() {
	  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);
	};
	exports.clearTimeout =
	exports.clearInterval = function(timeout) { timeout.close(); };
	
	function Timeout(id, clearFn) {
	  this._id = id;
	  this._clearFn = clearFn;
	}
	Timeout.prototype.unref = Timeout.prototype.ref = function() {};
	Timeout.prototype.close = function() {
	  this._clearFn.call(window, this._id);
	};
	
	// Does not start the time, just sets up the members needed.
	exports.enroll = function(item, msecs) {
	  clearTimeout(item._idleTimeoutId);
	  item._idleTimeout = msecs;
	};
	
	exports.unenroll = function(item) {
	  clearTimeout(item._idleTimeoutId);
	  item._idleTimeout = -1;
	};
	
	exports._unrefActive = exports.active = function(item) {
	  clearTimeout(item._idleTimeoutId);
	
	  var msecs = item._idleTimeout;
	  if (msecs >= 0) {
	    item._idleTimeoutId = setTimeout(function onTimeout() {
	      if (item._onTimeout)
	        item._onTimeout();
	    }, msecs);
	  }
	};
	
	// That's not how node.js implements it but the exposed api is the same.
	exports.setImmediate = typeof setImmediate === "function" ? setImmediate : function(fn) {
	  var id = nextImmediateId++;
	  var args = arguments.length < 2 ? false : slice.call(arguments, 1);
	
	  immediateIds[id] = true;
	
	  nextTick(function onNextTick() {
	    if (immediateIds[id]) {
	      // fn.call() is faster so we optimize for the common use-case
	      // @see http://jsperf.com/call-apply-segu
	      if (args) {
	        fn.apply(null, args);
	      } else {
	        fn.call(null);
	      }
	      // Prevent ids from leaking
	      exports.clearImmediate(id);
	    }
	  });
	
	  return id;
	};
	
	exports.clearImmediate = typeof clearImmediate === "function" ? clearImmediate : function(id) {
	  delete immediateIds[id];
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2).setImmediate, __webpack_require__(2).clearImmediate))

/***/ },
/* 3 */
/***/ function(module, exports) {

	// shim for using process in browser
	
	var process = module.exports = {};
	
	// cached from whatever global is present so that test runners that stub it
	// don't break things.  But we need to wrap it in a try catch in case it is
	// wrapped in strict mode code which doesn't define any globals.  It's inside a
	// function because try/catches deoptimize in certain engines.
	
	var cachedSetTimeout;
	var cachedClearTimeout;
	
	(function () {
	  try {
	    cachedSetTimeout = setTimeout;
	  } catch (e) {
	    cachedSetTimeout = function () {
	      throw new Error('setTimeout is not defined');
	    }
	  }
	  try {
	    cachedClearTimeout = clearTimeout;
	  } catch (e) {
	    cachedClearTimeout = function () {
	      throw new Error('clearTimeout is not defined');
	    }
	  }
	} ())
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;
	
	function cleanUpNextTick() {
	    if (!draining || !currentQueue) {
	        return;
	    }
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}
	
	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = cachedSetTimeout(cleanUpNextTick);
	    draining = true;
	
	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    cachedClearTimeout(timeout);
	}
	
	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        cachedSetTimeout(drainQueue, 0);
	    }
	};
	
	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};
	
	function noop() {}
	
	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;
	
	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};
	
	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };


/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	var Utils = __webpack_require__(5);
	
	/**
	 * BaseTransition to extend
	 *
	 * @namespace Barba.BaseTransition
	 * @type {Object}
	 */
	var BaseTransition = {
	  /**
	   * @memberOf Barba.BaseTransition
	   * @type {HTMLElement}
	   */
	  oldContainer: undefined,
	
	  /**
	   * @memberOf Barba.BaseTransition
	   * @type {HTMLElement}
	   */
	  newContainer: undefined,
	
	  /**
	   * @memberOf Barba.BaseTransition
	   * @type {Promise}
	   */
	  newContainerLoading: undefined,
	
	  /**
	   * Helper to extend the object
	   *
	   * @memberOf Barba.BaseTransition
	   * @param  {Object} newObject
	   * @return {Object} newInheritObject
	   */
	  extend: function(obj){
	    return Utils.extend(this, obj);
	  },
	
	  /**
	   * This function is called from Pjax module to initialize
	   * the transition.
	   *
	   * @memberOf Barba.BaseTransition
	   * @private
	   * @param  {HTMLElement} oldContainer
	   * @param  {Promise} newContainer
	   * @return {Promise}
	   */
	  init: function(oldContainer, newContainer) {
	    var _this = this;
	
	    this.oldContainer = oldContainer;
	    this._newContainerPromise = newContainer;
	
	    this.deferred = Utils.deferred();
	    this.newContainerReady = Utils.deferred();
	    this.newContainerLoading = this.newContainerReady.promise;
	
	    this.start();
	
	    this._newContainerPromise.then(function(newContainer) {
	      _this.newContainer = newContainer;
	      _this.newContainerReady.resolve();
	    });
	
	    return this.deferred.promise;
	  },
	
	  /**
	   * This function needs to be called as soon the Transition is finished
	   *
	   * @memberOf Barba.BaseTransition
	   */
	  done: function() {
	    this.oldContainer.parentNode.removeChild(this.oldContainer);
	    this.newContainer.style.visibility = 'visible';
	    this.deferred.resolve();
	  },
	
	  /**
	   * Constructor for your Transition
	   *
	   * @memberOf Barba.BaseTransition
	   * @abstract
	   */
	  start: function() {},
	};
	
	module.exports = BaseTransition;


/***/ },
/* 5 */
/***/ function(module, exports) {

	/**
	 * Just an object with some helpful functions
	 *
	 * @type {Object}
	 * @namespace Barba.Utils
	 */
	var Utils = {
	  /**
	   * Return the current url
	   *
	   * @memberOf Barba.Utils
	   * @return {String} currentUrl
	   */
	  getCurrentUrl: function() {
	    return window.location.protocol + '//' +
	           window.location.host +
	           window.location.pathname +
	           window.location.search;
	  },
	
	  /**
	   * Given an url, return it without the hash
	   *
	   * @memberOf Barba.Utils
	   * @private
	   * @param  {String} url
	   * @return {String} newCleanUrl
	   */
	  cleanLink: function(url) {
	    return url.replace(/#.*/, '');
	  },
	
	  /**
	   * Time in millisecond after the xhr request goes in timeout
	   *
	   * @memberOf Barba.Utils
	   * @type {Number}
	   * @default
	   */
	  xhrTimeout: 5000,
	
	  /**
	   * Start an XMLHttpRequest() and return a Promise
	   *
	   * @memberOf Barba.Utils
	   * @param  {String} url
	   * @return {Promise}
	   */
	  xhr: function(url) {
	    var deferred = this.deferred();
	    var req = new XMLHttpRequest();
	
	    req.onreadystatechange = function() {
	      if (req.readyState === 4) {
	        if (req.status === 200) {
	          return deferred.resolve(req.responseText);
	        } else {
	          return deferred.reject(new Error('xhr: HTTP code is not 200'));
	        }
	      }
	    };
	
	    req.ontimeout = function() {
	      return deferred.reject(new Error('xhr: Timeout exceeded'));
	    };
	
	    req.open('GET', url);
	    req.timeout = this.xhrTimeout;
	    req.setRequestHeader('x-barba', 'yes');
	    req.send();
	
	    return deferred.promise;
	  },
	
	  /**
	   * Get obj and props and return a new object with the property merged
	   *
	   * @memberOf Barba.Utils
	   * @param  {object} obj
	   * @param  {object} props
	   * @return {object}
	   */
	  extend: function(obj, props) {
	    var newObj = Object.create(obj);
	
	    for(var prop in props) {
	      if(props.hasOwnProperty(prop)) {
	        newObj[prop] = props[prop];
	      }
	    }
	
	    return newObj;
	  },
	
	  /**
	   * Return a new "Deferred" object
	   * https://developer.mozilla.org/en-US/docs/Mozilla/JavaScript_code_modules/Promise.jsm/Deferred
	   *
	   * @memberOf Barba.Utils
	   * @return {Deferred}
	   */
	  deferred: function() {
	    return new function() {
	      this.resolve = null;
	      this.reject = null;
	
	      this.promise = new Promise(function(resolve, reject) {
	        this.resolve = resolve;
	        this.reject = reject;
	      }.bind(this));
	    };
	  },
	
	  /**
	   * Return the port number normalized, eventually you can pass a string to be normalized.
	   *
	   * @memberOf Barba.Utils
	   * @private
	   * @param  {String} p
	   * @return {Int} port
	   */
	  getPort: function(p) {
	    var port = typeof p !== 'undefined' ? p : window.location.port;
	    var protocol = window.location.protocol;
	
	    if (port != '')
	      return parseInt(port);
	
	    if (protocol === 'http:')
	      return 80;
	
	    if (protocol === 'https:')
	      return 443;
	  }
	};
	
	module.exports = Utils;


/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	var Dispatcher = __webpack_require__(7);
	var Utils = __webpack_require__(5);
	
	/**
	 * BaseView to be extended
	 *
	 * @namespace Barba.BaseView
	 * @type {Object}
	 */
	var BaseView  = {
	  /**
	   * Namespace of the view.
	   * (need to be associated with the data-namespace of the container)
	   *
	   * @memberOf Barba.BaseView
	   * @type {String}
	   */
	  namespace: null,
	
	  /**
	   * Helper to extend the object
	   *
	   * @memberOf Barba.BaseView
	   * @param  {Object} newObject
	   * @return {Object} newInheritObject
	   */
	  extend: function(obj){
	    return Utils.extend(this, obj);
	  },
	
	  /**
	   * Init the view.
	   * P.S. Is suggested to init the view before starting Barba.Pjax.start(),
	   * in this way .onEnter() and .onEnterCompleted() will be fired for the current
	   * container when the page is loaded.
	   *
	   * @memberOf Barba.BaseView
	   */
	  init: function() {
	    var _this = this;
	
	    Dispatcher.on('initStateChange',
	      function(newStatus, oldStatus) {
	        if (oldStatus && oldStatus.namespace === _this.namespace)
	          _this.onLeave();
	      }
	    );
	
	    Dispatcher.on('newPageReady',
	      function(newStatus, oldStatus, container) {
	        _this.container = container;
	
	        if (newStatus.namespace === _this.namespace)
	          _this.onEnter();
	      }
	    );
	
	    Dispatcher.on('transitionCompleted',
	      function(newStatus, oldStatus) {
	        if (newStatus.namespace === _this.namespace)
	          _this.onEnterCompleted();
	
	        if (oldStatus && oldStatus.namespace === _this.namespace)
	          _this.onLeaveCompleted();
	      }
	    );
	  },
	
	 /**
	  * This function will be fired when the container
	  * is ready and attached to the DOM.
	  *
	  * @memberOf Barba.BaseView
	  * @abstract
	  */
	  onEnter: function() {},
	
	  /**
	   * This function will be fired when the transition
	   * to this container has just finished.
	   *
	   * @memberOf Barba.BaseView
	   * @abstract
	   */
	  onEnterCompleted: function() {},
	
	  /**
	   * This function will be fired when the transition
	   * to a new container has just started.
	   *
	   * @memberOf Barba.BaseView
	   * @abstract
	   */
	  onLeave: function() {},
	
	  /**
	   * This function will be fired when the container
	   * has just been removed from the DOM.
	   *
	   * @memberOf Barba.BaseView
	   * @abstract
	   */
	  onLeaveCompleted: function() {}
	}
	
	module.exports = BaseView;


/***/ },
/* 7 */
/***/ function(module, exports) {

	/**
	 * Little Dispatcher inspired by MicroEvent.js
	 *
	 * @namespace Barba.Dispatcher
	 * @type {Object}
	 */
	var Dispatcher = {
	  /**
	   * Object that keeps all the events
	   *
	   * @memberOf Barba.Dispatcher
	   * @readOnly
	   * @type {Object}
	   */
	  events: {},
	
	  /**
	   * Bind a callback to an event
	   *
	   * @memberOf Barba.Dispatcher
	   * @param  {String} eventName
	   * @param  {Function} function
	   */
	  on: function(e, f) {
	    this.events[e] = this.events[e] || [];
	    this.events[e].push(f);
	  },
	
	  /**
	   * Unbind event
	   *
	   * @memberOf Barba.Dispatcher
	   * @param  {String} eventName
	   * @param  {Function} function
	   */
	  off: function(e, f) {
	    if(e in this.events === false)
	      return;
	
	    this.events[e].splice(this.events[e].indexOf(f), 1);
	  },
	
	  /**
	   * Fire the event running all the event associated to it
	   *
	   * @memberOf Barba.Dispatcher
	   * @param  {String} eventName
	   * @param  {...*} args
	   */
	  trigger: function(e) {//e, ...args
	    if (e in this.events === false)
	      return;
	
	    for(var i = 0; i < this.events[e].length; i++){
	      this.events[e][i].apply(this, Array.prototype.slice.call(arguments, 1));
	    }
	  }
	};
	
	module.exports = Dispatcher;


/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	var Utils = __webpack_require__(5);
	
	/**
	 * BaseCache it's a simple static cache
	 *
	 * @namespace Barba.BaseCache
	 * @type {Object}
	 */
	var BaseCache = {
	  /**
	   * The Object that keeps all the key value information
	   *
	   * @memberOf Barba.BaseCache
	   * @type {Object}
	   */
	  data: {},
	
	  /**
	   * Helper to extend this object
	   *
	   * @memberOf Barba.BaseCache
	   * @private
	   * @param  {Object} newObject
	   * @return {Object} newInheritObject
	   */
	  extend: function(obj) {
	    return Utils.extend(this, obj);
	  },
	
	  /**
	   * Set a key and value data, mainly Barba is going to save promises
	   *
	   * @memberOf Barba.BaseCache
	   * @param {String} key
	   * @param {*} value
	   */
	  set: function(key, val) {
	    this.data[key] = val;
	  },
	
	  /**
	   * Retrieve the data using the key
	   *
	   * @memberOf Barba.BaseCache
	   * @param  {String} key
	   * @return {*}
	   */
	  get: function(key) {
	    return this.data[key];
	  },
	
	  /**
	   * Flush the cache
	   *
	   * @memberOf Barba.BaseCache
	   */
	  reset: function() {
	    this.data = {};
	  }
	};
	
	module.exports = BaseCache;


/***/ },
/* 9 */
/***/ function(module, exports) {

	/**
	 * HistoryManager helps to keep track of the navigation
	 *
	 * @namespace Barba.HistoryManager
	 * @type {Object}
	 */
	var HistoryManager = {
	  /**
	   * Keep track of the status in historic order
	   *
	   * @memberOf Barba.HistoryManager
	   * @readOnly
	   * @type {Array}
	   */
	  history: [],
	
	  /**
	   * Add a new set of url and namespace
	   *
	   * @memberOf Barba.HistoryManager
	   * @param {String} url
	   * @param {String} namespace
	   * @private
	   */
	  add: function(url, namespace) {
	    if (!namespace)
	      namespace = undefined;
	
	    this.history.push({
	      url: url,
	      namespace: namespace
	    });
	  },
	
	  /**
	   * Return information about the current status
	   *
	   * @memberOf Barba.HistoryManager
	   * @return {Object}
	   */
	  currentStatus: function() {
	    return this.history[this.history.length - 1];
	  },
	
	  /**
	   * Return information about the previous status
	   *
	   * @memberOf Barba.HistoryManager
	   * @return {Object}
	   */
	  prevStatus: function() {
	    var history = this.history;
	
	    if (history.length < 2)
	      return null;
	
	    return history[history.length - 2];
	  }
	};
	
	module.exports = HistoryManager;


/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	var Utils = __webpack_require__(5);
	var Dispatcher = __webpack_require__(7);
	var HideShowTransition = __webpack_require__(11);
	var BaseCache = __webpack_require__(8);
	
	var HistoryManager = __webpack_require__(9);
	var Dom = __webpack_require__(12);
	
	/**
	 * Pjax is a static object with main function
	 *
	 * @namespace Barba.Pjax
	 * @borrows Dom as Dom
	 * @type {Object}
	 */
	var Pjax = {
	  Dom: Dom,
	  History: HistoryManager,
	  Cache: BaseCache,
	
	  /**
	   * Indicate wether or not use the cache
	   *
	   * @memberOf Barba.Pjax
	   * @type {Boolean}
	   * @default
	   */
	  cacheEnabled: true,
	
	  /**
	   * Indicate if there is an animation in progress
	   *
	   * @memberOf Barba.Pjax
	   * @readOnly
	   * @type {Boolean}
	   */
	  transitionProgress: false,
	
	  /**
	   * Class name used to ignore links
	   *
	   * @memberOf Barba.Pjax
	   * @type {String}
	   * @default
	   */
	  ignoreClassLink: 'no-barba',
	
	  /**
	   * Function to be called to start Pjax
	   *
	   * @memberOf Barba.Pjax
	   */
	  start: function() {
	    this.init();
	  },
	
	  /**
	   * Init the events
	   *
	   * @memberOf Barba.Pjax
	   * @private
	   */
	  init: function() {
	    var container = this.Dom.getContainer();
	    var wrapper = this.Dom.getWrapper();
	
	    wrapper.setAttribute('aria-live', 'polite');
	
	    this.History.add(
	      this.getCurrentUrl(),
	      this.Dom.getNamespace(container)
	    );
	
	    //Fire for the current view.
	    Dispatcher.trigger('initStateChange', this.History.currentStatus());
	    Dispatcher.trigger('newPageReady',
	      this.History.currentStatus(),
	      {},
	      container,
	      this.Dom.currentHTML
	    );
	    Dispatcher.trigger('transitionCompleted', this.History.currentStatus());
	
	    this.bindEvents();
	  },
	
	  /**
	   * Attach the eventlisteners
	   *
	   * @memberOf Barba.Pjax
	   * @private
	   */
	  bindEvents: function() {
	    document.addEventListener('click',
	      this.onLinkClick.bind(this)
	    );
	
	    window.addEventListener('popstate',
	      this.onStateChange.bind(this)
	    );
	  },
	
	  /**
	   * Return the currentURL cleaned
	   *
	   * @memberOf Barba.Pjax
	   * @return {String} currentUrl
	   */
	  getCurrentUrl: function() {
	    return Utils.cleanLink(
	      Utils.getCurrentUrl()
	    );
	  },
	
	  /**
	   * Change the URL with pushstate and trigger the state change
	   *
	   * @memberOf Barba.Pjax
	   * @param {String} newUrl
	   */
	  goTo: function(url) {
	    window.history.pushState(null, null, url);
	    this.onStateChange();
	  },
	
	  /**
	   * Force the browser to go to a certain url
	   *
	   * @memberOf Barba.Pjax
	   * @param {String} url
	   * @private
	   */
	  forceGoTo: function(url) {
	    window.location = url;
	  },
	
	  /**
	   * Load an url, will start an xhr request or load from the cache
	   *
	   * @memberOf Barba.Pjax
	   * @private
	   * @param  {String} url
	   * @return {Promise}
	   */
	  load: function(url) {
	    var deferred = Utils.deferred();
	    var _this = this;
	    var xhr;
	
	    xhr = this.Cache.get(url);
	
	    if (!xhr) {
	      xhr = Utils.xhr(url);
	      this.Cache.set(url, xhr);
	    }
	
	    xhr.then(
	      function(data) {
	        var container = _this.Dom.parseResponse(data);
	
	        _this.Dom.putContainer(container);
	
	        if (!_this.cacheEnabled)
	          _this.Cache.reset();
	
	        deferred.resolve(container);
	      },
	      function() {
	        //Something went wrong (timeout, 404, 505...)
	        _this.forceGoTo(url);
	
	        deferred.reject();
	      }
	    );
	
	    return deferred.promise;
	  },
	
	  /**
	   * Get the .href parameter out of an element
	   * and handle special cases (like xlink:href)
	   *
	   * @private
	   * @memberOf Barba.Pjax
	   * @param  {HTMLElement} el
	   * @return {String} href
	   */
	  getHref: function(el) {
	    if (!el) {
	      return undefined;
	    }
	
	    if (el.getAttribute && typeof el.getAttribute('xlink:href') === 'string') {
	      return el.getAttribute('xlink:href');
	    }
	
	    if (typeof el.href === 'string') {
	      return el.href;
	    }
	
	    return undefined;
	  },
	
	  /**
	   * Callback called from click event
	   *
	   * @memberOf Barba.Pjax
	   * @private
	   * @param {MouseEvent} evt
	   */
	  onLinkClick: function(evt) {
	    var el = evt.target;
	
	    //Go up in the nodelist until we
	    //find something with an href
	    while (el && !this.getHref(el)) {
	      el = el.parentNode;
	    }
	
	    if (this.preventCheck(evt, el)) {
	      evt.stopPropagation();
	      evt.preventDefault();
	
	      Dispatcher.trigger('linkClicked', el, evt);
	
	      var href = this.getHref(el);
	      this.goTo(href);
	    }
	  },
	
	  /**
	   * Determine if the link should be followed
	   *
	   * @memberOf Barba.Pjax
	   * @param  {MouseEvent} evt
	   * @param  {HTMLElement} element
	   * @return {Boolean}
	   */
	  preventCheck: function(evt, element) {
	    if (!window.history.pushState)
	      return false;
	
	    var href = this.getHref(element);
	
	    //User
	    if (!element || !href)
	      return false;
	
	    //Middle click, cmd click, and ctrl click
	    if (evt.which > 1 || evt.metaKey || evt.ctrlKey || evt.shiftKey || evt.altKey)
	      return false;
	
	    //Ignore target with _blank target
	    if (element.target && element.target === '_blank')
	      return false;
	
	    //Check if it's the same domain
	    if (window.location.protocol !== element.protocol || window.location.hostname !== element.hostname)
	      return false;
	
	    //Check if the port is the same
	    if (Utils.getPort() !== Utils.getPort(element.port))
	      return false;
	
	    //Ignore case when a hash is being tacked on the current URL
	    if (href.indexOf('#') > -1)
	      return false;
	
	    //Ignore case where there is download attribute
	    if (element.getAttribute && typeof element.getAttribute('download') === 'string')
	      return false;
	
	    //In case you're trying to load the same page
	    if (Utils.cleanLink(href) == Utils.cleanLink(location.href))
	      return false;
	
	    if (element.classList.contains(this.ignoreClassLink))
	      return false;
	
	    return true;
	  },
	
	  /**
	   * Return a transition object
	   *
	   * @memberOf Barba.Pjax
	   * @return {Barba.Transition} Transition object
	   */
	  getTransition: function() {
	    //User customizable
	    return HideShowTransition;
	  },
	
	  /**
	   * Method called after a 'popstate' or from .goTo()
	   *
	   * @memberOf Barba.Pjax
	   * @private
	   */
	  onStateChange: function() {
	    var newUrl = this.getCurrentUrl();
	
	    if (this.transitionProgress)
	      this.forceGoTo(newUrl);
	
	    if (this.History.currentStatus().url === newUrl)
	      return false;
	
	    this.History.add(newUrl);
	
	    var newContainer = this.load(newUrl);
	    var transition = Object.create(this.getTransition());
	
	    this.transitionProgress = true;
	
	    Dispatcher.trigger('initStateChange',
	      this.History.currentStatus(),
	      this.History.prevStatus()
	    );
	
	    var transitionInstance = transition.init(
	      this.Dom.getContainer(),
	      newContainer
	    );
	
	    newContainer.then(
	      this.onNewContainerLoaded.bind(this)
	    );
	
	    transitionInstance.then(
	      this.onTransitionEnd.bind(this)
	    );
	  },
	
	  /**
	   * Function called as soon the new container is ready
	   *
	   * @memberOf Barba.Pjax
	   * @private
	   * @param {HTMLElement} container
	   */
	  onNewContainerLoaded: function(container) {
	    var currentStatus = this.History.currentStatus();
	    currentStatus.namespace = this.Dom.getNamespace(container);
	
	    Dispatcher.trigger('newPageReady',
	      this.History.currentStatus(),
	      this.History.prevStatus(),
	      container,
	      this.Dom.currentHTML
	    );
	  },
	
	  /**
	   * Function called as soon the transition is finished
	   *
	   * @memberOf Barba.Pjax
	   * @private
	   */
	  onTransitionEnd: function() {
	    this.transitionProgress = false;
	
	    Dispatcher.trigger('transitionCompleted',
	      this.History.currentStatus(),
	      this.History.prevStatus()
	    );
	  }
	};
	
	module.exports = Pjax;


/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	var BaseTransition = __webpack_require__(4);
	
	/**
	 * Basic Transition object, wait for the new Container to be ready,
	 * scroll top, and finish the transition (removing the old container and displaying the new one)
	 *
	 * @private
	 * @namespace Barba.HideShowTransition
	 * @augments Barba.BaseTransition
	 */
	var HideShowTransition = BaseTransition.extend({
	  start: function() {
	    this.newContainerLoading.then(this.finish.bind(this));
	  },
	
	  finish: function() {
	    document.body.scrollTop = 0;
	    this.done();
	  }
	});
	
	module.exports = HideShowTransition;


/***/ },
/* 12 */
/***/ function(module, exports) {

	/**
	 * Object that is going to deal with DOM parsing/manipulation
	 *
	 * @namespace Barba.Pjax.Dom
	 * @type {Object}
	 */
	var Dom = {
	  /**
	   * The name of the data attribute on the container
	   *
	   * @memberOf Barba.Pjax.Dom
	   * @type {String}
	   * @default
	   */
	  dataNamespace: 'namespace',
	
	  /**
	   * Id of the main wrapper
	   *
	   * @memberOf Barba.Pjax.Dom
	   * @type {String}
	   * @default
	   */
	  wrapperId: 'barba-wrapper',
	
	  /**
	   * Class name used to identify the containers
	   *
	   * @memberOf Barba.Pjax.Dom
	   * @type {String}
	   * @default
	   */
	  containerClass: 'barba-container',
	
	  /**
	   * Full HTML String of the current page.
	   * By default is the innerHTML of the initial loaded page.
	   *
	   * Each time a new page is loaded, the value is the response of the xhr call.
	   *
	   * @memberOf Barba.Pjax.Dom
	   * @type {String}
	   */
	  currentHTML: document.documentElement.innerHTML,
	
	  /**
	   * Parse the responseText obtained from the xhr call
	   *
	   * @memberOf Barba.Pjax.Dom
	   * @private
	   * @param  {String} responseText
	   * @return {HTMLElement}
	   */
	  parseResponse: function(responseText) {
	    this.currentHTML = responseText;
	
	    var wrapper = document.createElement('div');
	    wrapper.innerHTML = responseText;
	
	    var titleEl = wrapper.querySelector('title');
	
	    if (titleEl)
	      document.title = titleEl.textContent;
	
	    return this.getContainer(wrapper);
	  },
	
	  /**
	   * Get the main barba wrapper by the ID `wrapperId`
	   *
	   * @memberOf Barba.Pjax.Dom
	   * @return {HTMLElement} element
	   */
	  getWrapper: function() {
	    var wrapper = document.getElementById(this.wrapperId);
	
	    if (!wrapper)
	      throw new Error('Barba.js: wrapper not found!');
	
	    return wrapper;
	  },
	
	  /**
	   * Get the container on the current DOM,
	   * or from an HTMLElement passed via argument
	   *
	   * @memberOf Barba.Pjax.Dom
	   * @private
	   * @param  {HTMLElement} element
	   * @return {HTMLElement}
	   */
	  getContainer: function(element) {
	    if (!element)
	      element = document.body;
	
	    if (!element)
	      throw new Error('Barba.js: DOM not ready!');
	
	    var container = this.parseContainer(element);
	
	    if (container && container.jquery)
	      container = container[0];
	
	    if (!container)
	      throw new Error('Barba.js: no container found');
	
	    return container;
	  },
	
	  /**
	   * Get the namespace of the container
	   *
	   * @memberOf Barba.Pjax.Dom
	   * @private
	   * @param  {HTMLElement} element
	   * @return {String}
	   */
	  getNamespace: function(element) {
	    if (element && element.dataset) {
	      return element.dataset[this.dataNamespace];
	    } else if (element) {
	      return element.getAttribute('data-' + this.dataNamespace);
	    }
	
	    return null;
	  },
	
	  /**
	   * Put the container on the page
	   *
	   * @memberOf Barba.Pjax.Dom
	   * @private
	   * @param  {HTMLElement} element
	   */
	  putContainer: function(element) {
	    element.style.visibility = 'hidden';
	
	    var wrapper = this.getWrapper();
	    wrapper.appendChild(element);
	  },
	
	  /**
	   * Get container selector
	   *
	   * @memberOf Barba.Pjax.Dom
	   * @private
	   * @param  {HTMLElement} element
	   * @return {HTMLElement} element
	   */
	  parseContainer: function(element) {
	    return element.querySelector('.' + this.containerClass);
	  }
	};
	
	module.exports = Dom;


/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

	var Utils = __webpack_require__(5);
	var Pjax = __webpack_require__(10);
	
	/**
	 * Prefetch
	 *
	 * @namespace Barba.Prefetch
	 * @type {Object}
	 */
	var Prefetch = {
	  /**
	   * Class name used to ignore prefetch on links
	   *
	   * @memberOf Barba.Prefetch
	   * @type {String}
	   * @default
	   */
	  ignoreClassLink: 'no-barba-prefetch',
	
	  /**
	   * Init the event listener on mouseover and touchstart
	   * for the prefetch
	   *
	   * @memberOf Barba.Prefetch
	   */
	  init: function() {
	    if (!window.history.pushState) {
	      return false;
	    }
	
	    document.body.addEventListener('mouseover', this.onLinkEnter.bind(this));
	    document.body.addEventListener('touchstart', this.onLinkEnter.bind(this));
	  },
	
	  /**
	   * Callback for the mousehover/touchstart
	   *
	   * @memberOf Barba.Prefetch
	   * @private
	   * @param  {Object} evt
	   */
	  onLinkEnter: function(evt) {
	    var el = evt.target;
	
	    while (el && !Pjax.getHref(el)) {
	      el = el.parentNode;
	    }
	
	    if (!el || el.classList.contains(this.ignoreClassLink)) {
	      return;
	    }
	
	    var url = Pjax.getHref(el);
	
	    //Check if the link is elegible for Pjax
	    if (Pjax.preventCheck(evt, el) && !Pjax.Cache.get(url)) {
	      var xhr = Utils.xhr(url);
	      Pjax.Cache.set(url, xhr);
	    }
	  }
	};
	
	module.exports = Prefetch;


/***/ }
/******/ ])
});
;

},{}],42:[function(require,module,exports){
(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
	typeof define === 'function' && define.amd ? define(factory) :
	(global.Ractive = global.Ractive || {}, global.Ractive.events = global.Ractive.events || {}, global.Ractive.events.tap = factory());
}(this, function () { 'use strict';

	var DISTANCE_THRESHOLD = 5; // maximum pixels pointer can move before cancel
	var TIME_THRESHOLD = 400;   // maximum milliseconds between down and up before cancel

	function tap ( node, callback ) {
		return new TapHandler( node, callback );
	}

	function TapHandler ( node, callback ) {
		this.node = node;
		this.callback = callback;

		this.preventMousedownEvents = false;

		this.bind( node );
	}

	TapHandler.prototype = {
		bind: function bind ( node ) {
			// listen for mouse/pointer events...
			if (window.navigator.pointerEnabled) {
				node.addEventListener( 'pointerdown', handleMousedown, false );
			} else if (window.navigator.msPointerEnabled) {
				node.addEventListener( 'MSPointerDown', handleMousedown, false );
			} else {
				node.addEventListener( 'mousedown', handleMousedown, false );

				// ...and touch events
				node.addEventListener( 'touchstart', handleTouchstart, false );
			}

			// native buttons, and <input type='button'> elements, should fire a tap event
			// when the space key is pressed
			if ( node.tagName === 'BUTTON' || node.type === 'button' ) {
				node.addEventListener( 'focus', handleFocus, false );
			}

			node.__tap_handler__ = this;
		},

		fire: function fire ( event, x, y ) {
			this.callback({
				node: this.node,
				original: event,
				x: x,
				y: y
			});
		},

		mousedown: function mousedown ( event ) {
			var this$1 = this;

			if ( this.preventMousedownEvents ) {
				return;
			}

			if ( event.which !== undefined && event.which !== 1 ) {
				return;
			}

			var x = event.clientX;
			var y = event.clientY;

			// This will be null for mouse events.
			var pointerId = event.pointerId;

			var handleMouseup = function (event) {
				if ( event.pointerId != pointerId ) {
					return;
				}

				this$1.fire( event, x, y );
				cancel();
			};

			var handleMousemove = function (event) {
				if ( event.pointerId != pointerId ) {
					return;
				}

				if ( ( Math.abs( event.clientX - x ) >= DISTANCE_THRESHOLD ) || ( Math.abs( event.clientY - y ) >= DISTANCE_THRESHOLD ) ) {
					cancel();
				}
			};

			var cancel = function () {
				this$1.node.removeEventListener( 'MSPointerUp', handleMouseup, false );
				document.removeEventListener( 'MSPointerMove', handleMousemove, false );
				document.removeEventListener( 'MSPointerCancel', cancel, false );
				this$1.node.removeEventListener( 'pointerup', handleMouseup, false );
				document.removeEventListener( 'pointermove', handleMousemove, false );
				document.removeEventListener( 'pointercancel', cancel, false );
				this$1.node.removeEventListener( 'click', handleMouseup, false );
				document.removeEventListener( 'mousemove', handleMousemove, false );
			};

			if ( window.navigator.pointerEnabled ) {
				this.node.addEventListener( 'pointerup', handleMouseup, false );
				document.addEventListener( 'pointermove', handleMousemove, false );
				document.addEventListener( 'pointercancel', cancel, false );
			} else if ( window.navigator.msPointerEnabled ) {
				this.node.addEventListener( 'MSPointerUp', handleMouseup, false );
				document.addEventListener( 'MSPointerMove', handleMousemove, false );
				document.addEventListener( 'MSPointerCancel', cancel, false );
			} else {
				this.node.addEventListener( 'click', handleMouseup, false );
				document.addEventListener( 'mousemove', handleMousemove, false );
			}

			setTimeout( cancel, TIME_THRESHOLD );
		},

		touchdown: function touchdown ( event ) {
			var this$1 = this;

			var touch = event.touches[0];

			var x = touch.clientX;
			var y = touch.clientY;

			var finger = touch.identifier;

			var handleTouchup = function (event) {
				var touch = event.changedTouches[0];

				if ( touch.identifier !== finger ) {
					cancel();
					return;
				}

				event.preventDefault(); // prevent compatibility mouse event

				// for the benefit of mobile Firefox and old Android browsers, we need this absurd hack.
				this$1.preventMousedownEvents = true;
				clearTimeout( this$1.preventMousedownTimeout );

				this$1.preventMousedownTimeout = setTimeout( function () {
					this$1.preventMousedownEvents = false;
				}, 400 );

				this$1.fire( event, x, y );
				cancel();
			};

			var handleTouchmove = function (event) {
				if ( event.touches.length !== 1 || event.touches[0].identifier !== finger ) {
					cancel();
				}

				var touch = event.touches[0];
				if ( ( Math.abs( touch.clientX - x ) >= DISTANCE_THRESHOLD ) || ( Math.abs( touch.clientY - y ) >= DISTANCE_THRESHOLD ) ) {
					cancel();
				}
			};

			var cancel = function () {
				this$1.node.removeEventListener( 'touchend', handleTouchup, false );
				window.removeEventListener( 'touchmove', handleTouchmove, false );
				window.removeEventListener( 'touchcancel', cancel, false );
			};

			this.node.addEventListener( 'touchend', handleTouchup, false );
			window.addEventListener( 'touchmove', handleTouchmove, false );
			window.addEventListener( 'touchcancel', cancel, false );

			setTimeout( cancel, TIME_THRESHOLD );
		},

		teardown: function teardown () {
			var node = this.node;

			node.removeEventListener( 'pointerdown',   handleMousedown, false );
			node.removeEventListener( 'MSPointerDown', handleMousedown, false );
			node.removeEventListener( 'mousedown',     handleMousedown, false );
			node.removeEventListener( 'touchstart',    handleTouchstart, false );
			node.removeEventListener( 'focus',         handleFocus, false );
		}
	};

	function handleMousedown ( event ) {
		this.__tap_handler__.mousedown( event );
	}

	function handleTouchstart ( event ) {
		this.__tap_handler__.touchdown( event );
	}

	function handleFocus () {
		this.addEventListener( 'keydown', handleKeydown, false );
		this.addEventListener( 'blur', handleBlur, false );
	}

	function handleBlur () {
		this.removeEventListener( 'keydown', handleKeydown, false );
		this.removeEventListener( 'blur', handleBlur, false );
	}

	function handleKeydown ( event ) {
		if ( event.which === 32 ) { // space key
			this.__tap_handler__.fire();
		}
	}

	return tap;

}));
},{}],43:[function(require,module,exports){
(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
	typeof define === 'function' && define.amd ? define(factory) :
	global.Ractive.transitions.fade = factory();
}(this, function () { 'use strict';

	var DEFAULTS = {
		delay: 0,
		duration: 300,
		easing: 'linear'
	};

	function fade(t, params) {
		var targetOpacity;

		params = t.processParams(params, DEFAULTS);

		if (t.isIntro) {
			targetOpacity = t.getStyle('opacity');
			t.setStyle('opacity', 0);
		} else {
			targetOpacity = 0;
		}

		t.animateStyle('opacity', targetOpacity, params).then(t.complete);
	}

	return fade;

}));
},{}],44:[function(require,module,exports){
!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.Scrollbar=e():t.Scrollbar=e()}(this,function(){return function(t){function e(r){if(n[r])return n[r].exports;var o=n[r]={exports:{},id:r,loaded:!1};return t[r].call(o.exports,o,o.exports,e),o.loaded=!0,o.exports}var n={};return e.m=t,e.c=n,e.p="",e(0)}([function(t,e,n){t.exports=n(1)},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}function o(t){if(Array.isArray(t)){for(var e=0,n=Array(t.length);e<t.length;e++)n[e]=t[e];return n}return(0,u.default)(t)}var i=n(2),u=r(i),a=n(55),c=r(a),l=n(62),f=r(l);Object.defineProperty(e,"__esModule",{value:!0});var s="function"==typeof f.default&&"symbol"==typeof c.default?function(t){return typeof t}:function(t){return t&&"function"==typeof f.default&&t.constructor===f.default&&t!==f.default.prototype?"symbol":typeof t},d=n(78),h=n(89);n(129),n(145),n(158),n(173),n(187),e.default=d.SmoothScrollbar,d.SmoothScrollbar.version="7.3.1",d.SmoothScrollbar.init=function(t,e){if(!t||1!==t.nodeType)throw new TypeError("expect element to be DOM Element, but got "+("undefined"==typeof t?"undefined":s(t)));if(h.sbList.has(t))return h.sbList.get(t);t.setAttribute("data-scrollbar","");var n=[].concat(o(t.childNodes)),r=document.createElement("div");r.innerHTML='\n        <article class="scroll-content"></article>\n        <aside class="scrollbar-track scrollbar-track-x">\n            <div class="scrollbar-thumb scrollbar-thumb-x"></div>\n        </aside>\n        <aside class="scrollbar-track scrollbar-track-y">\n            <div class="scrollbar-thumb scrollbar-thumb-y"></div>\n        </aside>\n        <canvas class="overscroll-glow"></canvas>\n    ';var i=r.querySelector(".scroll-content");return[].concat(o(r.childNodes)).forEach(function(e){return t.appendChild(e)}),n.forEach(function(t){return i.appendChild(t)}),new d.SmoothScrollbar(t,e)},d.SmoothScrollbar.initAll=function(t){return[].concat(o(document.querySelectorAll(h.selectors))).map(function(e){return d.SmoothScrollbar.init(e,t)})},d.SmoothScrollbar.has=function(t){return h.sbList.has(t)},d.SmoothScrollbar.get=function(t){return h.sbList.get(t)},d.SmoothScrollbar.getAll=function(){return[].concat(o(h.sbList.values()))},d.SmoothScrollbar.destroy=function(t,e){return d.SmoothScrollbar.has(t)&&d.SmoothScrollbar.get(t).destroy(e)},d.SmoothScrollbar.destroyAll=function(t){h.sbList.forEach(function(e){e.destroy(t)})},t.exports=e.default},function(t,e,n){t.exports={default:n(3),__esModule:!0}},function(t,e,n){n(4),n(48),t.exports=n(12).Array.from},function(t,e,n){"use strict";var r=n(5)(!0);n(8)(String,"String",function(t){this._t=String(t),this._i=0},function(){var t,e=this._t,n=this._i;return n>=e.length?{value:void 0,done:!0}:(t=r(e,n),this._i+=t.length,{value:t,done:!1})})},function(t,e,n){var r=n(6),o=n(7);t.exports=function(t){return function(e,n){var i,u,a=String(o(e)),c=r(n),l=a.length;return c<0||c>=l?t?"":void 0:(i=a.charCodeAt(c),i<55296||i>56319||c+1===l||(u=a.charCodeAt(c+1))<56320||u>57343?t?a.charAt(c):i:t?a.slice(c,c+2):(i-55296<<10)+(u-56320)+65536)}}},function(t,e){var n=Math.ceil,r=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?r:n)(t)}},function(t,e){t.exports=function(t){if(void 0==t)throw TypeError("Can't call method on  "+t);return t}},function(t,e,n){"use strict";var r=n(9),o=n(10),i=n(25),u=n(15),a=n(26),c=n(27),l=n(28),f=n(44),s=n(46),d=n(45)("iterator"),h=!([].keys&&"next"in[].keys()),v="@@iterator",_="keys",p="values",y=function(){return this};t.exports=function(t,e,n,b,g,m,x){l(n,e,b);var S,E,M,O=function(t){if(!h&&t in j)return j[t];switch(t){case _:return function(){return new n(this,t)};case p:return function(){return new n(this,t)}}return function(){return new n(this,t)}},w=e+" Iterator",P=g==p,k=!1,j=t.prototype,T=j[d]||j[v]||g&&j[g],A=T||O(g),R=g?P?O("entries"):A:void 0,L="Array"==e?j.entries||T:T;if(L&&(M=s(L.call(new t)),M!==Object.prototype&&(f(M,w,!0),r||a(M,d)||u(M,d,y))),P&&T&&T.name!==p&&(k=!0,A=function(){return T.call(this)}),r&&!x||!h&&!k&&j[d]||u(j,d,A),c[e]=A,c[w]=y,g)if(S={values:P?A:O(p),keys:m?A:O(_),entries:R},x)for(E in S)E in j||i(j,E,S[E]);else o(o.P+o.F*(h||k),e,S);return S}},function(t,e){t.exports=!0},function(t,e,n){var r=n(11),o=n(12),i=n(13),u=n(15),a="prototype",c=function(t,e,n){var l,f,s,d=t&c.F,h=t&c.G,v=t&c.S,_=t&c.P,p=t&c.B,y=t&c.W,b=h?o:o[e]||(o[e]={}),g=b[a],m=h?r:v?r[e]:(r[e]||{})[a];h&&(n=e);for(l in n)f=!d&&m&&void 0!==m[l],f&&l in b||(s=f?m[l]:n[l],b[l]=h&&"function"!=typeof m[l]?n[l]:p&&f?i(s,r):y&&m[l]==s?function(t){var e=function(e,n,r){if(this instanceof t){switch(arguments.length){case 0:return new t;case 1:return new t(e);case 2:return new t(e,n)}return new t(e,n,r)}return t.apply(this,arguments)};return e[a]=t[a],e}(s):_&&"function"==typeof s?i(Function.call,s):s,_&&((b.virtual||(b.virtual={}))[l]=s,t&c.R&&g&&!g[l]&&u(g,l,s)))};c.F=1,c.G=2,c.S=4,c.P=8,c.B=16,c.W=32,c.U=64,c.R=128,t.exports=c},function(t,e){var n=t.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=n)},function(t,e){var n=t.exports={version:"2.4.0"};"number"==typeof __e&&(__e=n)},function(t,e,n){var r=n(14);t.exports=function(t,e,n){if(r(t),void 0===e)return t;switch(n){case 1:return function(n){return t.call(e,n)};case 2:return function(n,r){return t.call(e,n,r)};case 3:return function(n,r,o){return t.call(e,n,r,o)}}return function(){return t.apply(e,arguments)}}},function(t,e){t.exports=function(t){if("function"!=typeof t)throw TypeError(t+" is not a function!");return t}},function(t,e,n){var r=n(16),o=n(24);t.exports=n(20)?function(t,e,n){return r.f(t,e,o(1,n))}:function(t,e,n){return t[e]=n,t}},function(t,e,n){var r=n(17),o=n(19),i=n(23),u=Object.defineProperty;e.f=n(20)?Object.defineProperty:function(t,e,n){if(r(t),e=i(e,!0),r(n),o)try{return u(t,e,n)}catch(t){}if("get"in n||"set"in n)throw TypeError("Accessors not supported!");return"value"in n&&(t[e]=n.value),t}},function(t,e,n){var r=n(18);t.exports=function(t){if(!r(t))throw TypeError(t+" is not an object!");return t}},function(t,e){t.exports=function(t){return"object"==typeof t?null!==t:"function"==typeof t}},function(t,e,n){t.exports=!n(20)&&!n(21)(function(){return 7!=Object.defineProperty(n(22)("div"),"a",{get:function(){return 7}}).a})},function(t,e,n){t.exports=!n(21)(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a})},function(t,e){t.exports=function(t){try{return!!t()}catch(t){return!0}}},function(t,e,n){var r=n(18),o=n(11).document,i=r(o)&&r(o.createElement);t.exports=function(t){return i?o.createElement(t):{}}},function(t,e,n){var r=n(18);t.exports=function(t,e){if(!r(t))return t;var n,o;if(e&&"function"==typeof(n=t.toString)&&!r(o=n.call(t)))return o;if("function"==typeof(n=t.valueOf)&&!r(o=n.call(t)))return o;if(!e&&"function"==typeof(n=t.toString)&&!r(o=n.call(t)))return o;throw TypeError("Can't convert object to primitive value")}},function(t,e){t.exports=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}}},function(t,e,n){t.exports=n(15)},function(t,e){var n={}.hasOwnProperty;t.exports=function(t,e){return n.call(t,e)}},function(t,e){t.exports={}},function(t,e,n){"use strict";var r=n(29),o=n(24),i=n(44),u={};n(15)(u,n(45)("iterator"),function(){return this}),t.exports=function(t,e,n){t.prototype=r(u,{next:o(1,n)}),i(t,e+" Iterator")}},function(t,e,n){var r=n(17),o=n(30),i=n(42),u=n(39)("IE_PROTO"),a=function(){},c="prototype",l=function(){var t,e=n(22)("iframe"),r=i.length,o="<",u=">";for(e.style.display="none",n(43).appendChild(e),e.src="javascript:",t=e.contentWindow.document,t.open(),t.write(o+"script"+u+"document.F=Object"+o+"/script"+u),t.close(),l=t.F;r--;)delete l[c][i[r]];return l()};t.exports=Object.create||function(t,e){var n;return null!==t?(a[c]=r(t),n=new a,a[c]=null,n[u]=t):n=l(),void 0===e?n:o(n,e)}},function(t,e,n){var r=n(16),o=n(17),i=n(31);t.exports=n(20)?Object.defineProperties:function(t,e){o(t);for(var n,u=i(e),a=u.length,c=0;a>c;)r.f(t,n=u[c++],e[n]);return t}},function(t,e,n){var r=n(32),o=n(42);t.exports=Object.keys||function(t){return r(t,o)}},function(t,e,n){var r=n(26),o=n(33),i=n(36)(!1),u=n(39)("IE_PROTO");t.exports=function(t,e){var n,a=o(t),c=0,l=[];for(n in a)n!=u&&r(a,n)&&l.push(n);for(;e.length>c;)r(a,n=e[c++])&&(~i(l,n)||l.push(n));return l}},function(t,e,n){var r=n(34),o=n(7);t.exports=function(t){return r(o(t))}},function(t,e,n){var r=n(35);t.exports=Object("z").propertyIsEnumerable(0)?Object:function(t){return"String"==r(t)?t.split(""):Object(t)}},function(t,e){var n={}.toString;t.exports=function(t){return n.call(t).slice(8,-1)}},function(t,e,n){var r=n(33),o=n(37),i=n(38);t.exports=function(t){return function(e,n,u){var a,c=r(e),l=o(c.length),f=i(u,l);if(t&&n!=n){for(;l>f;)if(a=c[f++],a!=a)return!0}else for(;l>f;f++)if((t||f in c)&&c[f]===n)return t||f||0;return!t&&-1}}},function(t,e,n){var r=n(6),o=Math.min;t.exports=function(t){return t>0?o(r(t),9007199254740991):0}},function(t,e,n){var r=n(6),o=Math.max,i=Math.min;t.exports=function(t,e){return t=r(t),t<0?o(t+e,0):i(t,e)}},function(t,e,n){var r=n(40)("keys"),o=n(41);t.exports=function(t){return r[t]||(r[t]=o(t))}},function(t,e,n){var r=n(11),o="__core-js_shared__",i=r[o]||(r[o]={});t.exports=function(t){return i[t]||(i[t]={})}},function(t,e){var n=0,r=Math.random();t.exports=function(t){return"Symbol(".concat(void 0===t?"":t,")_",(++n+r).toString(36))}},function(t,e){t.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},function(t,e,n){t.exports=n(11).document&&document.documentElement},function(t,e,n){var r=n(16).f,o=n(26),i=n(45)("toStringTag");t.exports=function(t,e,n){t&&!o(t=n?t:t.prototype,i)&&r(t,i,{configurable:!0,value:e})}},function(t,e,n){var r=n(40)("wks"),o=n(41),i=n(11).Symbol,u="function"==typeof i,a=t.exports=function(t){return r[t]||(r[t]=u&&i[t]||(u?i:o)("Symbol."+t))};a.store=r},function(t,e,n){var r=n(26),o=n(47),i=n(39)("IE_PROTO"),u=Object.prototype;t.exports=Object.getPrototypeOf||function(t){return t=o(t),r(t,i)?t[i]:"function"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?u:null}},function(t,e,n){var r=n(7);t.exports=function(t){return Object(r(t))}},function(t,e,n){"use strict";var r=n(13),o=n(10),i=n(47),u=n(49),a=n(50),c=n(37),l=n(51),f=n(52);o(o.S+o.F*!n(54)(function(t){Array.from(t)}),"Array",{from:function(t){var e,n,o,s,d=i(t),h="function"==typeof this?this:Array,v=arguments.length,_=v>1?arguments[1]:void 0,p=void 0!==_,y=0,b=f(d);if(p&&(_=r(_,v>2?arguments[2]:void 0,2)),void 0==b||h==Array&&a(b))for(e=c(d.length),n=new h(e);e>y;y++)l(n,y,p?_(d[y],y):d[y]);else for(s=b.call(d),n=new h;!(o=s.next()).done;y++)l(n,y,p?u(s,_,[o.value,y],!0):o.value);return n.length=y,n}})},function(t,e,n){var r=n(17);t.exports=function(t,e,n,o){try{return o?e(r(n)[0],n[1]):e(n)}catch(e){var i=t.return;throw void 0!==i&&r(i.call(t)),e}}},function(t,e,n){var r=n(27),o=n(45)("iterator"),i=Array.prototype;t.exports=function(t){return void 0!==t&&(r.Array===t||i[o]===t)}},function(t,e,n){"use strict";var r=n(16),o=n(24);t.exports=function(t,e,n){e in t?r.f(t,e,o(0,n)):t[e]=n}},function(t,e,n){var r=n(53),o=n(45)("iterator"),i=n(27);t.exports=n(12).getIteratorMethod=function(t){if(void 0!=t)return t[o]||t["@@iterator"]||i[r(t)]}},function(t,e,n){var r=n(35),o=n(45)("toStringTag"),i="Arguments"==r(function(){return arguments}()),u=function(t,e){try{return t[e]}catch(t){}};t.exports=function(t){var e,n,a;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(n=u(e=Object(t),o))?n:i?r(e):"Object"==(a=r(e))&&"function"==typeof e.callee?"Arguments":a}},function(t,e,n){var r=n(45)("iterator"),o=!1;try{var i=[7][r]();i.return=function(){o=!0},Array.from(i,function(){throw 2})}catch(t){}t.exports=function(t,e){if(!e&&!o)return!1;var n=!1;try{var i=[7],u=i[r]();u.next=function(){return{done:n=!0}},i[r]=function(){return u},t(i)}catch(t){}return n}},function(t,e,n){t.exports={default:n(56),__esModule:!0}},function(t,e,n){n(4),n(57),t.exports=n(61).f("iterator")},function(t,e,n){n(58);for(var r=n(11),o=n(15),i=n(27),u=n(45)("toStringTag"),a=["NodeList","DOMTokenList","MediaList","StyleSheetList","CSSRuleList"],c=0;c<5;c++){var l=a[c],f=r[l],s=f&&f.prototype;s&&!s[u]&&o(s,u,l),i[l]=i.Array}},function(t,e,n){"use strict";var r=n(59),o=n(60),i=n(27),u=n(33);t.exports=n(8)(Array,"Array",function(t,e){this._t=u(t),this._i=0,this._k=e},function(){var t=this._t,e=this._k,n=this._i++;return!t||n>=t.length?(this._t=void 0,o(1)):"keys"==e?o(0,n):"values"==e?o(0,t[n]):o(0,[n,t[n]])},"values"),i.Arguments=i.Array,r("keys"),r("values"),r("entries")},function(t,e){t.exports=function(){}},function(t,e){t.exports=function(t,e){return{value:e,done:!!t}}},function(t,e,n){e.f=n(45)},function(t,e,n){t.exports={default:n(63),__esModule:!0}},function(t,e,n){n(64),n(75),n(76),n(77),t.exports=n(12).Symbol},function(t,e,n){"use strict";var r=n(11),o=n(26),i=n(20),u=n(10),a=n(25),c=n(65).KEY,l=n(21),f=n(40),s=n(44),d=n(41),h=n(45),v=n(61),_=n(66),p=n(67),y=n(68),b=n(71),g=n(17),m=n(33),x=n(23),S=n(24),E=n(29),M=n(72),O=n(74),w=n(16),P=n(31),k=O.f,j=w.f,T=M.f,A=r.Symbol,R=r.JSON,L=R&&R.stringify,I="prototype",D=h("_hidden"),C=h("toPrimitive"),N={}.propertyIsEnumerable,F=f("symbol-registry"),H=f("symbols"),z=f("op-symbols"),B=Object[I],G="function"==typeof A,W=r.QObject,V=!W||!W[I]||!W[I].findChild,U=i&&l(function(){return 7!=E(j({},"a",{get:function(){return j(this,"a",{value:7}).a}})).a})?function(t,e,n){var r=k(B,e);r&&delete B[e],j(t,e,n),r&&t!==B&&j(B,e,r)}:j,X=function(t){var e=H[t]=E(A[I]);return e._k=t,e},q=G&&"symbol"==typeof A.iterator?function(t){return"symbol"==typeof t}:function(t){return t instanceof A},K=function(t,e,n){return t===B&&K(z,e,n),g(t),e=x(e,!0),g(n),o(H,e)?(n.enumerable?(o(t,D)&&t[D][e]&&(t[D][e]=!1),n=E(n,{enumerable:S(0,!1)})):(o(t,D)||j(t,D,S(1,{})),t[D][e]=!0),U(t,e,n)):j(t,e,n)},J=function(t,e){g(t);for(var n,r=y(e=m(e)),o=0,i=r.length;i>o;)K(t,n=r[o++],e[n]);return t},Y=function(t,e){return void 0===e?E(t):J(E(t),e)},Q=function(t){var e=N.call(this,t=x(t,!0));return!(this===B&&o(H,t)&&!o(z,t))&&(!(e||!o(this,t)||!o(H,t)||o(this,D)&&this[D][t])||e)},Z=function(t,e){if(t=m(t),e=x(e,!0),t!==B||!o(H,e)||o(z,e)){var n=k(t,e);return!n||!o(H,e)||o(t,D)&&t[D][e]||(n.enumerable=!0),n}},$=function(t){for(var e,n=T(m(t)),r=[],i=0;n.length>i;)o(H,e=n[i++])||e==D||e==c||r.push(e);return r},tt=function(t){for(var e,n=t===B,r=T(n?z:m(t)),i=[],u=0;r.length>u;)!o(H,e=r[u++])||n&&!o(B,e)||i.push(H[e]);return i};G||(A=function(){if(this instanceof A)throw TypeError("Symbol is not a constructor!");var t=d(arguments.length>0?arguments[0]:void 0),e=function(n){this===B&&e.call(z,n),o(this,D)&&o(this[D],t)&&(this[D][t]=!1),U(this,t,S(1,n))};return i&&V&&U(B,t,{configurable:!0,set:e}),X(t)},a(A[I],"toString",function(){return this._k}),O.f=Z,w.f=K,n(73).f=M.f=$,n(70).f=Q,n(69).f=tt,i&&!n(9)&&a(B,"propertyIsEnumerable",Q,!0),v.f=function(t){return X(h(t))}),u(u.G+u.W+u.F*!G,{Symbol:A});for(var et="hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),nt=0;et.length>nt;)h(et[nt++]);for(var et=P(h.store),nt=0;et.length>nt;)_(et[nt++]);u(u.S+u.F*!G,"Symbol",{for:function(t){return o(F,t+="")?F[t]:F[t]=A(t)},keyFor:function(t){if(q(t))return p(F,t);throw TypeError(t+" is not a symbol!")},useSetter:function(){V=!0},useSimple:function(){V=!1}}),u(u.S+u.F*!G,"Object",{create:Y,defineProperty:K,defineProperties:J,getOwnPropertyDescriptor:Z,getOwnPropertyNames:$,getOwnPropertySymbols:tt}),R&&u(u.S+u.F*(!G||l(function(){var t=A();return"[null]"!=L([t])||"{}"!=L({a:t})||"{}"!=L(Object(t))})),"JSON",{stringify:function(t){if(void 0!==t&&!q(t)){for(var e,n,r=[t],o=1;arguments.length>o;)r.push(arguments[o++]);return e=r[1],"function"==typeof e&&(n=e),!n&&b(e)||(e=function(t,e){if(n&&(e=n.call(this,t,e)),!q(e))return e}),r[1]=e,L.apply(R,r)}}}),A[I][C]||n(15)(A[I],C,A[I].valueOf),s(A,"Symbol"),s(Math,"Math",!0),s(r.JSON,"JSON",!0)},function(t,e,n){var r=n(41)("meta"),o=n(18),i=n(26),u=n(16).f,a=0,c=Object.isExtensible||function(){return!0},l=!n(21)(function(){return c(Object.preventExtensions({}))}),f=function(t){u(t,r,{value:{i:"O"+ ++a,w:{}}})},s=function(t,e){if(!o(t))return"symbol"==typeof t?t:("string"==typeof t?"S":"P")+t;if(!i(t,r)){if(!c(t))return"F";if(!e)return"E";f(t)}return t[r].i},d=function(t,e){if(!i(t,r)){if(!c(t))return!0;if(!e)return!1;f(t)}return t[r].w},h=function(t){return l&&v.NEED&&c(t)&&!i(t,r)&&f(t),t},v=t.exports={KEY:r,NEED:!1,fastKey:s,getWeak:d,onFreeze:h}},function(t,e,n){var r=n(11),o=n(12),i=n(9),u=n(61),a=n(16).f;t.exports=function(t){var e=o.Symbol||(o.Symbol=i?{}:r.Symbol||{});"_"==t.charAt(0)||t in e||a(e,t,{value:u.f(t)})}},function(t,e,n){var r=n(31),o=n(33);t.exports=function(t,e){for(var n,i=o(t),u=r(i),a=u.length,c=0;a>c;)if(i[n=u[c++]]===e)return n}},function(t,e,n){var r=n(31),o=n(69),i=n(70);t.exports=function(t){var e=r(t),n=o.f;if(n)for(var u,a=n(t),c=i.f,l=0;a.length>l;)c.call(t,u=a[l++])&&e.push(u);return e}},function(t,e){e.f=Object.getOwnPropertySymbols},function(t,e){e.f={}.propertyIsEnumerable},function(t,e,n){var r=n(35);t.exports=Array.isArray||function(t){return"Array"==r(t)}},function(t,e,n){var r=n(33),o=n(73).f,i={}.toString,u="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[],a=function(t){try{return o(t)}catch(t){return u.slice()}};t.exports.f=function(t){return u&&"[object Window]"==i.call(t)?a(t):o(r(t))}},function(t,e,n){var r=n(32),o=n(42).concat("length","prototype");e.f=Object.getOwnPropertyNames||function(t){return r(t,o)}},function(t,e,n){var r=n(70),o=n(24),i=n(33),u=n(23),a=n(26),c=n(19),l=Object.getOwnPropertyDescriptor;e.f=n(20)?l:function(t,e){if(t=i(t),e=u(e,!0),c)try{return l(t,e)}catch(t){}if(a(t,e))return o(!r.f.call(t,e),t[e])}},function(t,e){},function(t,e,n){n(66)("asyncIterator")},function(t,e,n){n(66)("observable")},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}function o(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}var i=n(79),u=r(i),a=n(82),c=r(a),l=n(86),f=r(l);Object.defineProperty(e,"__esModule",{value:!0}),e.SmoothScrollbar=void 0;var s=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),(0,f.default)(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),d=n(89),h=n(112);e.SmoothScrollbar=function(){function t(e){var n=this,r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};o(this,t),e.setAttribute("tabindex","1"),e.scrollTop=e.scrollLeft=0;var i=(0,h.findChild)(e,"scroll-content"),a=(0,h.findChild)(e,"overscroll-glow"),l=(0,h.findChild)(e,"scrollbar-track-x"),f=(0,h.findChild)(e,"scrollbar-track-y");if((0,h.setStyle)(e,{overflow:"hidden",outline:"none"}),(0,h.setStyle)(a,{display:"none","pointer-events":"none"}),this.__readonly("targets",(0,c.default)({container:e,content:i,canvas:{elem:a,context:a.getContext("2d")},xAxis:(0,c.default)({track:l,thumb:(0,h.findChild)(l,"scrollbar-thumb-x")}),yAxis:(0,c.default)({track:f,thumb:(0,h.findChild)(f,"scrollbar-thumb-y")})})).__readonly("offset",{x:0,y:0}).__readonly("thumbOffset",{x:0,y:0}).__readonly("limit",{x:1/0,y:1/0}).__readonly("movement",{x:0,y:0}).__readonly("movementLocked",{x:!1,y:!1}).__readonly("overscrollRendered",{x:0,y:0}).__readonly("overscrollBack",!1).__readonly("thumbSize",{x:0,y:0,realX:0,realY:0}).__readonly("bounding",{top:0,right:0,bottom:0,left:0}).__readonly("children",[]).__readonly("parents",[]).__readonly("size",this.getSize()).__readonly("isNestedScrollbar",!1),(0,u.default)(this,{__hideTrackThrottle:{value:(0,h.debounce)(this.hideTrack.bind(this),1e3,!1)},__updateThrottle:{value:(0,h.debounce)(this.update.bind(this))},__touchRecord:{value:new h.TouchRecord},__listeners:{value:[]},__handlers:{value:[]},__children:{value:[]},__timerID:{value:{}}}),this.__initOptions(r),this.__initScrollbar(),d.sbList.set(e,this),"function"==typeof d.GLOBAL_ENV.MutationObserver){var s=new d.GLOBAL_ENV.MutationObserver(function(){n.update(!0)});s.observe(i,{childList:!0}),Object.defineProperty(this,"__observer",{value:s})}}return s(t,[{key:"MAX_OVERSCROLL",get:function(){var t=this.options,e=this.size;switch(t.overscrollEffect){case"bounce":var n=Math.floor(Math.sqrt(Math.pow(e.container.width,2)+Math.pow(e.container.height,2))),r=this.__isMovementLocked()?2:10;return d.GLOBAL_ENV.TOUCH_SUPPORTED?(0,h.pickInRange)(n/r,100,1e3):(0,h.pickInRange)(n/10,25,50);case"glow":return 150;default:return 0}}},{key:"scrollTop",get:function(){return this.offset.y}},{key:"scrollLeft",get:function(){return this.offset.x}}]),t}()},function(t,e,n){t.exports={default:n(80),__esModule:!0}},function(t,e,n){n(81);var r=n(12).Object;t.exports=function(t,e){return r.defineProperties(t,e)}},function(t,e,n){var r=n(10);r(r.S+r.F*!n(20),"Object",{defineProperties:n(30)})},function(t,e,n){t.exports={default:n(83),__esModule:!0}},function(t,e,n){n(84),t.exports=n(12).Object.freeze},function(t,e,n){var r=n(18),o=n(65).onFreeze;n(85)("freeze",function(t){return function(e){return t&&r(e)?t(o(e)):e}})},function(t,e,n){var r=n(10),o=n(12),i=n(21);t.exports=function(t,e){var n=(o.Object||{})[t]||Object[t],u={};u[t]=e(n),r(r.S+r.F*i(function(){n(1)}),"Object",u)}},function(t,e,n){t.exports={default:n(87),__esModule:!0}},function(t,e,n){n(88);var r=n(12).Object;t.exports=function(t,e,n){return r.defineProperty(t,e,n)}},function(t,e,n){var r=n(10);r(r.S+r.F*!n(20),"Object",{defineProperty:n(16).f})},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}var o=n(86),i=r(o),u=n(90),a=r(u);Object.defineProperty(e,"__esModule",{value:!0});var c=n(93);(0,a.default)(c).forEach(function(t){"default"!==t&&"__esModule"!==t&&(0,i.default)(e,t,{enumerable:!0,get:function(){return c[t]}})})},function(t,e,n){t.exports={default:n(91),__esModule:!0}},function(t,e,n){n(92),t.exports=n(12).Object.keys},function(t,e,n){var r=n(47),o=n(31);n(85)("keys",function(){return function(t){return o(r(t))}})},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}var o=n(86),i=r(o),u=n(90),a=r(u);Object.defineProperty(e,"__esModule",{value:!0});var c=n(94);(0,a.default)(c).forEach(function(t){"default"!==t&&"__esModule"!==t&&(0,i.default)(e,t,{enumerable:!0,get:function(){return c[t]}})});var l=n(95);(0,a.default)(l).forEach(function(t){"default"!==t&&"__esModule"!==t&&(0,i.default)(e,t,{enumerable:!0,get:function(){return l[t]}})});var f=n(111);(0,a.default)(f).forEach(function(t){"default"!==t&&"__esModule"!==t&&(0,i.default)(e,t,{enumerable:!0,get:function(){return f[t]}})})},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}var o=n(86),i=r(o),u=n(90),a=r(u);Object.defineProperty(e,"__esModule",{value:!0});var c=function(t){var e={},n={};return(0,a.default)(t).forEach(function(r){(0,i.default)(e,r,{get:function(){if(!n.hasOwnProperty(r)){var e=t[r];n[r]=e()}return n[r]}})}),e},l={MutationObserver:function(){return window.MutationObserver||window.WebKitMutationObserver||window.MozMutationObserver},TOUCH_SUPPORTED:function(){return"ontouchstart"in document},EASING_MULTIPLIER:function(){return navigator.userAgent.match(/Android/)?.5:.25},WHEEL_EVENT:function(){return"onwheel"in window?"wheel":"mousewheel"}};e.GLOBAL_ENV=c(l)},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}var o=n(96),i=r(o);Object.defineProperty(e,"__esModule",{value:!0});var u=new i.default,a=u.set.bind(u),c=u.delete.bind(u);u.update=function(){u.forEach(function(t){t.__updateTree()})},u.delete=function(){var t=c.apply(void 0,arguments);return u.update(),t},u.set=function(){var t=a.apply(void 0,arguments);return u.update(),t},e.sbList=u},function(t,e,n){t.exports={default:n(97),__esModule:!0}},function(t,e,n){n(75),n(4),n(57),n(98),n(108),t.exports=n(12).Map},function(t,e,n){"use strict";var r=n(99);t.exports=n(104)("Map",function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},{get:function(t){var e=r.getEntry(this,t);return e&&e.v},set:function(t,e){return r.def(this,0===t?0:t,e)}},r,!0)},function(t,e,n){"use strict";var r=n(16).f,o=n(29),i=n(100),u=n(13),a=n(101),c=n(7),l=n(102),f=n(8),s=n(60),d=n(103),h=n(20),v=n(65).fastKey,_=h?"_s":"size",p=function(t,e){var n,r=v(e);if("F"!==r)return t._i[r];for(n=t._f;n;n=n.n)if(n.k==e)return n};t.exports={getConstructor:function(t,e,n,f){var s=t(function(t,r){a(t,s,e,"_i"),t._i=o(null),t._f=void 0,t._l=void 0,t[_]=0,void 0!=r&&l(r,n,t[f],t)});return i(s.prototype,{clear:function(){for(var t=this,e=t._i,n=t._f;n;n=n.n)n.r=!0,n.p&&(n.p=n.p.n=void 0),delete e[n.i];t._f=t._l=void 0,t[_]=0},delete:function(t){var e=this,n=p(e,t);if(n){var r=n.n,o=n.p;delete e._i[n.i],n.r=!0,o&&(o.n=r),r&&(r.p=o),e._f==n&&(e._f=r),e._l==n&&(e._l=o),e[_]--}return!!n},forEach:function(t){a(this,s,"forEach");for(var e,n=u(t,arguments.length>1?arguments[1]:void 0,3);e=e?e.n:this._f;)for(n(e.v,e.k,this);e&&e.r;)e=e.p},has:function(t){return!!p(this,t)}}),h&&r(s.prototype,"size",{get:function(){return c(this[_])}}),s},def:function(t,e,n){var r,o,i=p(t,e);return i?i.v=n:(t._l=i={i:o=v(e,!0),k:e,v:n,p:r=t._l,n:void 0,r:!1},t._f||(t._f=i),r&&(r.n=i),t[_]++,"F"!==o&&(t._i[o]=i)),t},getEntry:p,setStrong:function(t,e,n){f(t,e,function(t,e){this._t=t,this._k=e,this._l=void 0},function(){for(var t=this,e=t._k,n=t._l;n&&n.r;)n=n.p;return t._t&&(t._l=n=n?n.n:t._t._f)?"keys"==e?s(0,n.k):"values"==e?s(0,n.v):s(0,[n.k,n.v]):(t._t=void 0,s(1))},n?"entries":"values",!n,!0),d(e)}}},function(t,e,n){var r=n(15);t.exports=function(t,e,n){for(var o in e)n&&t[o]?t[o]=e[o]:r(t,o,e[o]);return t}},function(t,e){t.exports=function(t,e,n,r){if(!(t instanceof e)||void 0!==r&&r in t)throw TypeError(n+": incorrect invocation!");return t}},function(t,e,n){var r=n(13),o=n(49),i=n(50),u=n(17),a=n(37),c=n(52),l={},f={},e=t.exports=function(t,e,n,s,d){var h,v,_,p,y=d?function(){return t}:c(t),b=r(n,s,e?2:1),g=0;if("function"!=typeof y)throw TypeError(t+" is not iterable!");if(i(y)){for(h=a(t.length);h>g;g++)if(p=e?b(u(v=t[g])[0],v[1]):b(t[g]),p===l||p===f)return p}else for(_=y.call(t);!(v=_.next()).done;)if(p=o(_,b,v.value,e),p===l||p===f)return p};e.BREAK=l,e.RETURN=f},function(t,e,n){"use strict";var r=n(11),o=n(12),i=n(16),u=n(20),a=n(45)("species");t.exports=function(t){var e="function"==typeof o[t]?o[t]:r[t];u&&e&&!e[a]&&i.f(e,a,{configurable:!0,get:function(){return this}})}},function(t,e,n){"use strict";var r=n(11),o=n(10),i=n(65),u=n(21),a=n(15),c=n(100),l=n(102),f=n(101),s=n(18),d=n(44),h=n(16).f,v=n(105)(0),_=n(20);t.exports=function(t,e,n,p,y,b){var g=r[t],m=g,x=y?"set":"add",S=m&&m.prototype,E={};return _&&"function"==typeof m&&(b||S.forEach&&!u(function(){(new m).entries().next()}))?(m=e(function(e,n){f(e,m,t,"_c"),e._c=new g,void 0!=n&&l(n,y,e[x],e)}),v("add,clear,delete,forEach,get,has,set,keys,values,entries,toJSON".split(","),function(t){var e="add"==t||"set"==t;t in S&&(!b||"clear"!=t)&&a(m.prototype,t,function(n,r){if(f(this,m,t),!e&&b&&!s(n))return"get"==t&&void 0;var o=this._c[t](0===n?0:n,r);return e?this:o})}),"size"in S&&h(m.prototype,"size",{get:function(){return this._c.size}})):(m=p.getConstructor(e,t,y,x),c(m.prototype,n),i.NEED=!0),d(m,t),E[t]=m,o(o.G+o.W+o.F,E),b||p.setStrong(m,t,y),m}},function(t,e,n){var r=n(13),o=n(34),i=n(47),u=n(37),a=n(106);t.exports=function(t,e){var n=1==t,c=2==t,l=3==t,f=4==t,s=6==t,d=5==t||s,h=e||a;return function(e,a,v){for(var _,p,y=i(e),b=o(y),g=r(a,v,3),m=u(b.length),x=0,S=n?h(e,m):c?h(e,0):void 0;m>x;x++)if((d||x in b)&&(_=b[x],p=g(_,x,y),t))if(n)S[x]=p;else if(p)switch(t){case 3:return!0;case 5:return _;case 6:return x;case 2:S.push(_)}else if(f)return!1;return s?-1:l||f?f:S}}},function(t,e,n){var r=n(107);t.exports=function(t,e){return new(r(t))(e)}},function(t,e,n){var r=n(18),o=n(71),i=n(45)("species");t.exports=function(t){var e;return o(t)&&(e=t.constructor,"function"!=typeof e||e!==Array&&!o(e.prototype)||(e=void 0),r(e)&&(e=e[i],null===e&&(e=void 0))),void 0===e?Array:e}},function(t,e,n){var r=n(10);r(r.P+r.R,"Map",{toJSON:n(109)("Map")})},function(t,e,n){var r=n(53),o=n(110);t.exports=function(t){return function(){if(r(this)!=t)throw TypeError(t+"#toJSON isn't generic");return o(this)}}},function(t,e,n){var r=n(102);t.exports=function(t,e){var n=[];return r(t,!1,n.push,n,e),n}},function(t,e){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.selectors="scrollbar, [scrollbar], [data-scrollbar]"},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}var o=n(86),i=r(o),u=n(90),a=r(u);Object.defineProperty(e,"__esModule",{value:!0});var c=n(113);(0,a.default)(c).forEach(function(t){"default"!==t&&"__esModule"!==t&&(0,i.default)(e,t,{enumerable:!0,get:function(){return c[t]}})})},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}var o=n(86),i=r(o),u=n(90),a=r(u);Object.defineProperty(e,"__esModule",{value:!0});var c=n(114);(0,a.default)(c).forEach(function(t){"default"!==t&&"__esModule"!==t&&(0,i.default)(e,t,{enumerable:!0,get:function(){return c[t]}})});var l=n(115);(0,a.default)(l).forEach(function(t){"default"!==t&&"__esModule"!==t&&(0,i.default)(e,t,{enumerable:!0,get:function(){return l[t]}})});var f=n(116);(0,a.default)(f).forEach(function(t){"default"!==t&&"__esModule"!==t&&(0,i.default)(e,t,{enumerable:!0,get:function(){return f[t]}})});var s=n(117);(0,a.default)(s).forEach(function(t){"default"!==t&&"__esModule"!==t&&(0,i.default)(e,t,{enumerable:!0,get:function(){return s[t]}})});var d=n(118);(0,a.default)(d).forEach(function(t){"default"!==t&&"__esModule"!==t&&(0,i.default)(e,t,{enumerable:!0,get:function(){return d[t]}})});var h=n(119);(0,a.default)(h).forEach(function(t){"default"!==t&&"__esModule"!==t&&(0,i.default)(e,t,{enumerable:!0,get:function(){return h[t]}})});var v=n(120);(0,a.default)(v).forEach(function(t){"default"!==t&&"__esModule"!==t&&(0,i.default)(e,t,{enumerable:!0,get:function(){return v[t]}})});var _=n(121);(0,a.default)(_).forEach(function(t){"default"!==t&&"__esModule"!==t&&(0,i.default)(e,t,{enumerable:!0,get:function(){return _[t]}})});var p=n(122);(0,a.default)(p).forEach(function(t){"default"!==t&&"__esModule"!==t&&(0,i.default)(e,t,{enumerable:!0,get:function(){return p[t]}})});var y=n(123);(0,a.default)(y).forEach(function(t){"default"!==t&&"__esModule"!==t&&(0,i.default)(e,t,{enumerable:!0,get:function(){return y[t]}})});var b=n(124);(0,a.default)(b).forEach(function(t){"default"!==t&&"__esModule"!==t&&(0,i.default)(e,t,{enumerable:!0,get:function(){return b[t]}})})},function(t,e){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.buildCurve=function(t,e){var n=[];if(e<=0)return n;for(var r=Math.round(e/1e3*60)-1,o=t?Math.pow(1/Math.abs(t),1/r):0,i=1;i<=r;i++)n.push(t-t*Math.pow(o,i));return n.push(t),n}},function(t,e){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=100;e.debounce=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:n,r=!(arguments.length>2&&void 0!==arguments[2])||arguments[2];if("function"==typeof t){var o=void 0;return function(){for(var n=arguments.length,i=Array(n),u=0;u<n;u++)i[u]=arguments[u];!o&&r&&setTimeout(function(){return t.apply(void 0,i)}),clearTimeout(o),o=setTimeout(function(){o=void 0,t.apply(void 0,i)},e)}}}},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}function o(t){if(Array.isArray(t)){for(var e=0,n=Array(t.length);e<t.length;e++)n[e]=t[e];return n}return(0,u.default)(t)}var i=n(2),u=r(i);Object.defineProperty(e,"__esModule",{value:!0});e.findChild=function(t,e){var n=t.children,r=null;
return n&&[].concat(o(n)).some(function(t){if(t.className.match(e))return r=t,!0}),r}},function(t,e){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n={STANDARD:1,OTHERS:-3},r=[1,28,500],o=function(t){return r[t]||r[0]};e.getDelta=function(t){if("deltaX"in t){var e=o(t.deltaMode);return{x:t.deltaX/n.STANDARD*e,y:t.deltaY/n.STANDARD*e}}return"wheelDeltaX"in t?{x:t.wheelDeltaX/n.OTHERS,y:t.wheelDeltaY/n.OTHERS}:{x:0,y:t.wheelDelta/n.OTHERS}}},function(t,e){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.getPointerData=function(t){return t.touches?t.touches[t.touches.length-1]:t}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.getPosition=void 0;var r=n(118);e.getPosition=function(t){var e=(0,r.getPointerData)(t);return{x:e.clientX,y:e.clientY}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.getTouchID=void 0;var r=n(118);e.getTouchID=function(t){var e=(0,r.getPointerData)(t);return e.identifier}},function(t,e){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.isOneOf=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[];return e.some(function(e){return t===e})}},function(t,e){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.pickInRange=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:-(1/0),n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1/0;return Math.max(e,Math.min(t,n))}},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}var o=n(90),i=r(o);Object.defineProperty(e,"__esModule",{value:!0});var u=["webkit","moz","ms","o"],a=new RegExp("^-(?!(?:"+u.join("|")+")-)"),c=function(t){var e={};return(0,i.default)(t).forEach(function(n){if(!a.test(n))return void(e[n]=t[n]);var r=t[n];n=n.replace(/^-/,""),e[n]=r,u.forEach(function(t){e["-"+t+"-"+n]=r})}),e};e.setStyle=function(t,e){e=c(e),(0,i.default)(e).forEach(function(n){var r=n.replace(/^-/,"").replace(/-([a-z])/g,function(t,e){return e.toUpperCase()});t.style[r]=e[n]})}},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}function o(t){if(Array.isArray(t)){for(var e=0,n=Array(t.length);e<t.length;e++)n[e]=t[e];return n}return(0,a.default)(t)}function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}var u=n(2),a=r(u),c=n(86),l=r(c),f=n(125),s=r(f);Object.defineProperty(e,"__esModule",{value:!0}),e.TouchRecord=void 0;var d=s.default||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},h=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),(0,l.default)(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),v=n(119),_=function(){function t(e){i(this,t),this.updateTime=Date.now(),this.delta={x:0,y:0},this.velocity={x:0,y:0},this.lastPosition=(0,v.getPosition)(e)}return h(t,[{key:"update",value:function(t){var e=this.velocity,n=this.updateTime,r=this.lastPosition,o=Date.now(),i=(0,v.getPosition)(t),u={x:-(i.x-r.x),y:-(i.y-r.y)},a=o-n||16,c=u.x/a*1e3,l=u.y/a*1e3;e.x=.8*c+.2*e.x,e.y=.8*l+.2*e.y,this.delta=u,this.updateTime=o,this.lastPosition=i}}]),t}();e.TouchRecord=function(){function t(){i(this,t),this.touchList={},this.lastTouch=null,this.activeTouchID=void 0}return h(t,[{key:"__add",value:function(t){if(this.__has(t))return null;var e=new _(t);return this.touchList[t.identifier]=e,e}},{key:"__renew",value:function(t){if(!this.__has(t))return null;var e=this.touchList[t.identifier];return e.update(t),e}},{key:"__delete",value:function(t){return delete this.touchList[t.identifier]}},{key:"__has",value:function(t){return this.touchList.hasOwnProperty(t.identifier)}},{key:"__setActiveID",value:function(t){this.activeTouchID=t[t.length-1].identifier,this.lastTouch=this.touchList[this.activeTouchID]}},{key:"__getActiveTracker",value:function(){var t=this.touchList,e=this.activeTouchID;return t[e]}},{key:"isActive",value:function(){return void 0!==this.activeTouchID}},{key:"getDelta",value:function(){var t=this.__getActiveTracker();return t?d({},t.delta):this.__primitiveValue}},{key:"getVelocity",value:function(){var t=this.__getActiveTracker();return t?d({},t.velocity):this.__primitiveValue}},{key:"getLastPosition",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",e=this.__getActiveTracker()||this.lastTouch,n=e?e.lastPosition:this.__primitiveValue;return t?n.hasOwnProperty(t)?n[t]:0:d({},n)}},{key:"updatedRecently",value:function(){var t=this.__getActiveTracker();return t&&Date.now()-t.updateTime<30}},{key:"track",value:function(t){var e=this,n=t.targetTouches;return[].concat(o(n)).forEach(function(t){e.__add(t)}),this.touchList}},{key:"update",value:function(t){var e=this,n=t.touches,r=t.changedTouches;return[].concat(o(n)).forEach(function(t){e.__renew(t)}),this.__setActiveID(r),this.touchList}},{key:"release",value:function(t){var e=this;return this.activeTouchID=void 0,[].concat(o(t.changedTouches)).forEach(function(t){e.__delete(t)}),this.touchList}},{key:"__primitiveValue",get:function(){return{x:0,y:0}}}]),t}()},function(t,e,n){t.exports={default:n(126),__esModule:!0}},function(t,e,n){n(127),t.exports=n(12).Object.assign},function(t,e,n){var r=n(10);r(r.S+r.F,"Object",{assign:n(128)})},function(t,e,n){"use strict";var r=n(31),o=n(69),i=n(70),u=n(47),a=n(34),c=Object.assign;t.exports=!c||n(21)(function(){var t={},e={},n=Symbol(),r="abcdefghijklmnopqrst";return t[n]=7,r.split("").forEach(function(t){e[t]=t}),7!=c({},t)[n]||Object.keys(c({},e)).join("")!=r})?function(t,e){for(var n=u(t),c=arguments.length,l=1,f=o.f,s=i.f;c>l;)for(var d,h=a(arguments[l++]),v=f?r(h).concat(f(h)):r(h),_=v.length,p=0;_>p;)s.call(h,d=v[p++])&&(n[d]=h[d]);return n}:c},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}var o=n(86),i=r(o),u=n(90),a=r(u);Object.defineProperty(e,"__esModule",{value:!0});var c=n(130);(0,a.default)(c).forEach(function(t){"default"!==t&&"__esModule"!==t&&(0,i.default)(e,t,{enumerable:!0,get:function(){return c[t]}})})},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}var o=n(86),i=r(o),u=n(90),a=r(u);Object.defineProperty(e,"__esModule",{value:!0});var c=n(131);(0,a.default)(c).forEach(function(t){"default"!==t&&"__esModule"!==t&&(0,i.default)(e,t,{enumerable:!0,get:function(){return c[t]}})});var l=n(132);(0,a.default)(l).forEach(function(t){"default"!==t&&"__esModule"!==t&&(0,i.default)(e,t,{enumerable:!0,get:function(){return l[t]}})});var f=n(133);(0,a.default)(f).forEach(function(t){"default"!==t&&"__esModule"!==t&&(0,i.default)(e,t,{enumerable:!0,get:function(){return f[t]}})});var s=n(134);(0,a.default)(s).forEach(function(t){"default"!==t&&"__esModule"!==t&&(0,i.default)(e,t,{enumerable:!0,get:function(){return s[t]}})});var d=n(135);(0,a.default)(d).forEach(function(t){"default"!==t&&"__esModule"!==t&&(0,i.default)(e,t,{enumerable:!0,get:function(){return d[t]}})});var h=n(136);(0,a.default)(h).forEach(function(t){"default"!==t&&"__esModule"!==t&&(0,i.default)(e,t,{enumerable:!0,get:function(){return h[t]}})});var v=n(137);(0,a.default)(v).forEach(function(t){"default"!==t&&"__esModule"!==t&&(0,i.default)(e,t,{enumerable:!0,get:function(){return v[t]}})});var _=n(138);(0,a.default)(_).forEach(function(t){"default"!==t&&"__esModule"!==t&&(0,i.default)(e,t,{enumerable:!0,get:function(){return _[t]}})});var p=n(139);(0,a.default)(p).forEach(function(t){"default"!==t&&"__esModule"!==t&&(0,i.default)(e,t,{enumerable:!0,get:function(){return p[t]}})});var y=n(140);(0,a.default)(y).forEach(function(t){"default"!==t&&"__esModule"!==t&&(0,i.default)(e,t,{enumerable:!0,get:function(){return y[t]}})});var b=n(141);(0,a.default)(b).forEach(function(t){"default"!==t&&"__esModule"!==t&&(0,i.default)(e,t,{enumerable:!0,get:function(){return b[t]}})});var g=n(142);(0,a.default)(g).forEach(function(t){"default"!==t&&"__esModule"!==t&&(0,i.default)(e,t,{enumerable:!0,get:function(){return g[t]}})});var m=n(143);(0,a.default)(m).forEach(function(t){"default"!==t&&"__esModule"!==t&&(0,i.default)(e,t,{enumerable:!0,get:function(){return m[t]}})});var x=n(144);(0,a.default)(x).forEach(function(t){"default"!==t&&"__esModule"!==t&&(0,i.default)(e,t,{enumerable:!0,get:function(){return x[t]}})})},function(t,e,n){"use strict";var r=n(78);r.SmoothScrollbar.prototype.clearMovement=r.SmoothScrollbar.prototype.stop=function(){this.movement.x=this.movement.y=0,cancelAnimationFrame(this.__timerID.scrollTo)}},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}function o(t){if(Array.isArray(t)){for(var e=0,n=Array(t.length);e<t.length;e++)n[e]=t[e];return n}return(0,u.default)(t)}var i=n(2),u=r(i),a=n(78),c=n(112),l=n(89);a.SmoothScrollbar.prototype.destroy=function(t){var e=this.__listeners,n=this.__handlers,r=this.__observer,i=this.targets,u=i.container,a=i.content;n.forEach(function(t){var e=t.evt,n=t.elem,r=t.fn;n.removeEventListener(e,r)}),n.length=e.length=0,this.stop(),cancelAnimationFrame(this.__timerID.render),r&&r.disconnect(),l.sbList.delete(u),t||this.scrollTo(0,0,300,function(){if(u.parentNode){(0,c.setStyle)(u,{overflow:""}),u.scrollTop=u.scrollLeft=0;for(var t=[].concat(o(a.childNodes));u.firstChild;)u.removeChild(u.firstChild);t.forEach(function(t){return u.appendChild(t)})}})}},function(t,e,n){"use strict";var r=n(78);r.SmoothScrollbar.prototype.getContentElem=function(){return this.targets.content}},function(t,e,n){"use strict";var r=n(78);r.SmoothScrollbar.prototype.getSize=function(){var t=this.targets.container,e=this.targets.content;return{container:{width:t.clientWidth,height:t.clientHeight},content:{width:e.offsetWidth-e.clientWidth+e.scrollWidth,height:e.offsetHeight-e.clientHeight+e.scrollHeight}}}},function(t,e,n){"use strict";var r=n(78);r.SmoothScrollbar.prototype.infiniteScroll=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:50;if("function"==typeof t){var n={x:0,y:0},r=!1;this.addListener(function(o){var i=o.offset,u=o.limit;u.y-i.y<=e&&i.y>n.y&&!r&&(r=!0,setTimeout(function(){return t(o)})),u.y-i.y>e&&(r=!1),n=i})}}},function(t,e,n){"use strict";var r=n(78);r.SmoothScrollbar.prototype.isVisible=function(t){var e=this.bounding,n=t.getBoundingClientRect(),r=Math.max(e.top,n.top),o=Math.max(e.left,n.left),i=Math.min(e.right,n.right),u=Math.min(e.bottom,n.bottom);return r<u&&o<i}},function(t,e,n){"use strict";var r=n(78);r.SmoothScrollbar.prototype.addListener=function(t){"function"==typeof t&&this.__listeners.push(t)},r.SmoothScrollbar.prototype.removeListener=function(t){"function"==typeof t&&this.__listeners.some(function(e,n,r){return e===t&&r.splice(n,1)})}},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}function o(t,e,n){return e in t?(0,l.default)(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function i(t,e){return!!e.length&&e.some(function(e){return t.match(e)})}function u(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:s.REGIESTER,e=d[t];return function(){for(var n=arguments.length,r=Array(n),o=0;o<n;o++)r[o]=arguments[o];this.__handlers.forEach(function(n){var o=n.elem,u=n.evt,a=n.fn,c=n.hasRegistered;c&&t===s.REGIESTER||!c&&t===s.UNREGIESTER||i(u,r)&&(o[e](u,a),n.hasRegistered=!c)})}}var a,c=n(86),l=r(c),f=n(78),s={REGIESTER:0,UNREGIESTER:1},d=(a={},o(a,s.REGIESTER,"addEventListener"),o(a,s.UNREGIESTER,"removeEventListener"),a);f.SmoothScrollbar.prototype.registerEvents=u(s.REGIESTER),f.SmoothScrollbar.prototype.unregisterEvents=u(s.UNREGIESTER)},function(t,e,n){"use strict";var r=n(78);r.SmoothScrollbar.prototype.scrollIntoView=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=e.alignToTop,r=void 0===n||n,o=e.onlyScrollIfNeeded,i=void 0!==o&&o,u=e.offsetTop,a=void 0===u?0:u,c=e.offsetLeft,l=void 0===c?0:c,f=e.offsetBottom,s=void 0===f?0:f,d=this.targets,h=this.bounding;if(t&&d.container.contains(t)){var v=t.getBoundingClientRect();i&&this.isVisible(t)||this.__setMovement(v.left-h.left-l,r?v.top-h.top-a:v.bottom-h.bottom-s)}}},function(t,e,n){"use strict";var r=n(112),o=n(78);o.SmoothScrollbar.prototype.scrollTo=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.offset.x,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.offset.y,n=this,o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0,i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null,u=this.options,a=this.offset,c=this.limit,l=this.__timerID;cancelAnimationFrame(l.scrollTo),i="function"==typeof i?i:function(){},u.renderByPixels&&(t=Math.round(t),e=Math.round(e));var f=a.x,s=a.y,d=(0,r.pickInRange)(t,0,c.x)-f,h=(0,r.pickInRange)(e,0,c.y)-s,v=(0,r.buildCurve)(d,o),_=(0,r.buildCurve)(h,o),p=v.length,y=0,b=function t(){n.setPosition(f+v[y],s+_[y]),y++,y===p?requestAnimationFrame(function(){i(n)}):l.scrollTo=requestAnimationFrame(t)};b()}},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}var o=n(90),i=r(o),u=n(78);u.SmoothScrollbar.prototype.setOptions=function(){var t=this,e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};(0,i.default)(e).forEach(function(n){t.options.hasOwnProperty(n)&&void 0!==e[n]&&(t.options[n]=e[n])})}},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}var o=n(125),i=r(o),u=i.default||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},a=n(112),c=n(78);c.SmoothScrollbar.prototype.setPosition=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.offset.x,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.offset.y,n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];this.__hideTrackThrottle();var r={},o=this.options,i=this.offset,c=this.limit,l=this.targets,f=this.__listeners;o.renderByPixels&&(t=Math.round(t),e=Math.round(e)),t!==i.x&&this.showTrack("x"),e!==i.y&&this.showTrack("y"),t=(0,a.pickInRange)(t,0,c.x),e=(0,a.pickInRange)(e,0,c.y),t===i.x&&e===i.y||(r.direction={x:t===i.x?"none":t>i.x?"right":"left",y:e===i.y?"none":e>i.y?"down":"up"},this.__readonly("offset",{x:t,y:e}),r.limit=u({},c),r.offset=u({},this.offset),this.__setThumbPosition(),(0,a.setStyle)(l.content,{"-transform":"translate3d("+-t+"px, "+-e+"px, 0)"}),n||f.forEach(function(t){o.syncCallbacks?t(r):requestAnimationFrame(function(){t(r)})}))}},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}function o(t,e,n){return e in t?(0,c.default)(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function i(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:f.SHOW,e=d[t];return function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"both",r=this.options,o=this.movement,i=this.targets,u=i.container,a=i.xAxis,c=i.yAxis;o.x||o.y?u.classList.add(s.CONTAINER):u.classList.remove(s.CONTAINER),r.alwaysShowTracks&&t===f.HIDE||(n=n.toLowerCase(),"both"===n&&(a.track.classList[e](s.TRACK),c.track.classList[e](s.TRACK)),"x"===n&&a.track.classList[e](s.TRACK),"y"===n&&c.track.classList[e](s.TRACK))}}var u,a=n(86),c=r(a),l=n(78),f={SHOW:0,HIDE:1},s={TRACK:"show",CONTAINER:"scrolling"},d=(u={},o(u,f.SHOW,"add"),o(u,f.HIDE,"remove"),u);l.SmoothScrollbar.prototype.showTrack=i(f.SHOW),l.SmoothScrollbar.prototype.hideTrack=i(f.HIDE)},function(t,e,n){"use strict";function r(){if("glow"===this.options.overscrollEffect){var t=this.targets,e=this.size,n=t.canvas,r=n.elem,o=n.context,i=window.devicePixelRatio||1,u=e.container.width*i,a=e.container.height*i;u===r.width&&a===r.height||(r.width=u,r.height=a,o.scale(i,i))}}function o(){var t=this.size,e=this.thumbSize,n=this.targets,r=n.xAxis,o=n.yAxis;(0,u.setStyle)(r.track,{display:t.content.width<=t.container.width?"none":"block"}),(0,u.setStyle)(o.track,{display:t.content.height<=t.container.height?"none":"block"}),(0,u.setStyle)(r.thumb,{width:e.x+"px"}),(0,u.setStyle)(o.thumb,{height:e.y+"px"})}function i(){var t=this.options;this.__updateBounding();var e=this.getSize(),n={x:Math.max(e.content.width-e.container.width,0),y:Math.max(e.content.height-e.container.height,0)},i={realX:e.container.width/e.content.width*e.container.width,realY:e.container.height/e.content.height*e.container.height};i.x=Math.max(i.realX,t.thumbMinSize),i.y=Math.max(i.realY,t.thumbMinSize),this.__readonly("size",e).__readonly("limit",n).__readonly("thumbSize",i),o.call(this),r.call(this),this.setPosition(),this.__setThumbPosition()}var u=n(112),a=n(78);a.SmoothScrollbar.prototype.update=function(t){t?requestAnimationFrame(i.bind(this)):i.call(this)}},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}var o=n(86),i=r(o),u=n(90),a=r(u);Object.defineProperty(e,"__esModule",{value:!0});var c=n(146);(0,a.default)(c).forEach(function(t){"default"!==t&&"__esModule"!==t&&(0,i.default)(e,t,{enumerable:!0,get:function(){return c[t]}})})},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}var o=n(86),i=r(o),u=n(90),a=r(u);Object.defineProperty(e,"__esModule",{value:!0});var c=n(147);(0,a.default)(c).forEach(function(t){"default"!==t&&"__esModule"!==t&&(0,i.default)(e,t,{enumerable:!0,get:function(){return c[t]}})});var l=n(148);(0,a.default)(l).forEach(function(t){"default"!==t&&"__esModule"!==t&&(0,i.default)(e,t,{enumerable:!0,get:function(){return l[t]}})});var f=n(149);(0,a.default)(f).forEach(function(t){"default"!==t&&"__esModule"!==t&&(0,i.default)(e,t,{enumerable:!0,get:function(){return f[t]}})});var s=n(154);(0,a.default)(s).forEach(function(t){"default"!==t&&"__esModule"!==t&&(0,i.default)(e,t,{enumerable:!0,get:function(){return s[t]}})});var d=n(155);(0,a.default)(d).forEach(function(t){"default"!==t&&"__esModule"!==t&&(0,i.default)(e,t,{enumerable:!0,get:function(){return d[t]}})});var h=n(156);(0,a.default)(h).forEach(function(t){"default"!==t&&"__esModule"!==t&&(0,i.default)(e,t,{enumerable:!0,get:function(){return h[t]}})});var v=n(157);(0,a.default)(v).forEach(function(t){"default"!==t&&"__esModule"!==t&&(0,i.default)(e,t,{enumerable:!0,get:function(){return v[t]}})})},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}function o(t){if(Array.isArray(t)){for(var e=0,n=Array(t.length);e<t.length;e++)n[e]=t[e];return n}return(0,a.default)(t)}function i(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=this.limit,i=this.options,u=this.movement;this.__updateThrottle(),i.renderByPixels&&(t=Math.round(t),e=Math.round(e));var a=u.x+t,l=u.y+e;0===r.x&&(a=0),0===r.y&&(l=0);var f=this.__getDeltaLimit(n);u.x=c.pickInRange.apply(void 0,[a].concat(o(f.x))),u.y=c.pickInRange.apply(void 0,[l].concat(o(f.y)))}var u=n(2),a=r(u),c=n(112),l=n(78);Object.defineProperty(l.SmoothScrollbar.prototype,"__addMovement",{value:i,writable:!0,configurable:!0})},function(t,e,n){"use strict";function r(){var t=this,e=this.movement,n=this.movementLocked;a.forEach(function(r){n[r]=e[r]&&t.__willOverscroll(r,e[r])})}function o(){var t=this.movementLocked;a.forEach(function(e){t[e]=!1})}function i(){var t=this.movementLocked;return t.x||t.y}var u=n(78),a=["x","y"];Object.defineProperty(u.SmoothScrollbar.prototype,"__autoLockMovement",{value:r,writable:!0,configurable:!0}),Object.defineProperty(u.SmoothScrollbar.prototype,"__unlockMovement",{value:o,writable:!0,configurable:!0}),Object.defineProperty(u.SmoothScrollbar.prototype,"__isMovementLocked",{value:i,writable:!0,configurable:!0})},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}function o(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";if(t){var e=this.options,n=this.movement,r=this.overscrollRendered,o=this.MAX_OVERSCROLL,i=n[t]=(0,h.pickInRange)(n[t],-o,o),u=e.overscrollDamping,a=r[t]+(i-r[t])*u;e.renderByPixels&&(a|=0),!this.__isMovementLocked()&&Math.abs(a-r[t])<.1&&(a-=i/Math.abs(i||1)),Math.abs(a)<Math.abs(r[t])&&this.__readonly("overscrollBack",!0),(a*r[t]<0||Math.abs(a)<=1)&&(a=0,this.__readonly("overscrollBack",!1)),r[t]=a}}function i(t){var e=this.__touchRecord,n=this.overscrollRendered;return n.x!==t.x||n.y!==t.y||!(!d.GLOBAL_ENV.TOUCH_SUPPORTED||!e.updatedRecently())}function u(){var t=this,e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[];if(e.length&&this.options.overscrollEffect){var n=this.options,r=this.overscrollRendered,u=l({},r);if(e.forEach(function(e){return o.call(t,e)}),i.call(this,u))switch(n.overscrollEffect){case"bounce":return s.overscrollBounce.call(this,r.x,r.y);case"glow":return s.overscrollGlow.call(this,r.x,r.y);default:return}}}var a=n(125),c=r(a),l=c.default||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},f=n(78),s=n(150),d=n(89),h=n(112);Object.defineProperty(f.SmoothScrollbar.prototype,"__renderOverscroll",{value:u,writable:!0,configurable:!0})},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}var o=n(86),i=r(o),u=n(90),a=r(u);Object.defineProperty(e,"__esModule",{value:!0});var c=n(151);(0,a.default)(c).forEach(function(t){"default"!==t&&"__esModule"!==t&&(0,i.default)(e,t,{enumerable:!0,get:function(){return c[t]}})})},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}var o=n(86),i=r(o),u=n(90),a=r(u);Object.defineProperty(e,"__esModule",{value:!0});var c=n(152);(0,a.default)(c).forEach(function(t){"default"!==t&&"__esModule"!==t&&(0,i.default)(e,t,{enumerable:!0,get:function(){return c[t]}})});var l=n(153);(0,a.default)(l).forEach(function(t){"default"!==t&&"__esModule"!==t&&(0,i.default)(e,t,{enumerable:!0,get:function(){return l[t]}})})},function(t,e,n){"use strict";function r(t,e){var n=this.size,r=this.offset,i=this.targets,u=this.thumbOffset,a=i.xAxis,c=i.yAxis,l=i.content;if((0,o.setStyle)(l,{"-transform":"translate3d("+-(r.x+t)+"px, "+-(r.y+e)+"px, 0)"}),t){var f=n.container.width/(n.container.width+Math.abs(t));(0,o.setStyle)(a.thumb,{"-transform":"translate3d("+u.x+"px, 0, 0) scale3d("+f+", 1, 1)","-transform-origin":t<0?"left":"right"})}if(e){var s=n.container.height/(n.container.height+Math.abs(e));(0,o.setStyle)(c.thumb,{"-transform":"translate3d(0, "+u.y+"px, 0) scale3d(1, "+s+", 1)","-transform-origin":e<0?"top":"bottom"})}}Object.defineProperty(e,"__esModule",{value:!0}),e.overscrollBounce=r;var o=n(112)},function(t,e,n){"use strict";function r(t,e){var n=this.size,r=this.targets,a=this.options,c=r.canvas,l=c.elem,f=c.context;return t||e?((0,u.setStyle)(l,{display:"block"}),f.clearRect(0,0,n.content.width,n.container.height),f.fillStyle=a.overscrollEffectColor,o.call(this,t),void i.call(this,e)):(0,u.setStyle)(l,{display:"none"})}function o(t){var e=this.size,n=this.targets,r=this.__touchRecord,o=this.MAX_OVERSCROLL,i=e.container,l=i.width,f=i.height,s=n.canvas.context;s.save(),t>0&&s.transform(-1,0,0,1,l,0);var d=(0,u.pickInRange)(Math.abs(t)/o,0,a),h=(0,u.pickInRange)(d,0,c)*l,v=Math.abs(t),_=r.getLastPosition("y")||f/2;s.globalAlpha=d,s.beginPath(),s.moveTo(0,-h),s.quadraticCurveTo(v,_,0,f+h),s.fill(),s.closePath(),s.restore()}function i(t){var e=this.size,n=this.targets,r=this.__touchRecord,o=this.MAX_OVERSCROLL,i=e.container,l=i.width,f=i.height,s=n.canvas.context;s.save(),t>0&&s.transform(1,0,0,-1,0,f);var d=(0,u.pickInRange)(Math.abs(t)/o,0,a),h=(0,u.pickInRange)(d,0,c)*l,v=r.getLastPosition("x")||l/2,_=Math.abs(t);s.globalAlpha=d,s.beginPath(),s.moveTo(-h,0),s.quadraticCurveTo(v,_,l+h,0),s.fill(),s.closePath(),s.restore()}Object.defineProperty(e,"__esModule",{value:!0}),e.overscrollGlow=r;var u=n(112),a=.75,c=.25},function(t,e,n){"use strict";function r(t){var e=this.options,n=this.offset,r=this.movement,o=this.__touchRecord,i=e.damping,u=e.renderByPixels,a=e.overscrollDamping,c=n[t],l=r[t],f=i;if(this.__willOverscroll(t,l)?f=a:o.isActive()&&(f=.5),Math.abs(l)<1){var s=c+l;return{movement:0,position:l>0?Math.ceil(s):Math.floor(s)}}var d=l*(1-f);return u&&(d|=0),{movement:d,position:c+l-d}}function o(){var t=this.options,e=this.offset,n=this.limit,i=this.movement,a=this.overscrollRendered,c=this.__timerID;if(i.x||i.y||a.x||a.y){var l=r.call(this,"x"),f=r.call(this,"y"),s=[];if(t.overscrollEffect){var d=(0,u.pickInRange)(l.position,0,n.x),h=(0,u.pickInRange)(f.position,0,n.y);(a.x||d===e.x&&i.x)&&s.push("x"),(a.y||h===e.y&&i.y)&&s.push("y")}this.movementLocked.x||(i.x=l.movement),this.movementLocked.y||(i.y=f.movement),this.setPosition(l.position,f.position),this.__renderOverscroll(s)}c.render=requestAnimationFrame(o.bind(this))}var i=n(78),u=n(112);Object.defineProperty(i.SmoothScrollbar.prototype,"__render",{value:o,writable:!0,configurable:!0})},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}function o(t){if(Array.isArray(t)){for(var e=0,n=Array(t.length);e<t.length;e++)n[e]=t[e];return n}return(0,a.default)(t)}function i(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=this.options,i=this.movement;this.__updateThrottle();var u=this.__getDeltaLimit(n);r.renderByPixels&&(t=Math.round(t),e=Math.round(e)),i.x=c.pickInRange.apply(void 0,[t].concat(o(u.x))),i.y=c.pickInRange.apply(void 0,[e].concat(o(u.y)))}var u=n(2),a=r(u),c=n(112),l=n(78);Object.defineProperty(l.SmoothScrollbar.prototype,"__setMovement",{value:i,writable:!0,configurable:!0})},function(t,e,n){"use strict";function r(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=this.options,r=this.offset,o=this.limit;if(!n.continuousScrolling)return!1;var u=(0,i.pickInRange)(t+r.x,0,o.x),a=(0,i.pickInRange)(e+r.y,0,o.y),c=!0;return c&=u===r.x,c&=a===r.y,c&=u===o.x||0===u||a===o.y||0===a}var o=n(78),i=n(112);Object.defineProperty(o.SmoothScrollbar.prototype,"__shouldPropagateMovement",{value:r,writable:!0,configurable:!0})},function(t,e,n){"use strict";function r(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;if(!t)return!1;var n=this.offset,r=this.limit,o=n[t];return(0,i.pickInRange)(e+o,0,r[t])===o&&(0===o||o===r[t])}var o=n(78),i=n(112);Object.defineProperty(o.SmoothScrollbar.prototype,"__willOverscroll",{value:r,writable:!0,configurable:!0})},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}var o=n(86),i=r(o),u=n(90),a=r(u);Object.defineProperty(e,"__esModule",{value:!0});var c=n(159);(0,a.default)(c).forEach(function(t){"default"!==t&&"__esModule"!==t&&(0,i.default)(e,t,{enumerable:!0,get:function(){return c[t]}})})},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}var o=n(86),i=r(o),u=n(90),a=r(u);Object.defineProperty(e,"__esModule",{value:!0});var c=n(160);(0,a.default)(c).forEach(function(t){"default"!==t&&"__esModule"!==t&&(0,i.default)(e,t,{enumerable:!0,get:function(){return c[t]}})});var l=n(161);(0,a.default)(l).forEach(function(t){"default"!==t&&"__esModule"!==t&&(0,i.default)(e,t,{enumerable:!0,get:function(){return l[t]}})});var f=n(168);(0,a.default)(f).forEach(function(t){"default"!==t&&"__esModule"!==t&&(0,i.default)(e,t,{enumerable:!0,get:function(){return f[t]}})});var s=n(169);(0,a.default)(s).forEach(function(t){"default"!==t&&"__esModule"!==t&&(0,i.default)(e,t,{enumerable:!0,get:function(){return s[t]}})});var d=n(170);(0,a.default)(d).forEach(function(t){"default"!==t&&"__esModule"!==t&&(0,i.default)(e,t,{enumerable:!0,get:function(){return d[t]}})});var h=n(171);(0,a.default)(h).forEach(function(t){"default"!==t&&"__esModule"!==t&&(0,i.default)(e,t,{enumerable:!0,get:function(){return h[t]}})});var v=n(172);(0,a.default)(v).forEach(function(t){"default"!==t&&"__esModule"!==t&&(0,i.default)(e,t,{enumerable:!0,get:function(){return v[t]}})})},function(t,e,n){"use strict";function r(){var t=this,e=this.targets,n=e.container,r=e.content,o=!1,u=void 0,a=void 0;Object.defineProperty(this,"__isDrag",{get:function(){return o},enumerable:!1});var c=function e(n){var r=n.x,o=n.y;if(r||o){var i=t.options.speed;t.__setMovement(r*i,o*i),u=requestAnimationFrame(function(){e({x:r,y:o})})}};this.__addEvent(n,"dragstart",function(e){t.__eventFromChildScrollbar(e)||(o=!0,a=e.target.clientHeight,(0,i.setStyle)(r,{"pointer-events":"auto"}),cancelAnimationFrame(u),t.__updateBounding())}),this.__addEvent(document,"dragover mousemove touchmove",function(e){if(o&&!t.__eventFromChildScrollbar(e)){cancelAnimationFrame(u),e.preventDefault();var n=t.__getPointerTrend(e,a);c(n)}}),this.__addEvent(document,"dragend mouseup touchend blur",function(){cancelAnimationFrame(u),o=!1})}var o=n(78),i=n(112);Object.defineProperty(o.SmoothScrollbar.prototype,"__dragHandler",{value:r,writable:!0,configurable:!0})},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}function o(){var t=this,e=this.targets,n=function(e){var n=t.size,r=t.offset,o=t.limit,i=t.movement;switch(e){case s.SPACE:return[0,200];case s.PAGE_UP:return[0,-n.container.height+40];case s.PAGE_DOWN:return[0,n.container.height-40];case s.END:return[0,Math.abs(i.y)+o.y-r.y];case s.HOME:return[0,-Math.abs(i.y)-r.y];case s.LEFT:return[-40,0];case s.UP:return[0,-40];case s.RIGHT:return[40,0];case s.DOWN:return[0,40];default:return null}},r=e.container;this.__addEvent(r,"keydown",function(e){if(document.activeElement===r){var o=t.options,i=t.parents,u=t.movementLocked,a=n(e.keyCode||e.which);if(a){var c=l(a,2),f=c[0],s=c[1];if(t.__shouldPropagateMovement(f,s))return r.blur(),i.length&&i[0].focus(),t.__updateThrottle();e.preventDefault(),t.__unlockMovement(),f&&t.__willOverscroll("x",f)&&(u.x=!0),s&&t.__willOverscroll("y",s)&&(u.y=!0);var d=o.speed;t.__addMovement(f*d,s*d)}}}),this.__addEvent(r,"keyup",function(){t.__unlockMovement()})}var i=n(162),u=r(i),a=n(165),c=r(a),l=function(){function t(t,e){var n=[],r=!0,o=!1,i=void 0;try{for(var u,a=(0,c.default)(t);!(r=(u=a.next()).done)&&(n.push(u.value),!e||n.length!==e);r=!0);}catch(t){o=!0,i=t}finally{try{!r&&a.return&&a.return()}finally{if(o)throw i}}return n}return function(e,n){if(Array.isArray(e))return e;if((0,u.default)(Object(e)))return t(e,n);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),f=n(78),s={SPACE:32,PAGE_UP:33,PAGE_DOWN:34,END:35,HOME:36,LEFT:37,UP:38,RIGHT:39,DOWN:40};Object.defineProperty(f.SmoothScrollbar.prototype,"__keyboardHandler",{value:o,writable:!0,configurable:!0})},function(t,e,n){t.exports={default:n(163),__esModule:!0}},function(t,e,n){n(57),n(4),t.exports=n(164)},function(t,e,n){var r=n(53),o=n(45)("iterator"),i=n(27);t.exports=n(12).isIterable=function(t){var e=Object(t);return void 0!==e[o]||"@@iterator"in e||i.hasOwnProperty(r(e))}},function(t,e,n){t.exports={default:n(166),__esModule:!0}},function(t,e,n){n(57),n(4),t.exports=n(167)},function(t,e,n){var r=n(17),o=n(52);t.exports=n(12).getIterator=function(t){var e=o(t);if("function"!=typeof e)throw TypeError(t+" is not iterable!");return r(e.call(t))}},function(t,e,n){"use strict";function r(){var t=this,e=this.targets,n=e.container,r=e.xAxis,o=e.yAxis,u=function(e,n){var r=t.size,o=t.thumbSize;if("x"===e){var i=r.container.width-(o.x-o.realX);return n/i*r.content.width}if("y"===e){var u=r.container.height-(o.y-o.realY);return n/u*r.content.height}return 0},a=function(t){return(0,i.isOneOf)(t,[r.track,r.thumb])?"x":(0,i.isOneOf)(t,[o.track,o.thumb])?"y":void 0},c=void 0,l=void 0,f=void 0,s=void 0,d=void 0;this.__addEvent(n,"click",function(e){if(!l&&(0,i.isOneOf)(e.target,[r.track,o.track])){var n=e.target,c=a(n),f=n.getBoundingClientRect(),s=(0,i.getPosition)(e),d=t.offset,h=t.thumbSize;
if("x"===c){var v=s.x-f.left-h.x/2;t.__setMovement(u(c,v)-d.x,0)}else{var _=s.y-f.top-h.y/2;t.__setMovement(0,u(c,_)-d.y)}}}),this.__addEvent(n,"mousedown",function(e){if((0,i.isOneOf)(e.target,[r.thumb,o.thumb])){c=!0;var n=(0,i.getPosition)(e),u=e.target.getBoundingClientRect();s=a(e.target),f={x:n.x-u.left,y:n.y-u.top},d=t.targets.container.getBoundingClientRect()}}),this.__addEvent(window,"mousemove",function(e){if(c){e.preventDefault(),l=!0;var n=t.offset,r=(0,i.getPosition)(e);if("x"===s){var o=r.x-f.x-d.left;t.setPosition(u(s,o),n.y)}if("y"===s){var a=r.y-f.y-d.top;t.setPosition(n.x,u(s,a))}}}),this.__addEvent(window,"mouseup blur",function(){c=l=!1})}var o=n(78),i=n(112);Object.defineProperty(o.SmoothScrollbar.prototype,"__mouseHandler",{value:r,writable:!0,configurable:!0})},function(t,e,n){"use strict";function r(){this.__addEvent(window,"resize",this.__updateThrottle)}var o=n(78);Object.defineProperty(o.SmoothScrollbar.prototype,"__resizeHandler",{value:r,writable:!0,configurable:!0})},function(t,e,n){"use strict";function r(){var t=this,e=!1,n=void 0,r=this.targets,o=r.container,u=r.content,a=function e(r){var o=r.x,i=r.y;if(o||i){var u=t.options.speed;t.__setMovement(o*u,i*u),n=requestAnimationFrame(function(){e({x:o,y:i})})}},c=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";(0,i.setStyle)(o,{"-user-select":t})};this.__addEvent(window,"mousemove",function(r){if(e){cancelAnimationFrame(n);var o=t.__getPointerTrend(r);a(o)}}),this.__addEvent(u,"selectstart",function(r){return t.__eventFromChildScrollbar(r)?c("none"):(cancelAnimationFrame(n),t.__updateBounding(),void(e=!0))}),this.__addEvent(window,"mouseup blur",function(){cancelAnimationFrame(n),c(),e=!1}),this.__addEvent(o,"scroll",function(t){t.preventDefault(),o.scrollTop=o.scrollLeft=0})}var o=n(78),i=n(112);Object.defineProperty(o.SmoothScrollbar.prototype,"__selectHandler",{value:r,writable:!0,configurable:!0})},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}function o(){var t=this,e=this.targets,n=this.__touchRecord,r=e.container;this.__addEvent(r,"touchstart",function(e){if(!t.__isDrag){var r=t.__timerID,o=t.movement;cancelAnimationFrame(r.scrollTo),t.__willOverscroll("x")||(o.x=0),t.__willOverscroll("y")||(o.y=0),n.track(e),t.__autoLockMovement()}}),this.__addEvent(r,"touchmove",function(e){if(!(t.__isDrag||s&&s!==t)){n.update(e);var r=n.getDelta(),o=r.x,i=r.y;if(t.__shouldPropagateMovement(o,i))return t.__updateThrottle();var u=t.movement,a=t.MAX_OVERSCROLL,c=t.options;if(u.x&&t.__willOverscroll("x",o)){var l=2;"bounce"===c.overscrollEffect&&(l+=Math.abs(10*u.x/a)),Math.abs(u.x)>=a?o=0:o/=l}if(u.y&&t.__willOverscroll("y",i)){var f=2;"bounce"===c.overscrollEffect&&(f+=Math.abs(10*u.y/a)),Math.abs(u.y)>=a?i=0:i/=f}t.__autoLockMovement(),e.preventDefault(),t.__addMovement(o,i,!0),s=t}}),this.__addEvent(r,"touchcancel touchend",function(e){if(!t.__isDrag){var r=t.options.speed,o=n.getVelocity(),i={};(0,u.default)(o).forEach(function(t){var e=(0,l.pickInRange)(o[t]*c.GLOBAL_ENV.EASING_MULTIPLIER,-1e3,1e3);i[t]=Math.abs(e)>f?e*r:0}),t.__addMovement(i.x,i.y,!0),t.__unlockMovement(),n.release(e),s=null}})}var i=n(90),u=r(i),a=n(78),c=n(89),l=n(112),f=100,s=null;Object.defineProperty(a.SmoothScrollbar.prototype,"__touchHandler",{value:o,writable:!0,configurable:!0})},function(t,e,n){"use strict";function r(){var t=this,e=this.targets.container,n=!1,r=(0,i.debounce)(function(){n=!1},30,!1);this.__addEvent(e,u.GLOBAL_ENV.WHEEL_EVENT,function(e){var o=t.options,u=(0,i.getDelta)(e),a=u.x,c=u.y;return a*=o.speed,c*=o.speed,t.__shouldPropagateMovement(a,c)?t.__updateThrottle():(e.preventDefault(),r(),t.overscrollBack&&(n=!0),n&&(t.__willOverscroll("x",a)&&(a=0),t.__willOverscroll("y",c)&&(c=0)),void t.__addMovement(a,c,!0))})}var o=n(78),i=n(112),u=n(89);Object.defineProperty(o.SmoothScrollbar.prototype,"__wheelHandler",{value:r,writable:!0,configurable:!0})},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}var o=n(86),i=r(o),u=n(90),a=r(u);Object.defineProperty(e,"__esModule",{value:!0});var c=n(174);(0,a.default)(c).forEach(function(t){"default"!==t&&"__esModule"!==t&&(0,i.default)(e,t,{enumerable:!0,get:function(){return c[t]}})})},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}var o=n(86),i=r(o),u=n(90),a=r(u);Object.defineProperty(e,"__esModule",{value:!0});var c=n(175);(0,a.default)(c).forEach(function(t){"default"!==t&&"__esModule"!==t&&(0,i.default)(e,t,{enumerable:!0,get:function(){return c[t]}})});var l=n(176);(0,a.default)(l).forEach(function(t){"default"!==t&&"__esModule"!==t&&(0,i.default)(e,t,{enumerable:!0,get:function(){return l[t]}})});var f=n(177);(0,a.default)(f).forEach(function(t){"default"!==t&&"__esModule"!==t&&(0,i.default)(e,t,{enumerable:!0,get:function(){return f[t]}})});var s=n(178);(0,a.default)(s).forEach(function(t){"default"!==t&&"__esModule"!==t&&(0,i.default)(e,t,{enumerable:!0,get:function(){return s[t]}})});var d=n(179);(0,a.default)(d).forEach(function(t){"default"!==t&&"__esModule"!==t&&(0,i.default)(e,t,{enumerable:!0,get:function(){return d[t]}})});var h=n(182);(0,a.default)(h).forEach(function(t){"default"!==t&&"__esModule"!==t&&(0,i.default)(e,t,{enumerable:!0,get:function(){return h[t]}})});var v=n(183);(0,a.default)(v).forEach(function(t){"default"!==t&&"__esModule"!==t&&(0,i.default)(e,t,{enumerable:!0,get:function(){return v[t]}})});var _=n(184);(0,a.default)(_).forEach(function(t){"default"!==t&&"__esModule"!==t&&(0,i.default)(e,t,{enumerable:!0,get:function(){return _[t]}})});var p=n(185);(0,a.default)(p).forEach(function(t){"default"!==t&&"__esModule"!==t&&(0,i.default)(e,t,{enumerable:!0,get:function(){return p[t]}})});var y=n(186);(0,a.default)(y).forEach(function(t){"default"!==t&&"__esModule"!==t&&(0,i.default)(e,t,{enumerable:!0,get:function(){return y[t]}})})},function(t,e,n){"use strict";function r(t,e,n){var r=this;if(!t||"function"!=typeof t.addEventListener)throw new TypeError("expect elem to be a DOM element, but got "+t);var o=function(t){for(var e=arguments.length,r=Array(e>1?e-1:0),o=1;o<e;o++)r[o-1]=arguments[o];!t.type.match(/drag/)&&t.defaultPrevented||n.apply(void 0,[t].concat(r))};e.split(/\s+/g).forEach(function(e){r.__handlers.push({evt:e,elem:t,fn:o,hasRegistered:!0}),t.addEventListener(e,o)})}var o=n(78);Object.defineProperty(o.SmoothScrollbar.prototype,"__addEvent",{value:r,writable:!0,configurable:!0})},function(t,e,n){"use strict";function r(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=t.target;return this.children.some(function(t){return t.contains(e)})}var o=n(78);Object.defineProperty(o.SmoothScrollbar.prototype,"__eventFromChildScrollbar",{value:r,writable:!0,configurable:!0})},function(t,e,n){"use strict";function r(){var t=arguments.length>0&&void 0!==arguments[0]&&arguments[0],e=this.options,n=this.offset,r=this.limit;return t&&(e.continuousScrolling||e.overscrollEffect)?{x:[-(1/0),1/0],y:[-(1/0),1/0]}:{x:[-n.x,r.x-n.x],y:[-n.y,r.y-n.y]}}var o=n(78);Object.defineProperty(o.SmoothScrollbar.prototype,"__getDeltaLimit",{value:r,writable:!0,configurable:!0})},function(t,e,n){"use strict";function r(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=this.bounding,r=n.top,o=n.right,u=n.bottom,a=n.left,c=(0,i.getPosition)(t),l=c.x,f=c.y,s={x:0,y:0};return 0===l&&0===f?s:(l>o-e?s.x=l-o+e:l<a+e&&(s.x=l-a-e),f>u-e?s.y=f-u+e:f<r+e&&(s.y=f-r-e),s)}var o=n(78),i=n(112);Object.defineProperty(o.SmoothScrollbar.prototype,"__getPointerTrend",{value:r,writable:!0,configurable:!0})},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}function o(t){if(Array.isArray(t)){for(var e=0,n=Array(t.length);e<t.length;e++)n[e]=t[e];return n}return(0,h.default)(t)}function i(t){var e=this,n={speed:1,damping:.1,thumbMinSize:20,syncCallbacks:!1,renderByPixels:!0,alwaysShowTracks:!1,continuousScrolling:"auto",overscrollEffect:!1,overscrollEffectColor:"#87ceeb",overscrollDamping:.2},r={damping:[0,1],speed:[0,1/0],thumbMinSize:[0,1/0],overscrollEffect:[!1,"bounce","glow"],overscrollDamping:[0,1]},i=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"auto";if(n.overscrollEffect!==!1)return!1;switch(t){case"auto":return e.isNestedScrollbar;default:return!!t}},u={set ignoreEvents(t){console.warn("`options.ignoreEvents` parameter is deprecated, use `instance#unregisterEvents()` method instead. https://github.com/idiotWu/smooth-scrollbar/wiki/Instance-Methods#instanceunregisterevents-regex--regex-regex--")},set friction(t){console.warn("`options.friction="+t+"` is deprecated, use `options.damping="+t/100+"` instead."),this.damping=t/100},get syncCallbacks(){return n.syncCallbacks},set syncCallbacks(t){n.syncCallbacks=!!t},get renderByPixels(){return n.renderByPixels},set renderByPixels(t){n.renderByPixels=!!t},get alwaysShowTracks(){return n.alwaysShowTracks},set alwaysShowTracks(t){t=!!t,n.alwaysShowTracks=t;var r=e.targets.container;t?(e.showTrack(),r.classList.add("sticky")):(e.hideTrack(),r.classList.remove("sticky"))},get continuousScrolling(){return i(n.continuousScrolling)},set continuousScrolling(t){"auto"===t?n.continuousScrolling=t:n.continuousScrolling=!!t},get overscrollEffect(){return n.overscrollEffect},set overscrollEffect(t){t&&!~r.overscrollEffect.indexOf(t)&&(console.warn("`overscrollEffect` should be one of "+(0,s.default)(r.overscrollEffect)+", but got "+(0,s.default)(t)+". It will be set to `false` now."),t=!1),n.overscrollEffect=t},get overscrollEffectColor(){return n.overscrollEffectColor},set overscrollEffectColor(t){n.overscrollEffectColor=t}};(0,l.default)(n).filter(function(t){return!u.hasOwnProperty(t)}).forEach(function(t){(0,a.default)(u,t,{enumerable:!0,get:function(){return n[t]},set:function(e){if(isNaN(parseFloat(e)))throw new TypeError("expect `options."+t+"` to be a number, but got "+("undefined"==typeof e?"undefined":b(e)));n[t]=g.pickInRange.apply(void 0,[e].concat(o(r[t])))}})}),this.__readonly("options",u),this.setOptions(t)}var u=n(86),a=r(u),c=n(90),l=r(c),f=n(180),s=r(f),d=n(2),h=r(d),v=n(55),_=r(v),p=n(62),y=r(p),b="function"==typeof y.default&&"symbol"==typeof _.default?function(t){return typeof t}:function(t){return t&&"function"==typeof y.default&&t.constructor===y.default&&t!==y.default.prototype?"symbol":typeof t},g=n(112),m=n(78);Object.defineProperty(m.SmoothScrollbar.prototype,"__initOptions",{value:i,writable:!0,configurable:!0})},function(t,e,n){t.exports={default:n(181),__esModule:!0}},function(t,e,n){var r=n(12),o=r.JSON||(r.JSON={stringify:JSON.stringify});t.exports=function(t){return o.stringify.apply(o,arguments)}},function(t,e,n){"use strict";function r(){this.update(),this.__keyboardHandler(),this.__resizeHandler(),this.__selectHandler(),this.__mouseHandler(),this.__touchHandler(),this.__wheelHandler(),this.__dragHandler(),this.__render()}var o=n(78);Object.defineProperty(o.SmoothScrollbar.prototype,"__initScrollbar",{value:r,writable:!0,configurable:!0})},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}function o(t,e){return(0,u.default)(this,t,{value:e,enumerable:!0,configurable:!0})}var i=n(86),u=r(i),a=n(78);Object.defineProperty(a.SmoothScrollbar.prototype,"__readonly",{value:o,writable:!0,configurable:!0})},function(t,e,n){"use strict";function r(){var t=this.targets,e=this.size,n=this.offset,r=this.thumbOffset,i=this.thumbSize;r.x=n.x/e.content.width*(e.container.width-(i.x-i.realX)),r.y=n.y/e.content.height*(e.container.height-(i.y-i.realY)),(0,o.setStyle)(t.xAxis.thumb,{"-transform":"translate3d("+r.x+"px, 0, 0)"}),(0,o.setStyle)(t.yAxis.thumb,{"-transform":"translate3d(0, "+r.y+"px, 0)"})}var o=n(112),i=n(78);Object.defineProperty(i.SmoothScrollbar.prototype,"__setThumbPosition",{value:r,writable:!0,configurable:!0})},function(t,e,n){"use strict";function r(){var t=this.targets.container,e=t.getBoundingClientRect(),n=e.top,r=e.right,o=e.bottom,i=e.left,u=window,a=u.innerHeight,c=u.innerWidth;this.__readonly("bounding",{top:Math.max(n,0),right:Math.min(r,c),bottom:Math.min(o,a),left:Math.max(i,0)})}var o=n(78);Object.defineProperty(o.SmoothScrollbar.prototype,"__updateBounding",{value:r,writable:!0,configurable:!0})},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}function o(t){if(Array.isArray(t)){for(var e=0,n=Array(t.length);e<t.length;e++)n[e]=t[e];return n}return(0,a.default)(t)}function i(){var t=this.targets,e=t.container,n=t.content;this.__readonly("children",[].concat(o(n.querySelectorAll(l.selectors)))),this.__readonly("isNestedScrollbar",!1);for(var r=[],i=e;i=i.parentElement;)l.sbList.has(i)&&(this.__readonly("isNestedScrollbar",!0),r.push(i));this.__readonly("parents",r)}var u=n(2),a=r(u),c=n(78),l=n(89);Object.defineProperty(c.SmoothScrollbar.prototype,"__updateTree",{value:i,writable:!0,configurable:!0})},function(t,e){}])});
},{}],45:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _wolfy87Eventemitter = require('wolfy87-eventemitter');

var _wolfy87Eventemitter2 = _interopRequireDefault(_wolfy87Eventemitter);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Resize = function (_eventEmitter) {
  _inherits(Resize, _eventEmitter);

  function Resize() {
    _classCallCheck(this, Resize);

    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Resize).call(this));

    _this.onResizeHandle = _this.onResize.bind(_this);

    window.addEventListener('resize', _this.onResizeHandle);
    window.addEventListener('orientationchange', _this.onResizeHandle);
    return _this;
  }

  _createClass(Resize, [{
    key: 'onResize',
    value: function onResize() {
      if (!this.started) {
        this.started = true;
        this.times = 0;

        this.emitEvent('resize:start');
      }

      if (this.handle != null) {
        this.times = 0;

        window.cancelAnimationFrame(this.handle);
      }

      this.handle = window.requestAnimationFrame(function tick() {
        if (++this.times === 10) {
          this.handle = null;
          this.started = false;
          this.times = 0;

          this.emitEvent('resize:end');
        } else {
          this.handle = window.requestAnimationFrame(tick.bind(this));
        }
      }.bind(this));
    }
  }, {
    key: 'destroy',
    value: function destroy() {
      window.removeEventListener('resize', this.onResizeHandle);
      window.removeEventListener('orientationchange', this.onResizeHandle);

      this.removeAllListeners();
    }
  }]);

  return Resize;
}(_wolfy87Eventemitter2.default);

exports.default = Resize;

},{"wolfy87-eventemitter":46}],46:[function(require,module,exports){
/*!
 * EventEmitter v4.2.11 - git.io/ee
 * Unlicense - http://unlicense.org/
 * Oliver Caldwell - http://oli.me.uk/
 * @preserve
 */

;(function () {
    'use strict';

    /**
     * Class for managing events.
     * Can be extended to provide event functionality in other classes.
     *
     * @class EventEmitter Manages event registering and emitting.
     */
    function EventEmitter() {}

    // Shortcuts to improve speed and size
    var proto = EventEmitter.prototype;
    var exports = this;
    var originalGlobalValue = exports.EventEmitter;

    /**
     * Finds the index of the listener for the event in its storage array.
     *
     * @param {Function[]} listeners Array of listeners to search through.
     * @param {Function} listener Method to look for.
     * @return {Number} Index of the specified listener, -1 if not found
     * @api private
     */
    function indexOfListener(listeners, listener) {
        var i = listeners.length;
        while (i--) {
            if (listeners[i].listener === listener) {
                return i;
            }
        }

        return -1;
    }

    /**
     * Alias a method while keeping the context correct, to allow for overwriting of target method.
     *
     * @param {String} name The name of the target method.
     * @return {Function} The aliased method
     * @api private
     */
    function alias(name) {
        return function aliasClosure() {
            return this[name].apply(this, arguments);
        };
    }

    /**
     * Returns the listener array for the specified event.
     * Will initialise the event object and listener arrays if required.
     * Will return an object if you use a regex search. The object contains keys for each matched event. So /ba[rz]/ might return an object containing bar and baz. But only if you have either defined them with defineEvent or added some listeners to them.
     * Each property in the object response is an array of listener functions.
     *
     * @param {String|RegExp} evt Name of the event to return the listeners from.
     * @return {Function[]|Object} All listener functions for the event.
     */
    proto.getListeners = function getListeners(evt) {
        var events = this._getEvents();
        var response;
        var key;

        // Return a concatenated array of all matching events if
        // the selector is a regular expression.
        if (evt instanceof RegExp) {
            response = {};
            for (key in events) {
                if (events.hasOwnProperty(key) && evt.test(key)) {
                    response[key] = events[key];
                }
            }
        }
        else {
            response = events[evt] || (events[evt] = []);
        }

        return response;
    };

    /**
     * Takes a list of listener objects and flattens it into a list of listener functions.
     *
     * @param {Object[]} listeners Raw listener objects.
     * @return {Function[]} Just the listener functions.
     */
    proto.flattenListeners = function flattenListeners(listeners) {
        var flatListeners = [];
        var i;

        for (i = 0; i < listeners.length; i += 1) {
            flatListeners.push(listeners[i].listener);
        }

        return flatListeners;
    };

    /**
     * Fetches the requested listeners via getListeners but will always return the results inside an object. This is mainly for internal use but others may find it useful.
     *
     * @param {String|RegExp} evt Name of the event to return the listeners from.
     * @return {Object} All listener functions for an event in an object.
     */
    proto.getListenersAsObject = function getListenersAsObject(evt) {
        var listeners = this.getListeners(evt);
        var response;

        if (listeners instanceof Array) {
            response = {};
            response[evt] = listeners;
        }

        return response || listeners;
    };

    /**
     * Adds a listener function to the specified event.
     * The listener will not be added if it is a duplicate.
     * If the listener returns true then it will be removed after it is called.
     * If you pass a regular expression as the event name then the listener will be added to all events that match it.
     *
     * @param {String|RegExp} evt Name of the event to attach the listener to.
     * @param {Function} listener Method to be called when the event is emitted. If the function returns true then it will be removed after calling.
     * @return {Object} Current instance of EventEmitter for chaining.
     */
    proto.addListener = function addListener(evt, listener) {
        var listeners = this.getListenersAsObject(evt);
        var listenerIsWrapped = typeof listener === 'object';
        var key;

        for (key in listeners) {
            if (listeners.hasOwnProperty(key) && indexOfListener(listeners[key], listener) === -1) {
                listeners[key].push(listenerIsWrapped ? listener : {
                    listener: listener,
                    once: false
                });
            }
        }

        return this;
    };

    /**
     * Alias of addListener
     */
    proto.on = alias('addListener');

    /**
     * Semi-alias of addListener. It will add a listener that will be
     * automatically removed after its first execution.
     *
     * @param {String|RegExp} evt Name of the event to attach the listener to.
     * @param {Function} listener Method to be called when the event is emitted. If the function returns true then it will be removed after calling.
     * @return {Object} Current instance of EventEmitter for chaining.
     */
    proto.addOnceListener = function addOnceListener(evt, listener) {
        return this.addListener(evt, {
            listener: listener,
            once: true
        });
    };

    /**
     * Alias of addOnceListener.
     */
    proto.once = alias('addOnceListener');

    /**
     * Defines an event name. This is required if you want to use a regex to add a listener to multiple events at once. If you don't do this then how do you expect it to know what event to add to? Should it just add to every possible match for a regex? No. That is scary and bad.
     * You need to tell it what event names should be matched by a regex.
     *
     * @param {String} evt Name of the event to create.
     * @return {Object} Current instance of EventEmitter for chaining.
     */
    proto.defineEvent = function defineEvent(evt) {
        this.getListeners(evt);
        return this;
    };

    /**
     * Uses defineEvent to define multiple events.
     *
     * @param {String[]} evts An array of event names to define.
     * @return {Object} Current instance of EventEmitter for chaining.
     */
    proto.defineEvents = function defineEvents(evts) {
        for (var i = 0; i < evts.length; i += 1) {
            this.defineEvent(evts[i]);
        }
        return this;
    };

    /**
     * Removes a listener function from the specified event.
     * When passed a regular expression as the event name, it will remove the listener from all events that match it.
     *
     * @param {String|RegExp} evt Name of the event to remove the listener from.
     * @param {Function} listener Method to remove from the event.
     * @return {Object} Current instance of EventEmitter for chaining.
     */
    proto.removeListener = function removeListener(evt, listener) {
        var listeners = this.getListenersAsObject(evt);
        var index;
        var key;

        for (key in listeners) {
            if (listeners.hasOwnProperty(key)) {
                index = indexOfListener(listeners[key], listener);

                if (index !== -1) {
                    listeners[key].splice(index, 1);
                }
            }
        }

        return this;
    };

    /**
     * Alias of removeListener
     */
    proto.off = alias('removeListener');

    /**
     * Adds listeners in bulk using the manipulateListeners method.
     * If you pass an object as the second argument you can add to multiple events at once. The object should contain key value pairs of events and listeners or listener arrays. You can also pass it an event name and an array of listeners to be added.
     * You can also pass it a regular expression to add the array of listeners to all events that match it.
     * Yeah, this function does quite a bit. That's probably a bad thing.
     *
     * @param {String|Object|RegExp} evt An event name if you will pass an array of listeners next. An object if you wish to add to multiple events at once.
     * @param {Function[]} [listeners] An optional array of listener functions to add.
     * @return {Object} Current instance of EventEmitter for chaining.
     */
    proto.addListeners = function addListeners(evt, listeners) {
        // Pass through to manipulateListeners
        return this.manipulateListeners(false, evt, listeners);
    };

    /**
     * Removes listeners in bulk using the manipulateListeners method.
     * If you pass an object as the second argument you can remove from multiple events at once. The object should contain key value pairs of events and listeners or listener arrays.
     * You can also pass it an event name and an array of listeners to be removed.
     * You can also pass it a regular expression to remove the listeners from all events that match it.
     *
     * @param {String|Object|RegExp} evt An event name if you will pass an array of listeners next. An object if you wish to remove from multiple events at once.
     * @param {Function[]} [listeners] An optional array of listener functions to remove.
     * @return {Object} Current instance of EventEmitter for chaining.
     */
    proto.removeListeners = function removeListeners(evt, listeners) {
        // Pass through to manipulateListeners
        return this.manipulateListeners(true, evt, listeners);
    };

    /**
     * Edits listeners in bulk. The addListeners and removeListeners methods both use this to do their job. You should really use those instead, this is a little lower level.
     * The first argument will determine if the listeners are removed (true) or added (false).
     * If you pass an object as the second argument you can add/remove from multiple events at once. The object should contain key value pairs of events and listeners or listener arrays.
     * You can also pass it an event name and an array of listeners to be added/removed.
     * You can also pass it a regular expression to manipulate the listeners of all events that match it.
     *
     * @param {Boolean} remove True if you want to remove listeners, false if you want to add.
     * @param {String|Object|RegExp} evt An event name if you will pass an array of listeners next. An object if you wish to add/remove from multiple events at once.
     * @param {Function[]} [listeners] An optional array of listener functions to add/remove.
     * @return {Object} Current instance of EventEmitter for chaining.
     */
    proto.manipulateListeners = function manipulateListeners(remove, evt, listeners) {
        var i;
        var value;
        var single = remove ? this.removeListener : this.addListener;
        var multiple = remove ? this.removeListeners : this.addListeners;

        // If evt is an object then pass each of its properties to this method
        if (typeof evt === 'object' && !(evt instanceof RegExp)) {
            for (i in evt) {
                if (evt.hasOwnProperty(i) && (value = evt[i])) {
                    // Pass the single listener straight through to the singular method
                    if (typeof value === 'function') {
                        single.call(this, i, value);
                    }
                    else {
                        // Otherwise pass back to the multiple function
                        multiple.call(this, i, value);
                    }
                }
            }
        }
        else {
            // So evt must be a string
            // And listeners must be an array of listeners
            // Loop over it and pass each one to the multiple method
            i = listeners.length;
            while (i--) {
                single.call(this, evt, listeners[i]);
            }
        }

        return this;
    };

    /**
     * Removes all listeners from a specified event.
     * If you do not specify an event then all listeners will be removed.
     * That means every event will be emptied.
     * You can also pass a regex to remove all events that match it.
     *
     * @param {String|RegExp} [evt] Optional name of the event to remove all listeners for. Will remove from every event if not passed.
     * @return {Object} Current instance of EventEmitter for chaining.
     */
    proto.removeEvent = function removeEvent(evt) {
        var type = typeof evt;
        var events = this._getEvents();
        var key;

        // Remove different things depending on the state of evt
        if (type === 'string') {
            // Remove all listeners for the specified event
            delete events[evt];
        }
        else if (evt instanceof RegExp) {
            // Remove all events matching the regex.
            for (key in events) {
                if (events.hasOwnProperty(key) && evt.test(key)) {
                    delete events[key];
                }
            }
        }
        else {
            // Remove all listeners in all events
            delete this._events;
        }

        return this;
    };

    /**
     * Alias of removeEvent.
     *
     * Added to mirror the node API.
     */
    proto.removeAllListeners = alias('removeEvent');

    /**
     * Emits an event of your choice.
     * When emitted, every listener attached to that event will be executed.
     * If you pass the optional argument array then those arguments will be passed to every listener upon execution.
     * Because it uses `apply`, your array of arguments will be passed as if you wrote them out separately.
     * So they will not arrive within the array on the other side, they will be separate.
     * You can also pass a regular expression to emit to all events that match it.
     *
     * @param {String|RegExp} evt Name of the event to emit and execute listeners for.
     * @param {Array} [args] Optional array of arguments to be passed to each listener.
     * @return {Object} Current instance of EventEmitter for chaining.
     */
    proto.emitEvent = function emitEvent(evt, args) {
        var listenersMap = this.getListenersAsObject(evt);
        var listeners;
        var listener;
        var i;
        var key;
        var response;

        for (key in listenersMap) {
            if (listenersMap.hasOwnProperty(key)) {
                listeners = listenersMap[key].slice(0);
                i = listeners.length;

                while (i--) {
                    // If the listener returns true then it shall be removed from the event
                    // The function is executed either with a basic call or an apply if there is an args array
                    listener = listeners[i];

                    if (listener.once === true) {
                        this.removeListener(evt, listener.listener);
                    }

                    response = listener.listener.apply(this, args || []);

                    if (response === this._getOnceReturnValue()) {
                        this.removeListener(evt, listener.listener);
                    }
                }
            }
        }

        return this;
    };

    /**
     * Alias of emitEvent
     */
    proto.trigger = alias('emitEvent');

    /**
     * Subtly different from emitEvent in that it will pass its arguments on to the listeners, as opposed to taking a single array of arguments to pass on.
     * As with emitEvent, you can pass a regex in place of the event name to emit to all events that match it.
     *
     * @param {String|RegExp} evt Name of the event to emit and execute listeners for.
     * @param {...*} Optional additional arguments to be passed to each listener.
     * @return {Object} Current instance of EventEmitter for chaining.
     */
    proto.emit = function emit(evt) {
        var args = Array.prototype.slice.call(arguments, 1);
        return this.emitEvent(evt, args);
    };

    /**
     * Sets the current value to check against when executing listeners. If a
     * listeners return value matches the one set here then it will be removed
     * after execution. This value defaults to true.
     *
     * @param {*} value The new value to check for when executing listeners.
     * @return {Object} Current instance of EventEmitter for chaining.
     */
    proto.setOnceReturnValue = function setOnceReturnValue(value) {
        this._onceReturnValue = value;
        return this;
    };

    /**
     * Fetches the current value to check against when executing listeners. If
     * the listeners return value matches this one then it should be removed
     * automatically. It will return true by default.
     *
     * @return {*|Boolean} The current value to check for or the default, true.
     * @api private
     */
    proto._getOnceReturnValue = function _getOnceReturnValue() {
        if (this.hasOwnProperty('_onceReturnValue')) {
            return this._onceReturnValue;
        }
        else {
            return true;
        }
    };

    /**
     * Fetches the events object and creates one if required.
     *
     * @return {Object} The events storage object.
     * @api private
     */
    proto._getEvents = function _getEvents() {
        return this._events || (this._events = {});
    };

    /**
     * Reverts the global {@link EventEmitter} to its previous value and returns a reference to this version.
     *
     * @return {Function} Non conflicting EventEmitter class.
     */
    EventEmitter.noConflict = function noConflict() {
        exports.EventEmitter = originalGlobalValue;
        return EventEmitter;
    };

    // Expose the class either via AMD, CommonJS or the global object
    if (typeof define === 'function' && define.amd) {
        define(function () {
            return EventEmitter;
        });
    }
    else if (typeof module === 'object' && module.exports){
        module.exports = EventEmitter;
    }
    else {
        exports.EventEmitter = EventEmitter;
    }
}.call(this));

},{}]},{},[1,3,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
